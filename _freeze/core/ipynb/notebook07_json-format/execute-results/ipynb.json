{
  "hash": "9501edd9e4df82d4e2eb14df5c5480bc",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Using `JSON` data with `Python`\njupyter: python3\nexecute: \n  eval: true\n---\n\n\n\nThis notebook is concerned with `JSON` a format that serves many purposes. Just as `csv` files, `json` files are important sources and sinks for Spark. As a exchange format, `JSON` is also a serialization tool for Python  and many other languages. `JSON` provides a way to accomodate *semi-structured* data in otherwise tabular environments (dataframes and databases tables). \n\nThe notebook is organized in the following way:\n\n- Serialization/Deserialization of Python builtin types using `JSON`\n- Serialization/Deserialization of (some) custom types using `JSON`\n- `JSON` readers and writers for Spark dataframes\n- Composite types in Spark dataframes\n- Advanced `JSON` readers and writers for Spark dataframes\n\n\n## Serialization and deserialization of built-in types\n\n::: {#c77c9090 .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:25.759874Z\",\"start_time\":\"2020-03-17T14:29:25.726787Z\"}' execution_count=1}\n``` {.python .cell-code}\nimport json\n\nobj = {\n    \"name\": \"Foo Bar\",\n    \"age\": 78,\n    \"friends\": [\"Jane\",\"John\"],\n    \"balance\": 345.80,\n    \"other_names\":(\"Doe\",\"Joe\"),\n    \"active\": True,\n    \"spouse\": None\n}\n\nprint(json.dumps(obj, sort_keys=True, indent=4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n    \"active\": true,\n    \"age\": 78,\n    \"balance\": 345.8,\n    \"friends\": [\n        \"Jane\",\n        \"John\"\n    ],\n    \"name\": \"Foo Bar\",\n    \"other_names\": [\n        \"Doe\",\n        \"Joe\"\n    ],\n    \"spouse\": null\n}\n```\n:::\n:::\n\n\n::: {.callout-note}\n\n`json.dumps()` outputs a `JSON` formatted string. \n\nNot every type of object can be fed to `json.dumps()`. \n\n:::\n\n::: {#571cc256 .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:26.039839Z\",\"start_time\":\"2020-03-17T14:29:26.027858Z\"}' execution_count=2}\n``` {.python .cell-code}\nwith open('user.json','w') as file:\n    json.dump(obj, file, sort_keys=True, indent=4)\n```\n:::\n\n\n::: {#23b9e2f7 .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:27.110218Z\",\"start_time\":\"2020-03-17T14:29:26.479550Z\"}' execution_count=3}\n``` {.python .cell-code}\n!cat user.json\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\r\n    \"active\": true,\r\n    \"age\": 78,\r\n    \"balance\": 345.8,\r\n    \"friends\": [\r\n        \"Jane\",\r\n        \"John\"\r\n    ],\r\n    \"name\": \"Foo Bar\",\r\n    \"other_names\": [\r\n        \"Doe\",\r\n        \"Joe\"\r\n    ],\r\n    \"spouse\": null\r\n}\n```\n:::\n:::\n\n\n::: {#0aa1e0fa .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:27.137307Z\",\"start_time\":\"2020-03-17T14:29:27.114179Z\"}' execution_count=4}\n``` {.python .cell-code}\njson.loads('{\"active\": true, \"age\": 78, \"balance\": 345.8, \"friends\": [\"Jane\",\"John\"], \"name\": \"Foo Bar\", \"other_names\": [\"Doe\",\"Joe\"],\"spouse\":null}')\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n{'active': True,\n 'age': 78,\n 'balance': 345.8,\n 'friends': ['Jane', 'John'],\n 'name': 'Foo Bar',\n 'other_names': ['Doe', 'Joe'],\n 'spouse': None}\n```\n:::\n:::\n\n\n::: {#ea6dc83b .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:27.149816Z\",\"start_time\":\"2020-03-17T14:29:27.140548Z\"}' execution_count=5}\n``` {.python .cell-code}\nwith open('user.json', 'r') as file:\n    user_data = json.load(file)\n\nprint(user_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'active': True, 'age': 78, 'balance': 345.8, 'friends': ['Jane', 'John'], 'name': 'Foo Bar', 'other_names': ['Doe', 'Joe'], 'spouse': None}\n```\n:::\n:::\n\n\n::: {.callout-note  title=\"Question\"}\n\nWhat happens if we feed `json.dumps()` with a `numpy` array? \n\n:::\n\n::: {.callout-note  title=\"Question\"}\n\nWhat happens if we feed `json.dumps()` with a `datatime` object? \n\n:::\n\n\n## Serialization and deserialization of custom objects\n\n::: {#0bb97e48 .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:27.733203Z\",\"start_time\":\"2020-03-17T14:29:27.718399Z\"}' execution_count=6}\n``` {.python .cell-code}\nclass User(object):\n    \"\"\"Custom User Class\n    \"\"\"\n    def __init__(self, name, age, active, balance, \n                 other_names, friends, spouse):\n        self.name = name\n        self.age = age\n        self.active = active\n        self.balance = balance\n        self.other_names = other_names\n        self.friends = friends\n        self.spouse = spouse\n            \n    def __repr__(self):\n        s = \"User(\"\n        s += \"name=\" + repr(self.name)\n        s += \", age=\" + repr(self.age)\n        s += \", active=\" + repr(self.active)\n        s += \", other_names=\" + repr(self.other_names)\n        s += \", friends=\" + repr(self.friends)\n        s += \", spouse=\" + repr(self.spouse) + \")\"\n        return s\n```\n:::\n\n\n::: {.callout-tip}\n\nBrush up your dunder/magic methods, for example in *Fluent Python* by Ramalho (Chapter I: *The Python data model*, Section *Overview of Special Methods*)\n\n:::\n\n::: {#625e8d4a .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:27.733203Z\",\"start_time\":\"2020-03-17T14:29:27.718399Z\"}' execution_count=7}\n``` {.python .cell-code}\nnew_user = User(\n    name = \"Foo Bar\",\n    age = 78,\n    friends = [\"Jane\", \"John\"],\n    balance = 345.80,\n    other_names = (\"Doe\", \"Joe\"),\n    active = True,\n    spouse = None\n)\n\nnew_user\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nUser(name='Foo Bar', age=78, active=True, other_names=('Doe', 'Joe'), friends=['Jane', 'John'], spouse=None)\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nUncomment to see what happens\n\n:::\n\n::: {#b8c8b63b .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:49.613442Z\",\"start_time\":\"2020-03-17T14:29:49.601102Z\"}' execution_count=8}\n``` {.python .cell-code}\n# This will raise a TypeError\n# json.dumps(new_user)\n```\n:::\n\n\nAs expected, the custom object `new_user` is not JSON serializable. So let's build a method that does that for us.\n\n- This comes as no surprise to us, since earlier on we observed that\nthe `json` module only handles the built-in types, and `User` is not one.\n\n- We need to send our user data to a client over a network, so how do we get \nourselves out of this error state?\n\n- A simple solution would be to convert our custom type into a serializable\ntype that is a built-in type. We can conveniently define a method `convert_to_dict()`\nthat returns a dictionary representation of our object. `json.dumps()` \ntakes in a optional argument, `default`, which specifies a function to be called if the object is not serializable. This function returns a JSON encodable version of the object.\n\nRecall that class `obj` has a dunder attribute `__dict__` that provides a basis for obtaining a dictionary with the attributes of any object:\n\n::: {#b53f45ea .cell execution_count=9}\n``` {.python .cell-code}\nnew_user.__dict__\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n{'name': 'Foo Bar',\n 'age': 78,\n 'active': True,\n 'balance': 345.8,\n 'other_names': ('Doe', 'Joe'),\n 'friends': ['Jane', 'John'],\n 'spouse': None}\n```\n:::\n:::\n\n\n::: {#c4906b57 .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:52.854067Z\",\"start_time\":\"2020-03-17T14:29:52.847015Z\"}' execution_count=10}\n``` {.python .cell-code}\ndef obj_to_dict(obj):\n    \"\"\"Converts an object to a dictionary representation of the object including \n    meta-data information about the object's module and class name.\n\n    Parameters\n    ----------\n    obj : `object`\n        A python object to be converted into a dictionary representation\n\n    Returns\n    -------\n    output : `dict`\n        A dictionary representation of the object\n    \"\"\"\n    # Add object meta data \n    obj_dict = {\n        \"__class__\": obj.__class__.__name__,\n        \"__module__\": obj.__module__\n    }\n    # Add the object properties\n    return obj_dict | obj.__dict__\n```\n:::\n\n\n::: {#c31d02e6 .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:52.854067Z\",\"start_time\":\"2020-03-17T14:29:52.847015Z\"}' execution_count=11}\n``` {.python .cell-code}\nobj_to_dict(new_user)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n{'__class__': 'User',\n '__module__': '__main__',\n 'name': 'Foo Bar',\n 'age': 78,\n 'active': True,\n 'balance': 345.8,\n 'other_names': ('Doe', 'Joe'),\n 'friends': ['Jane', 'John'],\n 'spouse': None}\n```\n:::\n:::\n\n\nThe function `convert_to_dict` does the following:\n\n- create a dictionary named `obj_dict` to act as the dict representation of our object.\n\n- dunder attributes `__class__.__name__` and `__module__` provide crucial metadata on the object: the class name and the module name\n\n- add the instance attributes of the object using `obj.__dict__` (`Python` stores instance attributes in a dictionary)\n\nThe resulting `obj_dict` is now serializable (provided all attributes of our object are).\n\nNow we can comfortably call `json.dumps()` on the object and pass `default=convert_to_dict`\n\n::: {.callout-note}\n\nObviously this fails if one of the attributes is not `JSON` serializable\n\n:::\n\n::: {#413e7150 .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:53.566068Z\",\"start_time\":\"2020-03-17T14:29:53.560201Z\"}' execution_count=12}\n``` {.python .cell-code}\nprint(json.dumps(new_user, default=obj_to_dict, indent=4, sort_keys=True))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n    \"__class__\": \"User\",\n    \"__module__\": \"__main__\",\n    \"active\": true,\n    \"age\": 78,\n    \"balance\": 345.8,\n    \"friends\": [\n        \"Jane\",\n        \"John\"\n    ],\n    \"name\": \"Foo Bar\",\n    \"other_names\": [\n        \"Doe\",\n        \"Joe\"\n    ],\n    \"spouse\": null\n}\n```\n:::\n:::\n\n\nNow, if we want to decode (deserialiaze) a custom object, and create the correct object type, we need a function that does the inverse of `obj_to_dict`, since `json.loads` simply returns a `dict`:\n\n::: {#06444530 .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:54.413286Z\",\"start_time\":\"2020-03-17T14:29:54.408660Z\"}' execution_count=13}\n``` {.python .cell-code}\nuser_data = json.loads(json.dumps(new_user, default=obj_to_dict))\nprint(user_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'__class__': 'User', '__module__': '__main__', 'name': 'Foo Bar', 'age': 78, 'active': True, 'balance': 345.8, 'other_names': ['Doe', 'Joe'], 'friends': ['Jane', 'John'], 'spouse': None}\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nWe need `json.loads()` to reconstruct a `User` object from this dictionary: `json.loads()` takes an optional argument `object_hook` which specifies a function that returns the desired custom object, given the decoded output (which in this case, is a `dict`).\n\n:::\n\n::: {#d059dc15 .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:55.257839Z\",\"start_time\":\"2020-03-17T14:29:55.253496Z\"}' execution_count=14}\n``` {.python .cell-code}\ndef dict_to_obj(input_dict):\n    \"\"\"Converts a dictionary representation of an object to an instance of the object.\n\n    Parameters\n    ----------\n    input_dict : `dict`\n        A dictionary representation of the object, containing \"__module__\" \n        and \"__class__\" metadata\n\n    Returns\n    -------    \n    obj : `object`\n        A python object constructed from the dictionary representation    \n    \"\"\"\n    assert \"__class__\" in input_dict and \"__module__\" in input_dict\n    class_name = input_dict.pop(\"__class__\")\n    module_name = input_dict.pop(\"__module__\")\n    module = __import__(module_name)\n    class_ = getattr(module, class_name)\n    obj = class_(**input_dict)\n    return obj\n```\n:::\n\n\nThis function does the following: \n\n- Extract the class name from the dictionary under the key `__class__`\n\n- Extract the module name from the dictionary under the key `__module__`\n\n- Imports the module and get the class\n\n- Instantiate the class by giving to the class constructor all the instance arguments through dictionary unpacking\n\n::: {#c866934e .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:57.102787Z\",\"start_time\":\"2020-03-17T14:29:57.097553Z\"}' execution_count=15}\n``` {.python .cell-code}\nobj_data = json.dumps(new_user, default=obj_to_dict)\nnew_object = json.loads(obj_data, object_hook=dict_to_obj)\nnew_object\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nUser(name='Foo Bar', age=78, active=True, other_names=['Doe', 'Joe'], friends=['Jane', 'John'], spouse=None)\n```\n:::\n:::\n\n\n::: {#4a7fd1bb .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:57.944835Z\",\"start_time\":\"2020-03-17T14:29:57.939581Z\"}' execution_count=16}\n``` {.python .cell-code}\ntype(new_object)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n__main__.User\n```\n:::\n:::\n\n\n::: {#31a9cb80 .cell ExecuteTime='{\"end_time\":\"2020-03-17T14:29:58.679143Z\",\"start_time\":\"2020-03-17T14:29:58.673617Z\"}' execution_count=17}\n``` {.python .cell-code}\nnew_object.age\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n78\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nFunctions `obj_to_dict()` and `dict_to_obj()`  are showcases for special/magic/dunder methods.\n\nIn the definition of class `User`, two special methods were explicitly defined: `__init__()` and `__repr__()`. But many more are available, including `__dir__()`. \n\nRemember that some dunder members of the object are not callable.\n\n:::\n\n::: {#ee7eb26f .cell execution_count=18}\n``` {.python .cell-code}\n[dude for dude in dir(new_object) if dude.startswith('__') and callable(getattr(new_object, dude))]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n['__class__',\n '__delattr__',\n '__dir__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__']\n```\n:::\n:::\n\n\n::: {#a4578483 .cell execution_count=19}\n``` {.python .cell-code}\n[dude for dude in dir(new_object) if dude.startswith('__') and not callable(getattr(new_object, dude))]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n['__dict__', '__doc__', '__module__', '__weakref__']\n```\n:::\n:::\n\n\n::: {#a6127ab0 .cell execution_count=20}\n``` {.python .cell-code}\nnew_object.__getattribute__('age')\n\ngetattr(new_object, 'age')\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n78\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nClass `User` could have been implemented as a `dataclass`\n\n:::\n\n::: {#058bef6a .cell execution_count=21}\n``` {.python .cell-code}\nfrom dataclasses import dataclass\n\n@dataclass\nclass UserBis(object):\n    \"\"\"Custom User Class\n    \"\"\"\n    name: str \n    age: int\n    active: bool\n    balance: float\n    other_names: list[str]\n    friends: list[str]\n    spouse: str\n```\n:::\n\n\n::: {.callout-note}\n\n`@dataclass`  is a *decorator*.  Have a look at the chapter on decorators in [Fluent Python] by Ramalho\n\n\n:::\n\n::: {#dc831ad0 .cell execution_count=22}\n``` {.python .cell-code}\nother_user = UserBis(**(new_user.__dict__))\n```\n:::\n\n\n::: {#e5b3a5bc .cell execution_count=23}\n``` {.python .cell-code}\nrepr(other_user)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n\"UserBis(name='Foo Bar', age=78, active=True, balance=345.8, other_names=('Doe', 'Joe'), friends=['Jane', 'John'], spouse=None)\"\n```\n:::\n:::\n\n\n::: {#be54e565 .cell execution_count=24}\n``` {.python .cell-code}\n{dude for dude in dir(other_user) if dude.startswith('__')} -  {dude for dude in dir(new_user) if dude.startswith('__')}\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n{'__annotations__',\n '__dataclass_fields__',\n '__dataclass_params__',\n '__match_args__'}\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nHave a look at [`dataclasses` documentation](https://docs.python.org/3/library/dataclasses.html). \n\nSee also [Chapter 5: Data class builders]() in [Fluent Python]()\n\n:::\n\n# Using `JSON` with Spark\n\nFirst, we download the data if it's not there yet\n\n::: {#62f33018 .cell ExecuteTime='{\"end_time\":\"2020-03-17T16:19:34.238130Z\",\"start_time\":\"2020-03-17T16:19:34.163729Z\"}' execution_count=25}\n``` {.python .cell-code}\nimport requests, zipfile, io\nfrom pathlib import Path\n\npath = Path('drug-enforcement.json.zip')\nif not path.exists():\n    url = \"https://s-v-b.github.io/IFEBY310/data/drug-enforcement.json.zip\"\n    r = requests.get(url)\n    z = zipfile.ZipFile(io.BytesIO(r.content))\n    z.extractall(path='./')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">BadZipFile</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 8</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> url <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">https://s-v-b.github.io/IFEBY310/data/drug-enforcement.json.zip</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> r <span style=\"color:rgb(98,98,98)\">=</span> requests<span style=\"color:rgb(98,98,98)\">.</span>get(url)\n<span class=\"ansi-green-fg\">----&gt; 8</span> z <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">zipfile</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">ZipFile</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">io</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">BytesIO</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">r</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">content</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      9</span> z<span style=\"color:rgb(98,98,98)\">.</span>extractall(path<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">./</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.12/zipfile/__init__.py:1349</span>, in <span class=\"ansi-cyan-fg\">ZipFile.__init__</span><span class=\"ansi-blue-fg\">(self, file, mode, compression, allowZip64, compresslevel, strict_timestamps, metadata_encoding)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1347</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1348</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> mode <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">r</span><span style=\"color:rgb(175,0,0)\">'</span>:\n<span class=\"ansi-green-fg\">-&gt; 1349</span>         <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_RealGetContents</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1350</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> mode <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> (<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">w</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">x</span><span style=\"color:rgb(175,0,0)\">'</span>):\n<span class=\"ansi-green-fg ansi-bold\">   1351</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># set the modified flag so central directory gets written</span>\n<span class=\"ansi-green-fg ansi-bold\">   1352</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># even if no files are added to the archive</span>\n<span class=\"ansi-green-fg ansi-bold\">   1353</span>         <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_didModify <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.12/zipfile/__init__.py:1416</span>, in <span class=\"ansi-cyan-fg\">ZipFile._RealGetContents</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1414</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> BadZipFile(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">File is not a zip file</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">   1415</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> endrec:\n<span class=\"ansi-green-fg\">-&gt; 1416</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> BadZipFile(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">File is not a zip file</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">   1417</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>debug <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">1</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1418</span>     <span style=\"color:rgb(0,135,0)\">print</span>(endrec)\n\n<span class=\"ansi-red-fg\">BadZipFile</span>: File is not a zip file</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4141846e .cell execution_count=26}\n``` {.python .cell-code}\n!ls drug*\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nls: cannot access 'drug*': No such file or directory\r\n```\n:::\n:::\n\n\n## Reading a `JSON` dataset with `Spark`\n\n::: {#36a74fdc .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:13:47.583384Z\",\"start_time\":\"2020-03-17T17:13:43.123090Z\"}' execution_count=27}\n``` {.python .cell-code}\nfrom pyspark import SparkConf, SparkContext\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as fn\nfrom pyspark.sql.functions import col\n\nspark = (SparkSession\n    .builder\n    .appName(\"Spark JSON\")\n    .getOrCreate()\n)\n\nsc = spark._sc\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/03/09 22:57:27 WARN Utils: Your hostname, boucheron-Precision-5480 resolves to a loopback address: 127.0.1.1; using 192.168.10.120 instead (on interface wlp0s20f3)\n25/03/09 22:57:27 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n25/03/09 22:57:27 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n25/03/09 22:57:28 WARN Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.\n25/03/09 22:57:28 WARN Utils: Service 'SparkUI' could not bind on port 4041. Attempting port 4042.\n```\n:::\n:::\n\n\n::: {#fcfb7cc9 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:13:47.590453Z\",\"start_time\":\"2020-03-17T17:13:47.585590Z\"}' execution_count=28}\n``` {.python .cell-code}\nfilename = \"drug-enforcement.json\"\n```\n:::\n\n\nFirst, lets look at the data. It's a large set of JSON records about drugs enforcement.\n\n::: {#56ef9572 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:13:48.148481Z\",\"start_time\":\"2020-03-17T17:13:47.594201Z\"}' execution_count=29}\n``` {.python .cell-code}\n!head -n 100 drug-enforcement.json\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhead: cannot open 'drug-enforcement.json' for reading: No such file or directory\r\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nWe need to tell spark that rows span on several lines with the `multLine` option\n\n:::\n\n::: {#14bb40d2 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:13:52.259661Z\",\"start_time\":\"2020-03-17T17:13:48.152192Z\"}' execution_count=30}\n``` {.python .cell-code}\ndf = spark.read.json(filename, multiLine=True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AnalysisException</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[30], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">json</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filename</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">multiLine</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">True</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/sql/readwriter.py:425</span>, in <span class=\"ansi-cyan-fg\">DataFrameReader.json</span><span class=\"ansi-blue-fg\">(self, path, schema, primitivesAsString, prefersDecimal, allowComments, allowUnquotedFieldNames, allowSingleQuotes, allowNumericLeadingZero, allowBackslashEscapingAnyCharacter, mode, columnNameOfCorruptRecord, dateFormat, timestampFormat, multiLine, allowUnquotedControlChars, lineSep, samplingRatio, dropFieldIfAllNull, encoding, locale, pathGlobFilter, recursiveFileLookup, modifiedBefore, modifiedAfter, allowNonNumericNumbers)</span>\n<span class=\"ansi-green-fg ansi-bold\">    423</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">type</span>(path) <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(0,135,0)\">list</span>:\n<span class=\"ansi-green-fg ansi-bold\">    424</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_spark<span style=\"color:rgb(98,98,98)\">.</span>_sc<span style=\"color:rgb(98,98,98)\">.</span>_jvm <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg\">--&gt; 425</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_df(<span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jreader</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">json</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_sc</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jvm</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">PythonUtils</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">toSeq</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>)\n<span class=\"ansi-green-fg ansi-bold\">    426</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(path, RDD):\n<span class=\"ansi-green-fg ansi-bold\">    428</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">func</span>(iterator: Iterable) <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">&gt;</span> Iterable:\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/py4j/java_gateway.py:1322</span>, in <span class=\"ansi-cyan-fg\">JavaMember.__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1316</span> command <span style=\"color:rgb(98,98,98)\">=</span> proto<span style=\"color:rgb(98,98,98)\">.</span>CALL_COMMAND_NAME <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1317</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>command_header <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1318</span>     args_command <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1319</span>     proto<span style=\"color:rgb(98,98,98)\">.</span>END_COMMAND_PART\n<span class=\"ansi-green-fg ansi-bold\">   1321</span> answer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>gateway_client<span style=\"color:rgb(98,98,98)\">.</span>send_command(command)\n<span class=\"ansi-green-fg\">-&gt; 1322</span> return_value <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_return_value</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">   1323</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">answer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">gateway_client</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">target_id</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">name</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1325</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> temp_arg <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> temp_args:\n<span class=\"ansi-green-fg ansi-bold\">   1326</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">hasattr</span>(temp_arg, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_detach</span><span style=\"color:rgb(175,0,0)\">\"</span>):\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/errors/exceptions/captured.py:185</span>, in <span class=\"ansi-cyan-fg\">capture_sql_exception.&lt;locals&gt;.deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-fg ansi-bold\">    181</span> converted <span style=\"color:rgb(98,98,98)\">=</span> convert_exception(e<span style=\"color:rgb(98,98,98)\">.</span>java_exception)\n<span class=\"ansi-green-fg ansi-bold\">    182</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(converted, UnknownException):\n<span class=\"ansi-green-fg ansi-bold\">    183</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Hide where the exception came from that shows a non-Pythonic</span>\n<span class=\"ansi-green-fg ansi-bold\">    184</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># JVM exception message.</span>\n<span class=\"ansi-green-fg\">--&gt; 185</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> converted <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">    186</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">    187</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span>\n\n<span class=\"ansi-red-fg\">AnalysisException</span>: [PATH_NOT_FOUND] Path does not exist: file:/home/boucheron/Documents/IFEBY310/core/ipynb/drug-enforcement.json.</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c15bc77d .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:13:52.294898Z\",\"start_time\":\"2020-03-17T17:13:52.261550Z\"}' execution_count=31}\n``` {.python .cell-code}\ndf.printSchema()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[31], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>printSchema()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {.callout-note}\n\nIn a less user-friendly format:\n\n:::\n\n::: {#4d356474 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:13:52.355556Z\",\"start_time\":\"2020-03-17T17:13:52.297210Z\"}' execution_count=32}\n``` {.python .cell-code}\ndf.schema\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[32], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>schema\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {.callout-note}\n\nThis dataset is a little bit of a mess! \n\nThis should not be surprising. The data used to populate the Spark dataframe are not classically tabular but what people call *semi-structured*. Json is well-suited to store, represent, and exchange such data. \n\nIn the classical age of tabular data (according to Codd's principles), a table cell could only hold a scalar value (numeric, logical, text, date, timestamp, ...), nowadays Relational Database Management Systems handle Arrays, Composite Types, Range Types, ..., and Json (see [PostgreSQL](https://www.postgresql.org/docs/current/datatype-json.html)). \n\nSpark, `R`, and `Pandas`, and modern relational databases also allow us to work with complex types. \n\nModern column oriented file format like `parquet` also work with nested structures. \n\n:::\n\n- First, there is a nested `opendfa` dictionary. Each element of the dictionary is an array\n- A first good idea is to **\"flatten\" the schema of the DataFrame**, so that there are no nested types any  more.\n\n## Flattening the schema\n\nAll the columns in the *nested* structure `openfda` are put up in the schema. These columns nested in the `openfda` are as follows:\n\n::: {#579cc6b3 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:14:00.472548Z\",\"start_time\":\"2020-03-17T17:14:00.352058Z\"}' execution_count=33}\n``` {.python .cell-code}\ndf.select('openfda.*').columns\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[33], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">openfda.*</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>columns\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#539f0e6c .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:14:01.904242Z\",\"start_time\":\"2020-03-17T17:14:00.646360Z\"}' execution_count=34}\n``` {.python .cell-code}\ndf.select(\"openfda.*\").head(2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[34], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">openfda.*</span><span style=\"color:rgb(175,0,0)\">\"</span>)<span style=\"color:rgb(98,98,98)\">.</span>head(<span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#11e32b4d .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:14:02.230811Z\",\"start_time\":\"2020-03-17T17:14:01.906641Z\"}' execution_count=35}\n``` {.python .cell-code}\nfor c in df.select(\"openfda.*\").columns:\n    df = df.withColumn(\"openfda_\" + c, col(\"openfda.\" + c))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[35], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> c <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">openfda.*</span><span style=\"color:rgb(175,0,0)\">\"</span>)<span style=\"color:rgb(98,98,98)\">.</span>columns:\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     df <span style=\"color:rgb(98,98,98)\">=</span> df<span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">openfda_</span><span style=\"color:rgb(175,0,0)\">\"</span> <span style=\"color:rgb(98,98,98)\">+</span> c, col(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">openfda.</span><span style=\"color:rgb(175,0,0)\">\"</span> <span style=\"color:rgb(98,98,98)\">+</span> c))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b73e938f .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:14:07.644985Z\",\"start_time\":\"2020-03-17T17:14:07.501380Z\"}' execution_count=36}\n``` {.python .cell-code}\ndf = df.select([c for c in df.columns if c != \"openfda\"])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[36], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select([c <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> c <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> df<span style=\"color:rgb(98,98,98)\">.</span>columns <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> c <span style=\"color:rgb(98,98,98)\">!=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">openfda</span><span style=\"color:rgb(175,0,0)\">\"</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ad0d61ac .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:14:09.871658Z\",\"start_time\":\"2020-03-17T17:14:09.865537Z\"}' execution_count=37}\n``` {.python .cell-code}\ndf.printSchema()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[37], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>printSchema()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f5233ebe .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:14:19.204515Z\",\"start_time\":\"2020-03-17T17:14:18.651165Z\"}' execution_count=38}\n``` {.python .cell-code}\ndf.head(2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[38], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>head(<span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNote that the display of the `DataFrame` is not as usual... it displays the dataframe like a list of `Row`, since the columns \"openfda*\" contain arrays of varying length\n\n::: {.callout-note}\n\nA principled approach to schema flattening is embodied in the next chunk.\n\n`df.schema` allows us to perform flattening in a programmatic way. \n\n:::\n\n::: {#b3d3fa38 .cell execution_count=39}\n``` {.python .cell-code}\nfrom pyspark.sql.types import StructType\nfrom pyspark.sql.functions import col\n\ndef flatten_schema(df):\n    # Get fields and their data types\n    fields = df.schema.fields\n    \n    # Flatten array of column names\n    flat_cols = []\n    \n    for field in fields:\n        # Handle nested structures\n        if isinstance(field.dataType, StructType):\n            nested = df.select(field.name + \".*\").columns\n            flat_cols.extend([field.name + \".\" + x for x in nested])\n        else:\n            flat_cols.append(field.name)\n    \n    # Select all flattened columns\n    df_flattened = df.select([col(x).alias(x.replace(\".\",\"_\")) for x in flat_cols])\n    \n    return df_flattened\n```\n:::\n\n\n::: {.callout-note}\n\nThis function definition is from `copilot` under the following prompt:\n\n    How can I flatten the schema of a spark dataframe?\n\n:::\n\n::: {#725b111e .cell execution_count=40}\n``` {.python .cell-code}\ndf = spark.read.json(filename, multiLine=True)\n\ndf_flat = flatten_schema(df)\n\ndf_flat.printSchema()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AnalysisException</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[40], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">json</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filename</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">multiLine</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">True</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> df_flat <span style=\"color:rgb(98,98,98)\">=</span> flatten_schema(df)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> df_flat<span style=\"color:rgb(98,98,98)\">.</span>printSchema()\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/sql/readwriter.py:425</span>, in <span class=\"ansi-cyan-fg\">DataFrameReader.json</span><span class=\"ansi-blue-fg\">(self, path, schema, primitivesAsString, prefersDecimal, allowComments, allowUnquotedFieldNames, allowSingleQuotes, allowNumericLeadingZero, allowBackslashEscapingAnyCharacter, mode, columnNameOfCorruptRecord, dateFormat, timestampFormat, multiLine, allowUnquotedControlChars, lineSep, samplingRatio, dropFieldIfAllNull, encoding, locale, pathGlobFilter, recursiveFileLookup, modifiedBefore, modifiedAfter, allowNonNumericNumbers)</span>\n<span class=\"ansi-green-fg ansi-bold\">    423</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">type</span>(path) <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(0,135,0)\">list</span>:\n<span class=\"ansi-green-fg ansi-bold\">    424</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_spark<span style=\"color:rgb(98,98,98)\">.</span>_sc<span style=\"color:rgb(98,98,98)\">.</span>_jvm <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg\">--&gt; 425</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_df(<span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jreader</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">json</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_sc</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jvm</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">PythonUtils</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">toSeq</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>)\n<span class=\"ansi-green-fg ansi-bold\">    426</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(path, RDD):\n<span class=\"ansi-green-fg ansi-bold\">    428</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">func</span>(iterator: Iterable) <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">&gt;</span> Iterable:\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/py4j/java_gateway.py:1322</span>, in <span class=\"ansi-cyan-fg\">JavaMember.__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1316</span> command <span style=\"color:rgb(98,98,98)\">=</span> proto<span style=\"color:rgb(98,98,98)\">.</span>CALL_COMMAND_NAME <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1317</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>command_header <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1318</span>     args_command <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1319</span>     proto<span style=\"color:rgb(98,98,98)\">.</span>END_COMMAND_PART\n<span class=\"ansi-green-fg ansi-bold\">   1321</span> answer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>gateway_client<span style=\"color:rgb(98,98,98)\">.</span>send_command(command)\n<span class=\"ansi-green-fg\">-&gt; 1322</span> return_value <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_return_value</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">   1323</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">answer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">gateway_client</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">target_id</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">name</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1325</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> temp_arg <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> temp_args:\n<span class=\"ansi-green-fg ansi-bold\">   1326</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">hasattr</span>(temp_arg, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_detach</span><span style=\"color:rgb(175,0,0)\">\"</span>):\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/errors/exceptions/captured.py:185</span>, in <span class=\"ansi-cyan-fg\">capture_sql_exception.&lt;locals&gt;.deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-fg ansi-bold\">    181</span> converted <span style=\"color:rgb(98,98,98)\">=</span> convert_exception(e<span style=\"color:rgb(98,98,98)\">.</span>java_exception)\n<span class=\"ansi-green-fg ansi-bold\">    182</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(converted, UnknownException):\n<span class=\"ansi-green-fg ansi-bold\">    183</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Hide where the exception came from that shows a non-Pythonic</span>\n<span class=\"ansi-green-fg ansi-bold\">    184</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># JVM exception message.</span>\n<span class=\"ansi-green-fg\">--&gt; 185</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> converted <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">    186</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">    187</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span>\n\n<span class=\"ansi-red-fg\">AnalysisException</span>: [PATH_NOT_FOUND] Path does not exist: file:/home/boucheron/Documents/IFEBY310/core/ipynb/drug-enforcement.json.</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3bf2879a .cell execution_count=41}\n``` {.python .cell-code}\nfrom pyspark.sql.types import StructType, StructField, StringType, IntegerType\n\nmessy_schema = StructType([\n    StructField(\"id\", IntegerType()),\n    StructField(\"info\", StructType([\n        StructField(\"name\", StringType()),\n        StructField(\"age\", IntegerType()),\n        StructField(\"zoo\", StructType([\n            StructField(\"cat\", StringType()),\n            StructField(\"dog\", StringType())\n        ]))\n    ]))\n])\n```\n:::\n\n\n::: {.callout-note}\n\nThis principled approach is not the end of the story. If the schema exhibits hierarchical nesting, `flatten_schema()` only removes one level of nesting.\n\n:::\n\n::: {#50c86b11 .cell execution_count=42}\n``` {.python .cell-code}\ndata = [(1, (\"John\", 30, (\"Fritz\", \"Medor\"))), (2, (\"Jane\", 25, (\"Grominet\", \"Goofy\")))]\n\nvery_nested_df = spark.createDataFrame(data, messy_schema)\n```\n:::\n\n\n::: {#28b5f355 .cell execution_count=43}\n``` {.python .cell-code}\nflatten_schema(very_nested_df).show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 0:>                                                          (0 + 1) / 1]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n+---+---------+--------+-----------------+\n| id|info_name|info_age|         info_zoo|\n+---+---------+--------+-----------------+\n|  1|     John|      30|   {Fritz, Medor}|\n|  2|     Jane|      25|{Grominet, Goofy}|\n+---+---------+--------+-----------------+\n\n```\n:::\n:::\n\n\n::: {#71f3b5cc .cell execution_count=44}\n``` {.python .cell-code}\nflatten_schema(very_nested_df).printSchema()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nroot\n |-- id: integer (nullable = true)\n |-- info_name: string (nullable = true)\n |-- info_age: integer (nullable = true)\n |-- info_zoo: struct (nullable = true)\n |    |-- cat: string (nullable = true)\n |    |-- dog: string (nullable = true)\n\n```\n:::\n:::\n\n\n::: {.callout-warning}\n\ncopilot pretends that the flattening function above handles nested structure recursively. This is not the case. \n\nFix this\n\n:::\n\n\n\n## Missing data\n\nA strategy can be to remove rows with missing data. \n`dropna()` has several options, explained below.\n\n::: {#04a00c5e .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:17.413952Z\",\"start_time\":\"2020-03-17T17:41:16.898211Z\"}' execution_count=45}\n``` {.python .cell-code}\ndf.dropna().count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[45], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>dropna()<span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nIf we remove all lines with at least one missing value, we end up with an empty dataframe !\n\n::: {#221f2a41 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:17.895108Z\",\"start_time\":\"2020-03-17T17:41:17.416108Z\"}' execution_count=46}\n``` {.python .cell-code}\ndf.dropna(how='all').count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[46], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>dropna(how<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">all</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n`dropna()` accepts the following arguments\n\n- `how`: can be `'any'` or `'all'`. If `'any'`, rows containing any null values will be dropped entirely (this is the default). If `'all'`, only rows which are entirely empty will be dropped.\n\n- `thresh`: accepts an integer representing the \"threshold\" for how many empty cells a row must have before being dropped. `tresh` is a middle ground between `how='any'` and `how='all'`. As a result, the presence of `thresh` will override `how`\n\n- `subset`: accepts a list of column names. When a subset is present, N/A values will only be checked against the columns whose names are provided.\n\n::: {#acd55d65 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:17.901172Z\",\"start_time\":\"2020-03-17T17:41:17.897860Z\"}' execution_count=47}\n``` {.python .cell-code}\nn_columns = len(df.columns)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[47], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> n_columns <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">len</span>(<span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>columns)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#cd53aa88 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:18.415066Z\",\"start_time\":\"2020-03-17T17:41:17.904093Z\"}' execution_count=48}\n``` {.python .cell-code}\ndf.dropna(thresh=n_columns).count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[48], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>dropna(thresh<span style=\"color:rgb(98,98,98)\">=</span>n_columns)<span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e0af7af0 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:18.931320Z\",\"start_time\":\"2020-03-17T17:41:18.417317Z\"}' execution_count=49}\n``` {.python .cell-code}\ndf.dropna(thresh=n_columns-1).count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[49], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>dropna(thresh<span style=\"color:rgb(98,98,98)\">=</span>n_columns<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">1</span>)<span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a23f1f86 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:19.439726Z\",\"start_time\":\"2020-03-17T17:41:18.934217Z\"}' execution_count=50}\n``` {.python .cell-code}\ndf.dropna(thresh=n_columns-10).count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[50], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>dropna(thresh<span style=\"color:rgb(98,98,98)\">=</span>n_columns<span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">10</span>)<span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e4033182 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:19.752318Z\",\"start_time\":\"2020-03-17T17:41:19.441809Z\"}' execution_count=51}\n``` {.python .cell-code}\ndf = df.dropna(subset=['postal_code', 'city', 'country', 'address_1'])\ndf.count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[51], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>dropna(subset<span style=\"color:rgb(98,98,98)\">=</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">postal_code</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">city</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">country</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">address_1</span><span style=\"color:rgb(175,0,0)\">'</span>])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> df<span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nBut before this, let's count the number of missing value for each column\n\n::: {#4987cb8d .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:20.424178Z\",\"start_time\":\"2020-03-17T17:41:19.754255Z\"}' execution_count=52}\n``` {.python .cell-code}\n# For each column we create a new column containing 1 if the value is null and 0 otherwise.\n# We need to bast Boolean to Int so that we can use fn.sum after\nfor c in df.columns:\n    # Do not do this for _isnull columns (just in case you run this cell twice...)\n    if not c.endswith(\"_isnull\"):\n        df = df.withColumn(c + \"_isnull\", fn.isnull(col(c)).cast('int'))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[52], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># For each column we create a new column containing 1 if the value is null and 0 otherwise.</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># We need to bast Boolean to Int so that we can use fn.sum after</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> c <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>columns:\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Do not do this for _isnull columns (just in case you run this cell twice...)</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> c<span style=\"color:rgb(98,98,98)\">.</span>endswith(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_isnull</span><span style=\"color:rgb(175,0,0)\">\"</span>):\n<span class=\"ansi-green-fg ansi-bold\">      6</span>         df <span style=\"color:rgb(98,98,98)\">=</span> df<span style=\"color:rgb(98,98,98)\">.</span>withColumn(c <span style=\"color:rgb(98,98,98)\">+</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_isnull</span><span style=\"color:rgb(175,0,0)\">\"</span>, fn<span style=\"color:rgb(98,98,98)\">.</span>isnull(col(c))<span style=\"color:rgb(98,98,98)\">.</span>cast(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">int</span><span style=\"color:rgb(175,0,0)\">'</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#89025eef .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:20.925299Z\",\"start_time\":\"2020-03-17T17:41:20.426204Z\"}' execution_count=53}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[53], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#91281d41 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:22.053794Z\",\"start_time\":\"2020-03-17T17:41:20.927796Z\"}' execution_count=54}\n``` {.python .cell-code}\n# Get the list of _isnull columns\nisnull_columns = [c for c in df.columns if c.endswith(\"_isnull\")]\n\n# On the _isnull columns :\n#  - we compute the sum to have the number of null values and rename the column\n#  - convert to pandas for better readability\n#  - transpose the pandas dataframe for better readability\nmissing_values = df.select(isnull_columns)\\\n    .agg(*[fn.sum(c).alias(c.replace(\"_isnull\", \"\")) for c in isnull_columns])\\\n    .toPandas()\n\nmissing_values.T\\\n    .rename({0: \"missing values\"}, axis=\"columns\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[54], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Get the list of _isnull columns</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> isnull_columns <span style=\"color:rgb(98,98,98)\">=</span> [c <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> c <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>columns <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> c<span style=\"color:rgb(98,98,98)\">.</span>endswith(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_isnull</span><span style=\"color:rgb(175,0,0)\">\"</span>)]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># On the _isnull columns :</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#  - we compute the sum to have the number of null values and rename the column</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#  - convert to pandas for better readability</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#  - transpose the pandas dataframe for better readability</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> missing_values <span style=\"color:rgb(98,98,98)\">=</span> df<span style=\"color:rgb(98,98,98)\">.</span>select(isnull_columns)\\\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     <span style=\"color:rgb(98,98,98)\">.</span>agg(<span style=\"color:rgb(98,98,98)\">*</span>[fn<span style=\"color:rgb(98,98,98)\">.</span>sum(c)<span style=\"color:rgb(98,98,98)\">.</span>alias(c<span style=\"color:rgb(98,98,98)\">.</span>replace(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_isnull</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">\"</span>)) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> c <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> isnull_columns])\\\n<span class=\"ansi-green-fg ansi-bold\">     10</span>     <span style=\"color:rgb(98,98,98)\">.</span>toPandas()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nWe see that `more_code_info` is always null and that `termination_date` if often null. \nMost of the `openfda*` columns are also almost always empty.\n\nWe can keep only the columns with no missing values\n\n::: {#5bc063c4 .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:24.802336Z\",\"start_time\":\"2020-03-17T17:41:24.797411Z\"}' execution_count=55}\n``` {.python .cell-code}\n# This line can seem complicated, run pieces of each to understand\nkept_columns = list(\n    missing_values.columns[(missing_values.iloc[0] == 0).values]\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[55], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This line can seem complicated, run pieces of each to understand</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> kept_columns <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">list</span>(\n<span class=\"ansi-green-fg\">----&gt; 3</span>     <span class=\"ansi-yellow-bg\">missing_values</span><span style=\"color:rgb(98,98,98)\">.</span>columns[(missing_values<span style=\"color:rgb(98,98,98)\">.</span>iloc[<span style=\"color:rgb(98,98,98)\">0</span>] <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(98,98,98)\">0</span>)<span style=\"color:rgb(98,98,98)\">.</span>values]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'missing_values' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5bbe203f .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:27.488388Z\",\"start_time\":\"2020-03-17T17:41:27.398503Z\"}' execution_count=56}\n``` {.python .cell-code}\ndf_kept = df.select(kept_columns)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[56], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df_kept <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select(kept_columns)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3543f68c .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:27.948018Z\",\"start_time\":\"2020-03-17T17:41:27.539797Z\"}' execution_count=57}\n``` {.python .cell-code}\ndf_kept.head(2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[57], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df_kept</span><span style=\"color:rgb(98,98,98)\">.</span>head(<span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_kept' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4d2a11cf .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:41:41.419929Z\",\"start_time\":\"2020-03-17T17:41:41.413784Z\"}' execution_count=58}\n``` {.python .cell-code}\ndf_kept.printSchema()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[58], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df_kept</span><span style=\"color:rgb(98,98,98)\">.</span>printSchema()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_kept' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#fbc0eefb .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:43:23.207185Z\",\"start_time\":\"2020-03-17T17:43:22.829140Z\"}' execution_count=59}\n``` {.python .cell-code}\ndf_kept.count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[59], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df_kept</span><span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_kept' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Filtering by string values \n\nCases from South San Francisco\n\n::: {#dbc2855d .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:43:54.396689Z\",\"start_time\":\"2020-03-17T17:43:53.465012Z\"}' execution_count=60}\n``` {.python .cell-code}\ndf.filter(df.city == \"South San Francisco\")\\\n    .toPandas()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[60], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>filter(df<span style=\"color:rgb(98,98,98)\">.</span>city <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">South San Francisco</span><span style=\"color:rgb(175,0,0)\">\"</span>)\\\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"color:rgb(98,98,98)\">.</span>toPandas()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {.callout-caution}\n\nOnce again, we use `.toPandas()` to pretty format the results in the notebook. \n\nBut it's a BAD idea to do this if the spark DataFrame is large, since it requires a `collect()`\n\n:::\n\nAside from filtering strings by a perfect match, there are plenty of other powerful ways to filter by strings in `pyspark` :\n\n- `df.filter(df.city.contains('San Francisco'))`: returns rows where strings of a column contain a provided substring. In our example, filtering by rows which contain the substring \"San Francisco\" would be a good way to get all rows in San Francisco, instead of just \"South San Francisco\".\n\n- `df.filter(df.city.startswith('San'))`: Returns rows where a string starts with a provided substring.\n\n- `df.filter(df.city.endswith('ice'))`: Returns rows where a string starts with a provided substring.\n\n- `df.filter(df.city.isNull())`: Returns rows where values in a provided column are null.\n\n- `df.filter(df.city.isNotNull())`: Opposite of the above.\n\n- `df.filter(df.city.like('San%'))`: Performs a SQL-like query containing the LIKE clause.\n\n- `df.filter(df.city.rlike('[A-Z]*ice$'))`: Performs a regexp filter.\n\n- `df.filter(df.city.isin('San Francisco', 'Los Angeles'))`: Looks for rows where the string value of a column matches any of the provided strings exactly.\n\nYou can try some of these to understand\n\n::: {#a565aa6c .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:48:19.328007Z\",\"start_time\":\"2020-03-17T17:48:18.572570Z\"}' execution_count=61}\n``` {.python .cell-code}\ndf.filter(df.city.contains('San Francisco'))\\\n    .toPandas()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[61], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>filter(df<span style=\"color:rgb(98,98,98)\">.</span>city<span style=\"color:rgb(98,98,98)\">.</span>contains(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">San Francisco</span><span style=\"color:rgb(175,0,0)\">'</span>))\\\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"color:rgb(98,98,98)\">.</span>toPandas()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#26c0e31b .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:48:10.490019Z\",\"start_time\":\"2020-03-17T17:48:09.784496Z\"}' execution_count=62}\n``` {.python .cell-code}\n(\n    df.filter(df.city.isin('San Francisco', 'Los Angeles'))\n      .toPandas()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[62], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>filter(df<span style=\"color:rgb(98,98,98)\">.</span>city<span style=\"color:rgb(98,98,98)\">.</span>isin(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">San Francisco</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Los Angeles</span><span style=\"color:rgb(175,0,0)\">'</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span>       <span style=\"color:rgb(98,98,98)\">.</span>toPandas()\n<span class=\"ansi-green-fg ansi-bold\">      4</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Filtering by Date Values\n\nIn addition to filtering by strings, we can also filter by columns where the values are stored as dates or datetimes (or strings that can be inferred as dates). Perhaps the most useful way to filter dates is by using the `between()` method, which allows us to find results within a certain date range. Here we find all the results which were reported in the years 2013 and 2014:\n\n::: {#4d790cae .cell ExecuteTime='{\"end_time\":\"2020-03-17T17:50:34.344304Z\",\"start_time\":\"2020-03-17T17:50:33.638867Z\"}' execution_count=63}\n``` {.python .cell-code}\n( \n    df\n        .filter(df.city == \"South San Francisco\")\n        .filter(df.report_date.between('2013-01-01 00:00:00','2015-03-11 00:00:00'))\n        .toPandas()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[63], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> ( \n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">df</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(98,98,98)\">.</span>filter(df<span style=\"color:rgb(98,98,98)\">.</span>city <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">South San Francisco</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         <span style=\"color:rgb(98,98,98)\">.</span>filter(df<span style=\"color:rgb(98,98,98)\">.</span>report_date<span style=\"color:rgb(98,98,98)\">.</span>between(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">2013-01-01 00:00:00</span><span style=\"color:rgb(175,0,0)\">'</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">2015-03-11 00:00:00</span><span style=\"color:rgb(175,0,0)\">'</span>))\n<span class=\"ansi-green-fg ansi-bold\">      5</span>         <span style=\"color:rgb(98,98,98)\">.</span>toPandas()\n<span class=\"ansi-green-fg ansi-bold\">      6</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {.callout-caution}\n\nIs Spark smart enough to understand that the string in column `report_date` contains a date?\n\n:::\n\n::: {#3e4ec3ba .cell execution_count=64}\n``` {.python .cell-code}\ndf.filter(df.city == \"South San Francisco\")\\\n    .filter(df.center_classification_date.between('2013-01-01 00:00:00','2013-12-31 00:00:00'))\\\n    .toPandas()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[64], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>filter(df<span style=\"color:rgb(98,98,98)\">.</span>city <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">South San Francisco</span><span style=\"color:rgb(175,0,0)\">\"</span>)\\\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"color:rgb(98,98,98)\">.</span>filter(df<span style=\"color:rgb(98,98,98)\">.</span>center_classification_date<span style=\"color:rgb(98,98,98)\">.</span>between(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">2013-01-01 00:00:00</span><span style=\"color:rgb(175,0,0)\">'</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">2013-12-31 00:00:00</span><span style=\"color:rgb(175,0,0)\">'</span>))\\\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>toPandas()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c991c57f .cell execution_count=65}\n``` {.python .cell-code}\ndf_dates = df.select([c for c in df.columns if c.endswith(\"date\")])\n\ndf_dates.printSchema()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[65], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df_dates <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select([c <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> c <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> df<span style=\"color:rgb(98,98,98)\">.</span>columns <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> c<span style=\"color:rgb(98,98,98)\">.</span>endswith(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">date</span><span style=\"color:rgb(175,0,0)\">\"</span>)])\n<span class=\"ansi-green-fg ansi-bold\">      3</span> df_dates<span style=\"color:rgb(98,98,98)\">.</span>printSchema()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#858cfd0b .cell execution_count=66}\n``` {.python .cell-code}\ndf_dates.show(5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[66], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df_dates</span><span style=\"color:rgb(98,98,98)\">.</span>show(<span style=\"color:rgb(98,98,98)\">5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_dates' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nColumns are not dates  (`DateType`) but strings (`StringType`). When comparing `report_date` \nwith `'2013-01-01 00:00:00'` and `'2015-03-11 00:00:00'`, we are comparing strings and are lucky enough that in unicode `'-' < '0' < '...' < '9'` so that `2013-....` is less that any string starting with `20130...`, while any string starting with `2013...` is less than any string starting with `2015..`. \n\n::: {.callout-caution}\n\nIf some field in a Json string is meant to represent a date or a datetime object, spark should be given a hint. \n\nJson loaders (from `Python`) as well as the Spark Json reader have optional arguments that can be used to indicate the date parser to be used. \n\n:::\n\n\n::: {.callout-note}\n\nWe have to tell the json loader about two things: \n\n1. which columns should be read as dates\n2. which format should be used for those columns\n\nThe first point can be settled using the `schema` argument of `.json()` method (see [Documentation](https://spark.apache.org/docs/3.5.3/api/python/reference/pyspark.sql/api/pyspark.sql.DataFrameReader.json.html))\n\n:::\n\n::: {#05cea79b .cell execution_count=67}\n``` {.python .cell-code}\nze_schema = df.schema \n\nlist_fields = []\n\nfor f in ze_schema.fields:\n  if f.name.endswith('date'):\n    list_fields.append(StructField(f.name, DateType(), True))\n  else:\n    list_fields.append(f)\n\nze_schema = StructType(list_fields)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[67], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> ze_schema <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>schema \n<span class=\"ansi-green-fg ansi-bold\">      3</span> list_fields <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> f <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> ze_schema<span style=\"color:rgb(98,98,98)\">.</span>fields:\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a198a45b .cell execution_count=68}\n``` {.python .cell-code}\n# Alternative syntax using a dictionary of options\noptions = {\n    \"dateFormat\": \"yyyyMMdd\",\n    \"multiLine\": \"true\"\n}\n\ndf = (\n    spark.read\n        .options(**options)\n        .json(filename, ze_schema)\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[68], line 10</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Alternative syntax using a dictionary of options</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> options <span style=\"color:rgb(98,98,98)\">=</span> {\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">dateFormat</span><span style=\"color:rgb(175,0,0)\">\"</span>: <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">yyyyMMdd</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">multiLine</span><span style=\"color:rgb(175,0,0)\">\"</span>: <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">true</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> }\n<span class=\"ansi-green-fg ansi-bold\">      7</span> df <span style=\"color:rgb(98,98,98)\">=</span> (\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     spark<span style=\"color:rgb(98,98,98)\">.</span>read\n<span class=\"ansi-green-fg ansi-bold\">      9</span>         <span style=\"color:rgb(98,98,98)\">.</span>options(<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span>options)\n<span class=\"ansi-green-fg\">---&gt; 10</span>         <span style=\"color:rgb(98,98,98)\">.</span>json(filename, <span class=\"ansi-yellow-bg\">ze_schema</span>)\n<span class=\"ansi-green-fg ansi-bold\">     11</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ze_schema' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#85d939ce .cell execution_count=69}\n``` {.python .cell-code}\ndf.select([c for c in df.columns if c.endswith(\"date\")]).printSchema()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[69], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select([c <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> c <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> df<span style=\"color:rgb(98,98,98)\">.</span>columns <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> c<span style=\"color:rgb(98,98,98)\">.</span>endswith(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">date</span><span style=\"color:rgb(175,0,0)\">\"</span>)])<span style=\"color:rgb(98,98,98)\">.</span>printSchema()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2343f1f1 .cell execution_count=70}\n``` {.python .cell-code}\n(\ndf.filter(df.city == \"South San Francisco\")\n  .filter(df.center_classification_date.between('2013-01-01 00:00:00','2013-12-31 00:00:00'))\n  .toPandas()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[70], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>filter(df<span style=\"color:rgb(98,98,98)\">.</span>city <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">South San Francisco</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>   <span style=\"color:rgb(98,98,98)\">.</span>filter(df<span style=\"color:rgb(98,98,98)\">.</span>center_classification_date<span style=\"color:rgb(98,98,98)\">.</span>between(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">2013-01-01 00:00:00</span><span style=\"color:rgb(175,0,0)\">'</span>,<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">2013-12-31 00:00:00</span><span style=\"color:rgb(175,0,0)\">'</span>))\n<span class=\"ansi-green-fg ansi-bold\">      4</span>   <span style=\"color:rgb(98,98,98)\">.</span>toPandas()\n<span class=\"ansi-green-fg ansi-bold\">      5</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Handling complex types \n\nBridging the gap between tabular and semi-structured data. \n\n::: {.callout-note}\n\nSQL, `R`, `Pandas` ... \n\n:::\n\n`struct`, `array`, `map`\n\n::: {#82296164 .cell execution_count=71}\n``` {.python .cell-code}\n# struct\n```\n:::\n\n\nThe problems we faced after loading data from the json file pertained to the fact that column `fda` was of complex `StrucType()` type. We shall revisit this dataframe. \n\n::: {#e22c79c1 .cell execution_count=72}\n``` {.python .cell-code}\ndf = spark.read.json(filename, multiLine=True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AnalysisException</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[72], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">json</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filename</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">multiLine</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">True</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/sql/readwriter.py:425</span>, in <span class=\"ansi-cyan-fg\">DataFrameReader.json</span><span class=\"ansi-blue-fg\">(self, path, schema, primitivesAsString, prefersDecimal, allowComments, allowUnquotedFieldNames, allowSingleQuotes, allowNumericLeadingZero, allowBackslashEscapingAnyCharacter, mode, columnNameOfCorruptRecord, dateFormat, timestampFormat, multiLine, allowUnquotedControlChars, lineSep, samplingRatio, dropFieldIfAllNull, encoding, locale, pathGlobFilter, recursiveFileLookup, modifiedBefore, modifiedAfter, allowNonNumericNumbers)</span>\n<span class=\"ansi-green-fg ansi-bold\">    423</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">type</span>(path) <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(0,135,0)\">list</span>:\n<span class=\"ansi-green-fg ansi-bold\">    424</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_spark<span style=\"color:rgb(98,98,98)\">.</span>_sc<span style=\"color:rgb(98,98,98)\">.</span>_jvm <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg\">--&gt; 425</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_df(<span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jreader</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">json</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_sc</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jvm</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">PythonUtils</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">toSeq</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>)\n<span class=\"ansi-green-fg ansi-bold\">    426</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(path, RDD):\n<span class=\"ansi-green-fg ansi-bold\">    428</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">func</span>(iterator: Iterable) <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">&gt;</span> Iterable:\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/py4j/java_gateway.py:1322</span>, in <span class=\"ansi-cyan-fg\">JavaMember.__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1316</span> command <span style=\"color:rgb(98,98,98)\">=</span> proto<span style=\"color:rgb(98,98,98)\">.</span>CALL_COMMAND_NAME <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1317</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>command_header <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1318</span>     args_command <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1319</span>     proto<span style=\"color:rgb(98,98,98)\">.</span>END_COMMAND_PART\n<span class=\"ansi-green-fg ansi-bold\">   1321</span> answer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>gateway_client<span style=\"color:rgb(98,98,98)\">.</span>send_command(command)\n<span class=\"ansi-green-fg\">-&gt; 1322</span> return_value <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_return_value</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">   1323</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">answer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">gateway_client</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">target_id</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">name</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1325</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> temp_arg <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> temp_args:\n<span class=\"ansi-green-fg ansi-bold\">   1326</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">hasattr</span>(temp_arg, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_detach</span><span style=\"color:rgb(175,0,0)\">\"</span>):\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/errors/exceptions/captured.py:185</span>, in <span class=\"ansi-cyan-fg\">capture_sql_exception.&lt;locals&gt;.deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-fg ansi-bold\">    181</span> converted <span style=\"color:rgb(98,98,98)\">=</span> convert_exception(e<span style=\"color:rgb(98,98,98)\">.</span>java_exception)\n<span class=\"ansi-green-fg ansi-bold\">    182</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(converted, UnknownException):\n<span class=\"ansi-green-fg ansi-bold\">    183</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Hide where the exception came from that shows a non-Pythonic</span>\n<span class=\"ansi-green-fg ansi-bold\">    184</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># JVM exception message.</span>\n<span class=\"ansi-green-fg\">--&gt; 185</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> converted <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">    186</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">    187</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span>\n\n<span class=\"ansi-red-fg\">AnalysisException</span>: [PATH_NOT_FOUND] Path does not exist: file:/home/boucheron/Documents/IFEBY310/core/ipynb/drug-enforcement.json.</pre>\n```\n:::\n\n:::\n:::\n\n\nThe dataframe schema `df.schema` which is of type `StructType` (defined in `pyspark.sql.types`) can be converted to a json string which in turn can be converted into a Python dictionary. \n\n::: {#3fbe397e .cell execution_count=73}\n``` {.python .cell-code}\ndf = spark.read.json(filename, multiLine=True)\n\nsj = json.loads(df.schema.json())\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AnalysisException</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[73], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">json</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filename</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">multiLine</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">True</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> sj <span style=\"color:rgb(98,98,98)\">=</span> json<span style=\"color:rgb(98,98,98)\">.</span>loads(df<span style=\"color:rgb(98,98,98)\">.</span>schema<span style=\"color:rgb(98,98,98)\">.</span>json())\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/sql/readwriter.py:425</span>, in <span class=\"ansi-cyan-fg\">DataFrameReader.json</span><span class=\"ansi-blue-fg\">(self, path, schema, primitivesAsString, prefersDecimal, allowComments, allowUnquotedFieldNames, allowSingleQuotes, allowNumericLeadingZero, allowBackslashEscapingAnyCharacter, mode, columnNameOfCorruptRecord, dateFormat, timestampFormat, multiLine, allowUnquotedControlChars, lineSep, samplingRatio, dropFieldIfAllNull, encoding, locale, pathGlobFilter, recursiveFileLookup, modifiedBefore, modifiedAfter, allowNonNumericNumbers)</span>\n<span class=\"ansi-green-fg ansi-bold\">    423</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">type</span>(path) <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(0,135,0)\">list</span>:\n<span class=\"ansi-green-fg ansi-bold\">    424</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">assert</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_spark<span style=\"color:rgb(98,98,98)\">.</span>_sc<span style=\"color:rgb(98,98,98)\">.</span>_jvm <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg\">--&gt; 425</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_df(<span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jreader</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">json</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_sc</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jvm</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">PythonUtils</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">toSeq</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>)\n<span class=\"ansi-green-fg ansi-bold\">    426</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(path, RDD):\n<span class=\"ansi-green-fg ansi-bold\">    428</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">func</span>(iterator: Iterable) <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">&gt;</span> Iterable:\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/py4j/java_gateway.py:1322</span>, in <span class=\"ansi-cyan-fg\">JavaMember.__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1316</span> command <span style=\"color:rgb(98,98,98)\">=</span> proto<span style=\"color:rgb(98,98,98)\">.</span>CALL_COMMAND_NAME <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1317</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>command_header <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1318</span>     args_command <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1319</span>     proto<span style=\"color:rgb(98,98,98)\">.</span>END_COMMAND_PART\n<span class=\"ansi-green-fg ansi-bold\">   1321</span> answer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>gateway_client<span style=\"color:rgb(98,98,98)\">.</span>send_command(command)\n<span class=\"ansi-green-fg\">-&gt; 1322</span> return_value <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_return_value</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">   1323</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">answer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">gateway_client</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">target_id</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">name</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1325</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> temp_arg <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> temp_args:\n<span class=\"ansi-green-fg ansi-bold\">   1326</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">hasattr</span>(temp_arg, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_detach</span><span style=\"color:rgb(175,0,0)\">\"</span>):\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/errors/exceptions/captured.py:185</span>, in <span class=\"ansi-cyan-fg\">capture_sql_exception.&lt;locals&gt;.deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-fg ansi-bold\">    181</span> converted <span style=\"color:rgb(98,98,98)\">=</span> convert_exception(e<span style=\"color:rgb(98,98,98)\">.</span>java_exception)\n<span class=\"ansi-green-fg ansi-bold\">    182</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(converted, UnknownException):\n<span class=\"ansi-green-fg ansi-bold\">    183</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Hide where the exception came from that shows a non-Pythonic</span>\n<span class=\"ansi-green-fg ansi-bold\">    184</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># JVM exception message.</span>\n<span class=\"ansi-green-fg\">--&gt; 185</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> converted <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">    186</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">    187</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span>\n\n<span class=\"ansi-red-fg\">AnalysisException</span>: [PATH_NOT_FOUND] Path does not exist: file:/home/boucheron/Documents/IFEBY310/core/ipynb/drug-enforcement.json.</pre>\n```\n:::\n\n:::\n:::\n\n\nWe equip the dataframe with a primary key \n\n::: {#aaa0b94b .cell execution_count=74}\n``` {.python .cell-code}\nfrom pyspark.sql import Window\n\nw = Window.orderBy(col(\"center_classification_date\"))\n\ndf = (\n  df\n    .withColumn(\"row_id\", fn.row_number().over(w))\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[74], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">sql</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Window\n<span class=\"ansi-green-fg ansi-bold\">      3</span> w <span style=\"color:rgb(98,98,98)\">=</span> Window<span style=\"color:rgb(98,98,98)\">.</span>orderBy(col(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">center_classification_date</span><span style=\"color:rgb(175,0,0)\">\"</span>))\n<span class=\"ansi-green-fg ansi-bold\">      5</span> df <span style=\"color:rgb(98,98,98)\">=</span> (\n<span class=\"ansi-green-fg\">----&gt; 6</span>   <span class=\"ansi-yellow-bg\">df</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     <span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">row_id</span><span style=\"color:rgb(175,0,0)\">\"</span>, fn<span style=\"color:rgb(98,98,98)\">.</span>row_number()<span style=\"color:rgb(98,98,98)\">.</span>over(w))\n<span class=\"ansi-green-fg ansi-bold\">      8</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d0eb1c9b .cell execution_count=75}\n``` {.python .cell-code}\n[(f['name'], f['type'])  \n    for f in sj['fields'] if not isinstance(f['type'], str)]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[75], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> [(f[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">name</span><span style=\"color:rgb(175,0,0)\">'</span>], f[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">type</span><span style=\"color:rgb(175,0,0)\">'</span>])  \n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> f <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">sj</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">fields</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(f[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">type</span><span style=\"color:rgb(175,0,0)\">'</span>], <span style=\"color:rgb(0,135,0)\">str</span>)]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sj' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nColumn `openfda` has type `StrucType()` with fields with composite type.\n\n::: {#f2ef64b0 .cell execution_count=76}\n``` {.python .cell-code}\n{f.dataType  for f in df.schema.fields if not f.dataType==StringType()}\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[76], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> {f<span style=\"color:rgb(98,98,98)\">.</span>dataType  <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> f <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>schema<span style=\"color:rgb(98,98,98)\">.</span>fields <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> f<span style=\"color:rgb(98,98,98)\">.</span>dataType<span style=\"color:rgb(98,98,98)\">==</span>StringType()}\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c1ca041d .cell execution_count=77}\n``` {.python .cell-code}\n{f['type']['type']\n    for f in sj['fields'] if not isinstance(f['type'], str)}\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[77], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> {f[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">type</span><span style=\"color:rgb(175,0,0)\">'</span>][<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">type</span><span style=\"color:rgb(175,0,0)\">'</span>]\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> f <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">sj</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">fields</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(f[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">type</span><span style=\"color:rgb(175,0,0)\">'</span>], <span style=\"color:rgb(0,135,0)\">str</span>)}\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sj' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nProjecting on `row_id`  and `openfda.*` leads to a (partially) flattened datafame, that, thanks to the `row_id` column can be joined with the original dataframe. \n\n::: {#85da1bb9 .cell execution_count=78}\n``` {.python .cell-code}\ndf_proj = df.select('row_id', 'openfda.*')\n\ndf_proj.printSchema()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[78], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df_proj <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">row_id</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">openfda.*</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> df_proj<span style=\"color:rgb(98,98,98)\">.</span>printSchema()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nWe can inspect the length of the arrays. \n\n::: {#fe1aae10 .cell execution_count=79}\n``` {.python .cell-code}\n# array\ndf_proj.select(\n    fn.max(fn.size(col(\"application_number\"))).alias(\"Max\"), \n    fn.min(fn.size(col(\"application_number\"))).alias(\"min\"), \n    fn.avg(fn.size(col(\"application_number\"))).alias(\"Mean\")).show(1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[79], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># array</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">df_proj</span><span style=\"color:rgb(98,98,98)\">.</span>select(\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     fn<span style=\"color:rgb(98,98,98)\">.</span>max(fn<span style=\"color:rgb(98,98,98)\">.</span>size(col(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">application_number</span><span style=\"color:rgb(175,0,0)\">\"</span>)))<span style=\"color:rgb(98,98,98)\">.</span>alias(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Max</span><span style=\"color:rgb(175,0,0)\">\"</span>), \n<span class=\"ansi-green-fg ansi-bold\">      4</span>     fn<span style=\"color:rgb(98,98,98)\">.</span>min(fn<span style=\"color:rgb(98,98,98)\">.</span>size(col(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">application_number</span><span style=\"color:rgb(175,0,0)\">\"</span>)))<span style=\"color:rgb(98,98,98)\">.</span>alias(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">min</span><span style=\"color:rgb(175,0,0)\">\"</span>), \n<span class=\"ansi-green-fg ansi-bold\">      5</span>     fn<span style=\"color:rgb(98,98,98)\">.</span>avg(fn<span style=\"color:rgb(98,98,98)\">.</span>size(col(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">application_number</span><span style=\"color:rgb(175,0,0)\">\"</span>)))<span style=\"color:rgb(98,98,98)\">.</span>alias(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Mean</span><span style=\"color:rgb(175,0,0)\">\"</span>))<span style=\"color:rgb(98,98,98)\">.</span>show(<span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_proj' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nIn some rows, the *size* of the array is `-1` because the field is `NULL`.\n\n::: {#5138424c .cell execution_count=80}\n``` {.python .cell-code}\n(\n  df_proj\n    .where(fn.size(col(\"application_number\"))>1)\n    .select(\"row_id\")\n    .show(5)\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[80], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>   <span class=\"ansi-yellow-bg\">df_proj</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>where(fn<span style=\"color:rgb(98,98,98)\">.</span>size(col(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">application_number</span><span style=\"color:rgb(175,0,0)\">\"</span>))<span style=\"color:rgb(98,98,98)\">&gt;</span><span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">row_id</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(98,98,98)\">.</span>show(<span style=\"color:rgb(98,98,98)\">5</span>)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_proj' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nAn `array` column can be *exploded*. This is like pivoting into long form. The result contains one row per item in the array. \n\n::: {#56602ddf .cell execution_count=81}\n``` {.python .cell-code}\n(\n  df_proj\n    .select('row_id', 'application_number')\n    .withColumn(\"exploded\", \n                fn.explode(col(\"application_number\")))\n    .select('row_id', 'exploded')\n    .groupBy('row_id')\n    .agg(fn.count('exploded').alias(\"n_lignes\"))\n    .where(\"n_lignes > 1\")\n    .show(5)\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[81], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>   <span class=\"ansi-yellow-bg\">df_proj</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">row_id</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">application_number</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">exploded</span><span style=\"color:rgb(175,0,0)\">\"</span>, \n<span class=\"ansi-green-fg ansi-bold\">      5</span>                 fn<span style=\"color:rgb(98,98,98)\">.</span>explode(col(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">application_number</span><span style=\"color:rgb(175,0,0)\">\"</span>)))\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">row_id</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">exploded</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     <span style=\"color:rgb(98,98,98)\">.</span>groupBy(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">row_id</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     <span style=\"color:rgb(98,98,98)\">.</span>agg(fn<span style=\"color:rgb(98,98,98)\">.</span>count(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">exploded</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>alias(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">n_lignes</span><span style=\"color:rgb(175,0,0)\">\"</span>))\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     <span style=\"color:rgb(98,98,98)\">.</span>where(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">n_lignes &gt; 1</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">     10</span>     <span style=\"color:rgb(98,98,98)\">.</span>show(<span style=\"color:rgb(98,98,98)\">5</span>)\n<span class=\"ansi-green-fg ansi-bold\">     11</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_proj' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /usr/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.3\n---\n",
    "supporting": [
      "notebook07_json-format_files"
    ],
    "filters": []
  }
}