{
  "hash": "c30da50563487ecd6b02c8c3b1e827e6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Introduction to `numpy`\njupyter: python3\n\nengine: jupyter\n---\n\n\n\n[`NumPy`](https://numpy.org) is the fundamental package for scientific computing with Python. It contains among other things:\n\n- a powerful [N-dimensional array object](https://numpy.org/doc/stable/user/basics.indexing.html)\n- (sophisticated) [broadcasting functions](https://numpy.org/doc/stable/user/basics.broadcasting.html)\n- tools for integrating C/C++ and Fortran code\n- useful [linear algebra](https://numpy.org/doc/stable/reference/routines.linalg.html), [Fourier transform](https://numpy.org/doc/stable/user/basics.indexing.html), and [random generation capabilities](https://numpy.org/doc/stable/reference/random/index.html)\n\nBesides its obvious scientific uses, `NumPy` can also be used as an efficient multi-dimensional container for general data. Arbitrary data-types can be defined. This allows `NumPy` to seamlessly and speedily integrate with a wide variety of databases.\n\nLibrary documentation: <a>http://numpy.org/</a>\n\n\n## The base `numpy.array` object\n\n::: {#setup .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:03:56.772810Z\",\"start_time\":\"2022-01-19T10:03:56.767960Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\n# declare a vector using a list as the argument\nv = np.array([1, 2.0, 3, 4])\nv\n```\n:::\n\n\n::: {#1f0a0422 .cell execution_count=2}\n``` {.python .cell-code}\nlist([1, 2.0, 3, 4])\n```\n:::\n\n\n::: {#11c40f73 .cell execution_count=3}\n``` {.python .cell-code}\ntype(v)\n```\n:::\n\n\n::: {#836c8382 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:14.635335Z\",\"start_time\":\"2022-01-19T10:04:14.631049Z\"}' execution_count=4}\n``` {.python .cell-code}\nv.shape\n```\n:::\n\n\n::: {#deacf52b .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:21.792284Z\",\"start_time\":\"2022-01-19T10:04:21.788055Z\"}' execution_count=5}\n``` {.python .cell-code}\nv.ndim\n```\n:::\n\n\n::: {#bffff51f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:25.288962Z\",\"start_time\":\"2022-01-19T10:04:25.284105Z\"}' execution_count=6}\n``` {.python .cell-code}\nv.dtype is float\n```\n:::\n\n\n::: {#8f3a8924 .cell execution_count=7}\n``` {.python .cell-code}\nv.dtype \n```\n:::\n\n\n::: {#7914cb3f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:40.960057Z\",\"start_time\":\"2022-01-19T10:04:40.955004Z\"}' execution_count=8}\n``` {.python .cell-code}\nnp.uint8 is int\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"} \n\nUse copilot *explain* to understand the chunks:\n\n>  The np.uint8 is a data type in NumPy, representing an unsigned 8-bit integer, which can store values from 0 to 255. The int type is the built-in integer type in Python, which can represent any integer value without a fixed size limit.\n\n:::\n\n::: {#f2826cab .cell execution_count=9}\n``` {.python .cell-code}\nnp.array([2**120, 2**40], dtype=np.int64)\n```\n:::\n\n\n::: {#d902fd13 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:43.844304Z\",\"start_time\":\"2022-01-19T10:04:43.838964Z\"}' execution_count=10}\n``` {.python .cell-code}\nnp.uint16 is int \n```\n:::\n\n\n::: {#c24ee6ad .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:45.206350Z\",\"start_time\":\"2022-01-19T10:04:45.201261Z\"}' execution_count=11}\n``` {.python .cell-code}\nnp.uint32  is int\n```\n:::\n\n\n::: {#9be7024c .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:48.250324Z\",\"start_time\":\"2022-01-19T10:04:48.244917Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=12}\n``` {.python .cell-code}\nw = np.array([1.3, 2, 3, 4], dtype=np.int64)\nw\n```\n:::\n\n\n::: {#9f4de9b6 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:05:00.151747Z\",\"start_time\":\"2022-01-19T10:05:00.146141Z\"}' execution_count=13}\n``` {.python .cell-code}\nw.dtype\n```\n:::\n\n\n::: {#4d1e7e08 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:25.417588Z\",\"start_time\":\"2022-01-19T10:08:25.414352Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=14}\n``` {.python .cell-code}\na = np.arange(100)\n```\n:::\n\n\n::: {#a4c6c10a .cell execution_count=15}\n``` {.python .cell-code}\ntype(a)\n```\n:::\n\n\n::: {#efbe7350 .cell execution_count=16}\n``` {.python .cell-code}\nnp.array(range(100))\n```\n:::\n\n\n::: {#4d12a6de .cell execution_count=17}\n``` {.python .cell-code}\na\n```\n:::\n\n\n::: {#11800df1 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:30.650242Z\",\"start_time\":\"2022-01-19T10:08:30.645228Z\"}' execution_count=18}\n``` {.python .cell-code}\na.dtype\n```\n:::\n\n\n::: {#225a1a3f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:34.906164Z\",\"start_time\":\"2022-01-19T10:08:34.899997Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=19}\n``` {.python .cell-code}\n-3 * a ** 2\n```\n:::\n\n\n::: {#0a2f7200 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:37.560386Z\",\"start_time\":\"2022-01-19T10:08:37.557072Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=20}\n``` {.python .cell-code}\na[42] = 13\n```\n:::\n\n\n::: {#0edddf57 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:38.581351Z\",\"start_time\":\"2022-01-19T10:08:38.578031Z\"}' execution_count=21}\n``` {.python .cell-code}\na[42] = 1025\n```\n:::\n\n\n::: {#9715dfe9 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:09:34.115461Z\",\"start_time\":\"2022-01-19T10:09:34.109542Z\"}' execution_count=22}\n``` {.python .cell-code}\nnp.info(np.int16)\n```\n:::\n\n\n::: {#ce284652 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:09:20.037776Z\",\"start_time\":\"2022-01-19T10:09:20.031216Z\"}' execution_count=23}\n``` {.python .cell-code}\nnp.int16\n```\n:::\n\n\n::: {#cb7b79ea .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:39.686116Z\",\"start_time\":\"2022-01-19T10:08:39.678619Z\"}' execution_count=24}\n``` {.python .cell-code}\ndict(enumerate(a))\n```\n:::\n\n\n::: {#6e0c62c6 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:09:47.067438Z\",\"start_time\":\"2022-01-19T10:09:47.061548Z\"}' execution_count=25}\n``` {.python .cell-code}\na + 1\n```\n:::\n\n\n::: {#29f20fa3 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:02.092179Z\",\"start_time\":\"2022-01-19T10:10:02.086622Z\"}' execution_count=26}\n``` {.python .cell-code}\nb = a + 1\nb\n```\n:::\n\n\n::: {#0d5a62db .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:12.761835Z\",\"start_time\":\"2022-01-19T10:10:12.756736Z\"}' execution_count=27}\n``` {.python .cell-code}\na is b\n```\n:::\n\n\n::: {#f1e1b097 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:22.189001Z\",\"start_time\":\"2022-01-19T10:10:22.185209Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=28}\n``` {.python .cell-code}\nf = id(a)\na += 1\nf, id(a)\n```\n:::\n\n\n::: {#29cabe19 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:23.392681Z\",\"start_time\":\"2022-01-19T10:10:23.387466Z\"}' execution_count=29}\n``` {.python .cell-code}\na\n```\n:::\n\n\n::: {#f5330e87 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:27.087595Z\",\"start_time\":\"2022-01-19T10:10:27.081763Z\"}' execution_count=30}\n``` {.python .cell-code}\nb\n```\n:::\n\n\n::: {.callout-warning}\n\nBeware of the dimensions: a 1D array is not the same as a 2D array with 1 column\n\n::: \n\n::: {#0428dba0 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:30.211477Z\",\"start_time\":\"2022-01-19T10:10:30.204724Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=31}\n``` {.python .cell-code}\na1 = np.array([1, 2, 3])\nprint(a1, a1.shape, a1.ndim)\n```\n:::\n\n\n::: {#d1f5bbed .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:11:39.470253Z\",\"start_time\":\"2022-01-19T10:11:39.465331Z\"}' execution_count=32}\n``` {.python .cell-code}\na2 = np.array([1, 2, 3])\nprint(a2, a2.shape, a2.ndim)\n```\n:::\n\n\n[More on NumPy quickstart](https://numpy.org/devdocs/user/quickstart.html)\n\n::: {.callout-note}\n\nList the attributes and methods of class `numpy.ndarray`. \nYou may use function `dir()` and filter the result using \nmethods for objects of class `string`. \n\n:::\n\n## Matrix multiplication\n\n::: {#71010461 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:11:41.023400Z\",\"start_time\":\"2022-01-19T10:11:41.018032Z\"}' execution_count=33}\n``` {.python .cell-code}\na2.dot(a1) # inner product \n```\n:::\n\n\n::: {#d2925569 .cell execution_count=34}\n``` {.python .cell-code}\n( \n    np.array([a2])\n        .transpose() # column vector\n        .dot(np.array([a1]))\n) # column vector multiplied by row vector\n```\n:::\n\n\n::: {#4422bd01 .cell execution_count=35}\n``` {.python .cell-code}\n(\n    np.array([a2])\n    .transpose()#.shape\n)\n```\n:::\n\n\n::: {#95674cae .cell execution_count=36}\n``` {.python .cell-code}\n(\n    a2.reshape(3,1)  # all explicit\n      .dot(a1.reshape(1, 3))\n)\n```\n:::\n\n\n::: {#0236eb4b .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:11:55.636179Z\",\"start_time\":\"2022-01-19T10:11:55.630699Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=37}\n``` {.python .cell-code}\n# Declare a 2D array using a nested list as the constructor argument\nM = np.array([[1,2], \n              [3,4], \n              [3.14, -9.17]])\nM\n```\n:::\n\n\n::: {#988e62b2 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:11:55.792686Z\",\"start_time\":\"2022-01-19T10:11:55.787196Z\"}' execution_count=38}\n``` {.python .cell-code}\nM.shape, M.size\n```\n:::\n\n\n::: {#1c56469a .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:12:05.624781Z\",\"start_time\":\"2022-01-19T10:12:05.619551Z\"}' execution_count=39}\n``` {.python .cell-code}\nM.ravel(), M.ndim, M.ravel().shape\n```\n:::\n\n\n::: {#72422458 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:12:32.331344Z\",\"start_time\":\"2022-01-19T10:12:32.325181Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=40}\n``` {.python .cell-code}\n# arguments: start, stop, step\nx = (\n     np.arange(12)\n       .reshape(4, 3)\n)\nx\n```\n:::\n\n\n::: {#6cda1499 .cell execution_count=41}\n``` {.python .cell-code}\ny = np.arange(3).reshape(3,1)\n\ny\n```\n:::\n\n\n::: {#1d3e6536 .cell execution_count=42}\n``` {.python .cell-code}\nx @ y, x.dot(y)\n```\n:::\n\n\n::: {.callout-note}\n\n\n:::\n\n## Generating arrays\n\n::: {#cbbdca89 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:12:34.268059Z\",\"start_time\":\"2022-01-19T10:12:34.260897Z\"}' execution_count=43}\n``` {.python .cell-code}\nnp.linspace(0, 10, 51)  # meaning of the 3 positional parameters ? \n```\n:::\n\n\n::: {#fb89640d .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:13:05.893229Z\",\"start_time\":\"2022-01-19T10:13:05.887241Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=44}\n``` {.python .cell-code}\nnp.logspace(0, 10, 11, base=np.e), np.e**(np.arange(11))\n```\n:::\n\n\n::: {#d2a3c3b7 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:14:43.385320Z\",\"start_time\":\"2022-01-19T10:14:43.273674Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=45}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Random standard Gaussian numbers\nfig = plt.figure(figsize=(8, 4))\nwn = np.random.randn(1000)\nbm = wn.cumsum()\n\nplt.plot(bm, lw=3)\n```\n:::\n\n\n::: {#03710be3 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:14:46.379228Z\",\"start_time\":\"2022-01-19T10:14:46.373157Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=46}\n``` {.python .cell-code}\nnp.diag(np.arange(10))\n```\n:::\n\n\n::: {#8056e1a4 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:15:19.746421Z\",\"start_time\":\"2022-01-19T10:15:19.740184Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=47}\n``` {.python .cell-code}\nzozo = np.zeros((10, 10), dtype=np.float32)\nzozo\n```\n:::\n\n\n::: {#ffbe7806 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:15:25.983891Z\",\"start_time\":\"2022-01-19T10:15:25.979180Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=48}\n``` {.python .cell-code}\nzozo.shape\n```\n:::\n\n\n::: {#cd0b2b06 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:15:28.982811Z\",\"start_time\":\"2022-01-19T10:15:28.978770Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=49}\n``` {.python .cell-code}\nprint(M)\n```\n:::\n\n\n::: {#2566a80d .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:15:29.424077Z\",\"start_time\":\"2022-01-19T10:15:29.418759Z\"}' execution_count=50}\n``` {.python .cell-code}\nM[1, 1]\n```\n:::\n\n\n::: {#f4570e86 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:16:19.133869Z\",\"start_time\":\"2022-01-19T10:16:19.128542Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=51}\n``` {.python .cell-code}\n# assign new value\nM[0, 0] = 7\nM[:, 0] = 42\nM\n```\n:::\n\n\n::: {#5534ab00 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:16:56.907063Z\",\"start_time\":\"2022-01-19T10:16:56.901415Z\"}' execution_count=52}\n``` {.python .cell-code}\nM\n```\n:::\n\n\n::: {#d2788427 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:16:44.838732Z\",\"start_time\":\"2022-01-19T10:16:44.832758Z\"}' execution_count=53}\n``` {.python .cell-code}\n# Warning: the next m is a **view** on M. \n# One again, no copies unless you ask for one!\nm = M[0, :]\nm\n```\n:::\n\n\n::: {#d4ae12e5 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:17:45.614910Z\",\"start_time\":\"2022-01-19T10:17:45.609735Z\"}' execution_count=54}\n``` {.python .cell-code}\nm[:] = 3.14\nM\n```\n:::\n\n\n::: {#e2f83642 .cell execution_count=55}\n``` {.python .cell-code}\nm[:] = 7\nM\n```\n:::\n\n\n# Slicing\n\n::: {#3831ffa5 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:19:44.021962Z\",\"start_time\":\"2022-01-19T10:19:44.015749Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=56}\n``` {.python .cell-code}\n# slicing works just like with anything else (lists, etc.)\nA = np.array([1, 2, 3, 4, 5])\nprint(A)\nprint(A[::-1])\nprint(A[::2])\nprint(A[:-1:2])\n```\n:::\n\n\n::: {#3bd6595f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:20:08.103594Z\",\"start_time\":\"2022-01-19T10:20:08.097276Z\"}' execution_count=57}\n``` {.python .cell-code}\n[[n + m * 10 for n in range(5)] for m in range(5)]\n```\n:::\n\n\n::: {#fb4453f8 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:20:28.427508Z\",\"start_time\":\"2022-01-19T10:20:28.422319Z\"}' execution_count=58}\n``` {.python .cell-code}\nA = np.array([[n + m * 10 for n in range(5)] for m in range(5)])\nA\n```\n:::\n\n\n::: {#c75c2076 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:20:57.347620Z\",\"start_time\":\"2022-01-19T10:20:57.343219Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=59}\n``` {.python .cell-code}\nprint(A[1:4])\n```\n:::\n\n\n::: {#62cfb343 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:21:15.952179Z\",\"start_time\":\"2022-01-19T10:21:15.948641Z\"}' execution_count=60}\n``` {.python .cell-code}\nm = A[:, 1:4]\n```\n:::\n\n\n::: {#b4adb1b7 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:21:22.878446Z\",\"start_time\":\"2022-01-19T10:21:22.874600Z\"}' execution_count=61}\n``` {.python .cell-code}\nm[1, 1] = 123\n```\n:::\n\n\n::: {#b32bf03b .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:21:24.877152Z\",\"start_time\":\"2022-01-19T10:21:24.871364Z\"}' execution_count=62}\n``` {.python .cell-code}\nA\n```\n:::\n\n\n::: {#9412cc8a .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:21:35.679054Z\",\"start_time\":\"2022-01-19T10:21:35.674159Z\"}' execution_count=63}\n``` {.python .cell-code}\nA[1]\n```\n:::\n\n\n::: {#8fe08206 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:21:36.493496Z\",\"start_time\":\"2022-01-19T10:21:36.487589Z\"}' execution_count=64}\n``` {.python .cell-code}\nA[:, 1]\n```\n:::\n\n\n::: {#eacdd758 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:22:13.690836Z\",\"start_time\":\"2022-01-19T10:22:13.685191Z\"}' execution_count=65}\n``` {.python .cell-code}\nA[:, ::-1]\n```\n:::\n\n\n::: {#26edc74f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:22:13.893926Z\",\"start_time\":\"2022-01-19T10:22:13.890163Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=66}\n``` {.python .cell-code}\nprint(A)\n```\n:::\n\n\n::: {#0b279b6a .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:22:59.881914Z\",\"start_time\":\"2022-01-19T10:22:59.877820Z\"}' execution_count=67}\n``` {.python .cell-code}\nrow_indices = np.array([1, 2, 4])\nprint(A[row_indices])\n```\n:::\n\n\n::: {#f60e0e19 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:23:06.495460Z\",\"start_time\":\"2022-01-19T10:23:06.490235Z\"}' execution_count=68}\n``` {.python .cell-code}\nA[:, row_indices]\n```\n:::\n\n\nAnother way is through masking with an array of `bool`s\n\n::: {#12855b67 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:23:28.237730Z\",\"start_time\":\"2022-01-19T10:23:28.230508Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=69}\n``` {.python .cell-code}\n# index masking\nB = np.arange(5)\nrow_mask = np.array([True, False, True, False, False])\nprint(B)\nprint(B[row_mask])\n```\n:::\n\n\n::: {#0e556d69 .cell execution_count=70}\n``` {.python .cell-code}\nA, A[row_mask] , A[:,row_mask]\n```\n:::\n\n\n## Copies\n\nDon't forget that `python` *does not make copies unless told to do so* (same as with any mutable type)\n\nIf you are not careful enough, this typically leads to a *lot of errors* and to being fired !!\n\n::: {#2145fa99 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:23:51.294522Z\",\"start_time\":\"2022-01-19T10:23:51.288358Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=71}\n``` {.python .cell-code}\ny = x = np.arange(6)\nx[2] = 123\ny\n```\n:::\n\n\n::: {#ddeb8bde .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:24:34.145203Z\",\"start_time\":\"2022-01-19T10:24:34.140801Z\"}' execution_count=72}\n``` {.python .cell-code}\nx is y\n```\n:::\n\n\n::: {#20646de0 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:24:38.815817Z\",\"start_time\":\"2022-01-19T10:24:38.811878Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=73}\n``` {.python .cell-code}\n# A real copy\ny = x.copy()\nx is y \n```\n:::\n\n\n::: {#d0e708d6 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:24:57.551439Z\",\"start_time\":\"2022-01-19T10:24:57.548073Z\"}' execution_count=74}\n``` {.python .cell-code}\n# Or equivalently (but the one above is better...)\ny = np.copy(x)\n```\n:::\n\n\n::: {#29bb6d8f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:24:57.733643Z\",\"start_time\":\"2022-01-19T10:24:57.727390Z\"}' execution_count=75}\n``` {.python .cell-code}\nx[0] = -12\nprint(x, y, x is y)\n```\n:::\n\n\nTo put values of x in y (copy values into an **existing** array) use  \n\n::: {#a08baa6c .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:27:00.707987Z\",\"start_time\":\"2022-01-19T10:27:00.703474Z\"}' execution_count=76}\n``` {.python .cell-code}\nx = np.random.randn(10)\nx, id(x)\n```\n:::\n\n\n::: {#6fd32ba7 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:27:35.874585Z\",\"start_time\":\"2022-01-19T10:27:35.871235Z\"}' execution_count=77}\n``` {.python .cell-code}\nx.fill(2.78)   # in place. \nx, id(x)\n```\n:::\n\n\n::: {#f3f60a92 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:27:39.785341Z\",\"start_time\":\"2022-01-19T10:27:39.782357Z\"}' execution_count=78}\n``` {.python .cell-code}\nx[:] = 3.14  # x.fill(3.14)  can. be chained ...\nx, id(x)\n```\n:::\n\n\n::: {#8d4a7491 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:29:03.422782Z\",\"start_time\":\"2022-01-19T10:29:03.418965Z\"}' execution_count=79}\n``` {.python .cell-code}\nx[:] = np.random.randn(x.shape[0])\nx, id(x)\n```\n:::\n\n\n::: {#1ea45080 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:29:05.933501Z\",\"start_time\":\"2022-01-19T10:29:05.929790Z\"}' execution_count=80}\n``` {.python .cell-code}\ny = np.empty(x.shape)  # how does empty() work ?\ny, id(y)\n```\n:::\n\n\n::: {#36fea32f .cell execution_count=81}\n``` {.python .cell-code}\ny = x\ny, id(y), id(x), y is x\n```\n:::\n\n\n::: {.callout-warning}\n\n### Final warning\n\n:::\n\nIn the next line you copy the values of `x` into an existing array `y` (of same size...)\n\n::: {#1c7d15db .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:29:26.993302Z\",\"start_time\":\"2022-01-19T10:29:26.989487Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=82}\n``` {.python .cell-code}\ny = np.zeros(x.shape)\ny[:] = x\ny, y is x, np.all(y==x)\n```\n:::\n\n\nWhile in the next line, you are aliasing, you are giving a new name `y` to the object named `x` (you should **never, ever** write something like this)\n\n::: {#0582d409 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:30:11.677048Z\",\"start_time\":\"2022-01-19T10:30:11.673812Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=83}\n``` {.python .cell-code}\ny = x\ny is x\n```\n:::\n\n\n## Miscellanea\n\n### Non-numerical values\n\nA `numpy` array can contain other things than numeric types\n\n::: {#c2fc7252 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:30:12.402445Z\",\"start_time\":\"2022-01-19T10:30:12.399156Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=84}\n``` {.python .cell-code}\narr = np.array(['Labore', 'neque', 'ipsum', 'ut', 'non', 'quiquia', 'dolore.'])\narr, arr.shape, arr.dtype\n```\n:::\n\n\n::: {#2cc75ce5 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:30:14.073657Z\",\"start_time\":\"2022-01-19T10:30:14.062255Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=85}\n``` {.python .cell-code}\n# arr.sum()\n```\n:::\n\n\n::: {#0d193385 .cell slideshow='{\"slide_type\":\"subslide\"}' execution_count=86}\n``` {.python .cell-code}\n\"_\".join(arr)\n```\n:::\n\n\n::: {#753a8942 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:30:46.274448Z\",\"start_time\":\"2022-01-19T10:30:46.269678Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=87}\n``` {.python .cell-code}\narr.dtype\n```\n:::\n\n\n## A matrix is no 2D array in `numpy`\n\nSo far, we have only used `array` or `ndarray` objects\n\nThe is another type: the `matrix` type\n\nIn words: **don't use it** (IMhO) and stick with arrays\n\n::: {#9071d4e4 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:31:48.972264Z\",\"start_time\":\"2022-01-19T10:31:48.968244Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=88}\n``` {.python .cell-code}\n# Matrix VS array objects in numpy\nm1 = np.matrix(np.arange(3))\nm2 = np.matrix(np.arange(3))\nm1, m2\n```\n:::\n\n\n::: {#5ef6c6bb .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=89}\n``` {.python .cell-code}\nm1.transpose() @ m2, m1.shape, m1.transpose() * m2\n```\n:::\n\n\n::: {#279f2ef4 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:31:50.070823Z\",\"start_time\":\"2022-01-19T10:31:50.067191Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=90}\n``` {.python .cell-code}\na1 = np.arange(3)\na2 = np.arange(3)\na1, a2\n```\n:::\n\n\n::: {#75827d82 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:33:12.726005Z\",\"start_time\":\"2022-01-19T10:33:12.719514Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=91}\n``` {.python .cell-code}\nm1 * m2.T, m1.dot(m2.T)\n```\n:::\n\n\n::: {#800e1de5 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:33:27.178091Z\",\"start_time\":\"2022-01-19T10:33:27.172613Z\"}' execution_count=92}\n``` {.python .cell-code}\na1 * a2\n```\n:::\n\n\n::: {#f4f11bac .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:33:36.836024Z\",\"start_time\":\"2022-01-19T10:33:36.830383Z\"}' execution_count=93}\n``` {.python .cell-code}\na1.dot(a2)\n```\n:::\n\n\n::: {#58aa2638 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:33:48.138130Z\",\"start_time\":\"2022-01-19T10:33:48.132664Z\"}' execution_count=94}\n``` {.python .cell-code}\nnp.outer(a1, a2)\n```\n:::\n\n\n::: {.callout-note}\n\nVisit <https://numpy.org/doc/stable/reference/arrays.ndarray.html#arrays-ndarray>\n\n:::\n\n## Sparse matrices\n\n::: {#3c1d8902 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:37:31.887375Z\",\"start_time\":\"2022-01-19T10:37:31.882051Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=95}\n``` {.python .cell-code}\nfrom scipy.sparse import csc_matrix, csr_matrix, coo_matrix\n```\n:::\n\n\n::: {#a65e5a19 .cell execution_count=96}\n``` {.python .cell-code}\nprobs = np.full(fill_value=1/4, shape=(4,))\nprobs\n```\n:::\n\n\n::: {#2dae4693 .cell execution_count=97}\n``` {.python .cell-code}\nX = np.random.multinomial(n=2, pvals=probs, size=4)   # check you understand what is going on \nX\n```\n:::\n\n\n::: {#9384bf31 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:37:48.232516Z\",\"start_time\":\"2022-01-19T10:37:48.228484Z\"}' execution_count=98}\n``` {.python .cell-code}\nprobs\n```\n:::\n\n\n::: {#a09d32f8 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:37:48.397749Z\",\"start_time\":\"2022-01-19T10:37:48.392611Z\"}' execution_count=99}\n``` {.python .cell-code}\nX_coo = coo_matrix(X)  ## coordinate format\n```\n:::\n\n\n::: {#b3a57507 .cell execution_count=100}\n``` {.python .cell-code}\nprint(X_coo)\nX_coo\n```\n:::\n\n\n::: {#12449338 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:38:09.049157Z\",\"start_time\":\"2022-01-19T10:38:09.044598Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=101}\n``` {.python .cell-code}\nX_coo.nnz    # number pf non-zero coordinates \n```\n:::\n\n\n::: {#badd1db2 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:38:14.258127Z\",\"start_time\":\"2022-01-19T10:38:14.251407Z\"}' execution_count=102}\n``` {.python .cell-code}\nprint(X, end='\\n----\\n')\nprint(X_coo.data, end='\\n----\\n')\nprint(X_coo.row, end='\\n----\\n')\nprint(X_coo.col, end='\\n----\\n')\n```\n:::\n\n\nThere is also\n\n- `csr_matrix`: sparse rows format \n- `csc_matrix`: sparse columns format\n\nSparse rows is often used for machine learning: sparse features vectors\n\nBut sparse column format useful as well (e.g. coordinate gradient descent)\n\n## Bored with decimals?\n\n::: {#e9ee7c71 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:39:04.467972Z\",\"start_time\":\"2022-01-19T10:39:04.461304Z\"}' execution_count=103}\n``` {.python .cell-code}\nX = np.random.randn(5, 5)\nX\n```\n:::\n\n\n::: {#dc434971 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:39:09.241253Z\",\"start_time\":\"2022-01-19T10:39:09.235736Z\"}' execution_count=104}\n``` {.python .cell-code}\n# All number displayed by numpy (in the current kernel) are with 3 decimals max\nnp.set_printoptions(precision=3)\nprint(X)\nnp.set_printoptions(precision=8)\n```\n:::\n\n\n## Not limited to 2D!\n\n`numpy` arrays can have any number of dimension (hence the name `ndarray`)\n\n::: {#9613a62f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:39:46.037716Z\",\"start_time\":\"2022-01-19T10:39:46.032228Z\"}' execution_count=105}\n``` {.python .cell-code}\nX = np.arange(18).reshape(3, 2, 3)\nX\n```\n:::\n\n\n::: {#147f05ea .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:39:46.370909Z\",\"start_time\":\"2022-01-19T10:39:46.366101Z\"}' execution_count=106}\n``` {.python .cell-code}\nX.shape\n```\n:::\n\n\n::: {#4c018248 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:39:51.793204Z\",\"start_time\":\"2022-01-19T10:39:51.787910Z\"}' execution_count=107}\n``` {.python .cell-code}\nX.ndim\n```\n:::\n\n\nVisit <https://numpy.org/doc/stable/reference/arrays.ndarray.html#arrays-ndarray>\n\n# Aggregations and statistics\n\n::: {#4b2dfc5c .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:40:09.476064Z\",\"start_time\":\"2022-01-19T10:40:09.470504Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=108}\n``` {.python .cell-code}\nA = np.arange(42).reshape(7, 6)\nA\n```\n:::\n\n\n::: {#5c113732 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:40:15.486454Z\",\"start_time\":\"2022-01-19T10:40:15.480429Z\"}' execution_count=109}\n``` {.python .cell-code}\nA.sum(), 42 * 41 //2\n```\n:::\n\n\n::: {#8d513c42 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:40:30.552043Z\",\"start_time\":\"2022-01-19T10:40:30.545833Z\"}' execution_count=110}\n``` {.python .cell-code}\nA[:, 3].mean(), np.mean (3 + np.arange(0, 42, 6))\n```\n:::\n\n\n::: {#1905fffd .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:40:35.563769Z\",\"start_time\":\"2022-01-19T10:40:35.558458Z\"}' execution_count=111}\n``` {.python .cell-code}\nA.mean(axis=0)\n```\n:::\n\n\n::: {#e5bdbf69 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:41:32.219284Z\",\"start_time\":\"2022-01-19T10:41:32.213546Z\"}' execution_count=112}\n``` {.python .cell-code}\nA.mean(axis=1)\n```\n:::\n\n\n::: {#82151a44 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:41:36.654691Z\",\"start_time\":\"2022-01-19T10:41:36.649712Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=113}\n``` {.python .cell-code}\nA[:,3].std(), A[:,3].var()\n```\n:::\n\n\n::: {#a92beffc .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:41:41.843358Z\",\"start_time\":\"2022-01-19T10:41:41.837835Z\"}' execution_count=114}\n``` {.python .cell-code}\nA[:,3].min(), A[:,3].max()\n```\n:::\n\n\n::: {#babfd8d7 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:42:19.023192Z\",\"start_time\":\"2022-01-19T10:42:19.017379Z\"}' execution_count=115}\n``` {.python .cell-code}\nA.cumsum(axis=0)\n```\n:::\n\n\n::: {#71df67ca .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:41:49.658126Z\",\"start_time\":\"2022-01-19T10:41:49.652337Z\"}' execution_count=116}\n``` {.python .cell-code}\nA\n```\n:::\n\n\n::: {#a878d568 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:42:28.725423Z\",\"start_time\":\"2022-01-19T10:42:28.720388Z\"}' execution_count=117}\n``` {.python .cell-code}\n# sum of diagonal\nA.trace()\n```\n:::\n\n\n# Linear Algebra\n\n::: {#468d201c .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:28.663538Z\",\"start_time\":\"2022-01-19T10:43:28.659546Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=118}\n``` {.python .cell-code}\nA = np.arange(30).reshape(6, 5)\nv1 = np.arange(0, 5)\nv2 = np.arange(5, 10)\n```\n:::\n\n\n::: {#0e61319a .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:28.871370Z\",\"start_time\":\"2022-01-19T10:43:28.866058Z\"}' execution_count=119}\n``` {.python .cell-code}\nA\n```\n:::\n\n\n::: {#91861895 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:29.041390Z\",\"start_time\":\"2022-01-19T10:43:29.035397Z\"}' execution_count=120}\n``` {.python .cell-code}\nv1, v2\n```\n:::\n\n\n::: {#16822898 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:30.302802Z\",\"start_time\":\"2022-01-19T10:43:30.297408Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=121}\n``` {.python .cell-code}\nv1 * v2\n```\n:::\n\n\n::: {#e149e075 .cell execution_count=122}\n``` {.python .cell-code}\nv1.dot(v2), np.sum(v1* v2)\n```\n:::\n\n\n::: {#d7e500e2 .cell execution_count=123}\n``` {.python .cell-code}\nv1.reshape(5,1) @ v2.reshape(1,5)\n```\n:::\n\n\n## Inner products\n\n::: {#1dbdad0d .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:39.940939Z\",\"start_time\":\"2022-01-19T10:43:39.935975Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=124}\n``` {.python .cell-code}\n# Inner product between vectors\nprint(v1.dot(v2))\n\n# You can use also (but first solution is better)\nprint(np.dot(v1, v2))\n```\n:::\n\n\n::: {#5fbb6f61 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:41.034492Z\",\"start_time\":\"2022-01-19T10:43:41.028651Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=125}\n``` {.python .cell-code}\nA, v1\n```\n:::\n\n\n::: {#7215e445 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:45.633853Z\",\"start_time\":\"2022-01-19T10:43:45.628678Z\"}' execution_count=126}\n``` {.python .cell-code}\nA.shape, v1.shape\n```\n:::\n\n\n::: {#5c72606d .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:55.770813Z\",\"start_time\":\"2022-01-19T10:43:55.766693Z\"}' execution_count=127}\n``` {.python .cell-code}\n# Matrix-vector inner product\nA.dot(v1)\n```\n:::\n\n\n::: {#89067871 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:44:01.146695Z\",\"start_time\":\"2022-01-19T10:44:01.138719Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=128}\n``` {.python .cell-code}\n# Transpose\nA.T\n```\n:::\n\n\n::: {#d82ebc09 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:44:05.408599Z\",\"start_time\":\"2022-01-19T10:44:05.403379Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=129}\n``` {.python .cell-code}\nprint(v1)\n# Inline operations (same for *=, /=, -=)\nv1 += 2\n```\n:::\n\n\n## Linear systems\n\n::: {#c0bb8b00 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:44:47.947222Z\",\"start_time\":\"2022-01-19T10:44:47.942465Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=130}\n``` {.python .cell-code}\nA = np.array([[42,2,3], [4,5,6], [7,8,9]])\nb = np.array([1,2,3])\nprint(A, b, sep=2 * '\\n')\n```\n:::\n\n\n::: {#9764af30 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:44:48.103750Z\",\"start_time\":\"2022-01-19T10:44:48.096615Z\"}' execution_count=131}\n``` {.python .cell-code}\n# solve a system of linear equations\nx = np.linalg.solve(A, b)\nx\n```\n:::\n\n\n::: {#2bfb0720 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:44:49.896958Z\",\"start_time\":\"2022-01-19T10:44:49.890609Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=132}\n``` {.python .cell-code}\nA.dot(x)\n```\n:::\n\n\n## Eigenvalues and eigenvectors\n\n::: {#1604df05 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:45:14.757150Z\",\"start_time\":\"2022-01-19T10:45:14.750149Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=133}\n``` {.python .cell-code}\nA = np.random.rand(3,3)\nB = np.random.rand(3,3)\n\nevals, evecs = np.linalg.eig(A)\nevals\n```\n:::\n\n\n::: {#0bb19cdf .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:45:16.164688Z\",\"start_time\":\"2022-01-19T10:45:16.159112Z\"}' execution_count=134}\n``` {.python .cell-code}\nevecs\n```\n:::\n\n\n## Singular value decomposition (SVD)\n\nDecomposes any matrix $A \\in \\mathbb R^{m \\times n}$ as follows:\n$$\nA = U \\times S \\times V^\\top\n$$\nwhere \n- $U$ and $V$ are orthonormal matrices (meaning that $U^\\top \\times U = I$ and $V^\\top \\times V = I$)\n- $S$ is a diagonal matrix that contains the *singular* values in non-increasing order\n\n::: {#8ac34931 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:47:54.504658Z\",\"start_time\":\"2022-01-19T10:47:54.500097Z\"}' execution_count=135}\n``` {.python .cell-code}\nprint(A)\nU, S, V = np.linalg.svd(A)\n```\n:::\n\n\n::: {#d0343069 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:48:52.598626Z\",\"start_time\":\"2022-01-19T10:48:52.592465Z\"}' execution_count=136}\n``` {.python .cell-code}\nU.dot(np.diag(S)).dot(V)\n```\n:::\n\n\n::: {#8b49b2d3 .cell execution_count=137}\n``` {.python .cell-code}\nA - U @ np.diag(S) @ V\n```\n:::\n\n\n::: {#eecc5938 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:49:07.814713Z\",\"start_time\":\"2022-01-19T10:49:07.809269Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=138}\n``` {.python .cell-code}\n# U and V are indeed orthonormal\nnp.set_printoptions(precision=2)\nprint(U.T.dot(U), V.T.dot(V), sep=2 * '\\n')\nnp.set_printoptions(precision=8)\n```\n:::\n\n\n## Exercice: the racoon SVD\n\n- Load the racoon face picture using `scipy.misc.face()`\n- Visualize the picture\n- Write a function which reshapes the picture into a 2D array, and computes the best rank-r approximation of it (the prototype of the function is `compute_approx(X, r)`\n- Display the different approximations for r between 5 and 100\n\n::: {#a2cca2de .cell execution_count=139}\n``` {.python .cell-code}\n!pip3 install pooch\n```\n:::\n\n\n::: {#332d35f3 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:49:33.476362Z\",\"start_time\":\"2022-01-19T10:49:33.198685Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=140}\n``` {.python .cell-code}\nimport numpy as np\nfrom scipy.datasets import face\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nX = face()\n```\n:::\n\n\n::: {#605bbd7f .cell execution_count=141}\n``` {.python .cell-code}\ntype(X)\n```\n:::\n\n\n::: {#f1f4d83b .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:49:33.476362Z\",\"start_time\":\"2022-01-19T10:49:33.198685Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=142}\n``` {.python .cell-code}\nplt.imshow(X)\n_ = plt.axis('off')\n```\n:::\n\n\n::: {#255b4756 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:53:29.332090Z\",\"start_time\":\"2022-01-19T10:53:28.069519Z\"}' execution_count=143}\n``` {.python .cell-code}\nn_rows, n_cols, n_channels = X.shape\nX_reshaped = X.reshape(n_rows, n_cols * n_channels)\nU, S, V = np.linalg.svd(X_reshaped, full_matrices=False)\n```\n:::\n\n\n::: {#2c6520df .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:54:28.825206Z\",\"start_time\":\"2022-01-19T10:54:28.819913Z\"}' execution_count=144}\n``` {.python .cell-code}\nX_reshaped.shape\n```\n:::\n\n\n::: {#72ce27b6 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:53:58.531955Z\",\"start_time\":\"2022-01-19T10:53:58.526383Z\"}' execution_count=145}\n``` {.python .cell-code}\nX.shape\n```\n:::\n\n\n::: {#f4ee7a2c .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:53:43.697818Z\",\"start_time\":\"2022-01-19T10:53:43.259439Z\"}' execution_count=146}\n``` {.python .cell-code}\nplt.plot(S**2)  ## a kind of screeplot\nplt.yscale(\"log\")\n```\n:::\n\n\n::: {#17f5cd71 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:56:57.594009Z\",\"start_time\":\"2022-01-19T10:56:57.588737Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=147}\n``` {.python .cell-code}\ndef compute_approx(X: np.ndarray, r: int):\n    \"\"\"Computes the best rank-r approximation of X using SVD.\n    We expect X to the 3D array corresponding to a color image, that we \n    reduce to a 2D one to apply SVD (no broadcasting).\n    \n    Parameters\n    ----------\n    X : `np.ndarray`, shape=(n_rows, n_cols, 3)\n        The input 3D ndarray\n    \n    r : `int`\n        The desired rank\n        \n    Return\n    ------\n    output : `np.ndarray`, shape=(n_rows, n_cols, 3)\n        The best rank-r approximation of X\n    \"\"\"\n    n_rows, n_cols, n_channels = X.shape\n    # Reshape X to a 2D array\n    X_reshape = X.reshape(n_rows, n_cols * n_channels)\n    # Compute SVD\n    U, S, V = np.linalg.svd(X_reshape, full_matrices=False)\n    # Keep only the top r first singular values\n    S[r:] = 0\n    # Compute the approximation\n    X_reshape_r = U.dot(np.diag(S)).dot(V)\n    # Put it between 0 and 255 again and cast to integer type\n    return X_reshape_r.clip(min=0, max=255).astype('int')\\\n        .reshape(n_rows, n_cols, n_channels)\n```\n:::\n\n\n::: {#64d22cf1 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:57:57.381214Z\",\"start_time\":\"2022-01-19T10:57:52.533636Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=148}\n``` {.python .cell-code}\nranks = [100, 70, 50, 30, 10, 5]\nn_ranks = len(ranks)\nfor i, r in enumerate(ranks):\n    X_r = compute_approx(X, r)\n    # plt.subplot(n_ranks, 1, i + 1)\n    plt.figure(figsize=(5, 5))\n    plt.imshow(X_r)\n    _ = plt.axis('off')\n    # plt.title(f'Rank {r} approximation of the racoon' % r, fontsize=16)\n    plt.tight_layout()\n```\n:::\n\n\n::: {.callout-tip}\n\n### Variations\n\nIn the code above, we recompute the SVD of `X` for every element in list `rank`.    \nIn the next chunk, we compute the SVD once, and define a *generator* to generate the low rank approximations of matrix `X`. We take advantage of the fact that the SVD defines \nan orthonormal basis for the space of matrices. In this adapted orthonormal basis \nthe optimal  low rank approximations of $X$ have  a sparse expansion.\n\n:::\n\n::: {#867d2f65 .cell execution_count=149}\n``` {.python .cell-code}\ndef gen_rank_k_approx(X):\n    \"\"\"Generator for low rank \n    approximation of a matrix X using truncated SVD.\n\n    Args:\n        X (numpy.ndarray): a numerical matrix\n\n    Yields:\n        (int,numpy.ndarray): rank k and best rank-k approximation of X using truncated SVD(according to Eckart-Young theorem).\n    \"\"\"  \n    U, S, V = np.linalg.svd(X, full_matrices=False)\n    r = 0\n    Y = np.zeros_like(X, dtype='float64')\n    while (r<len(S)):\n      Y = Y + S[r] * (U[:,r,np.newaxis] @ V[r,:, np.newaxis].T)\n      r += 1\n      yield r, Y\n```\n:::\n\n\n::: {#4fadf906 .cell execution_count=150}\n``` {.python .cell-code}\ng = gen_rank_k_approx(X_reshaped) \n```\n:::\n\n\n::: {#3be58087 .cell execution_count=151}\n``` {.python .cell-code}\nfor i in range(100):\n    _, Xr = next(g)\n    if i % 10 ==0:  \n      plt.figure(figsize=(5, 5))\n      plt.imshow(\n          Xr\n          .clip(min=0, max=255)\n          .astype('int')\n          .reshape(n_rows, n_cols, n_channels)\n      )\n      _ = plt.axis('off')\n      plt.tight_layout()\n```\n:::\n\n\nVisit <https://numpy.org/numpy-tutorials/content/tutorial-svd.html>\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /usr/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.3\n---\n",
    "supporting": [
      "notebook02_numpy_files"
    ],
    "filters": []
  }
}