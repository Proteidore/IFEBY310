{
  "hash": "bd036dab79ff6136f1919cac87c1c52f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Introduction to Python\njupyter: python3\n\nengine: jupyter\n---\n\n\n\nWe introduce here the `python` language. \nOnly the bare minimum necessary for getting started with the data-science stack (a bunch of libraries for data science).\nPython is a **programming language**, as are `C++`, `java`, `fortran`, `javascript`,\netc.\n\n\n## Specific features of Python\n\n- an **interpreted** (as opposed to *compiled*) language. Contrary to e.g.\n`C++` or `fortran`, one does not compile Python code before executing it. \n\n- Used as a scripting language, by python `python script.py` in a terminal\n\n- But can be used also **interactively**: the jupyter notebook, iPython, etc.\n\n- A free software released under an **open-source** license: Python can\nbe used and distributed free of charge, even for building commercial\nsoftware.\n\n- **multi-platform**: Python is available for all major operating\nsystems, Windows, Linux/Unix, MacOS X, most likely your mobile phone\nOS, etc.\n\n- A very readable language with clear non-verbose syntax\n\n- A language for which a **large amount of high-quality** packages are\navailable for various applications, including web-frameworks and scientific\ncomputing\n\n- It has been one of the top **languages for data science** and **machine learning** for several years, because it is  expressive and and easy to deploy\n\n- An object-oriented language\n\nSee https://www.python.org/about/ for more information about distinguishing features of Python.\n\n::: {.callout-important}\n\n### Python 2 or Python 3?\n\n- Simple answer: *don't use Python 2, use Python 3*\n- Python 2 is *mostly deprecated* and *has not been maintained* for years \n- You'll end up hanged if you use Python 2\n- If Python 2 is mandatory at your workplace, find another work\n\n:::\n\n::: {.callout-important}\n\n### Jupyter or Quarto notebooks?\n\n- `quarto` is more git friendly than `jupyter`\n- Enjoy authentic editors\n  \n- Go for `quarto`\n  \n:::\n\n# Hello world\n\n- In a `jupyter`/`quarto` notebook, you have an interactive interpreter.\n\n- You type in the cells, execute commands \n\n::: {#87aee4e4 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:21:39.584103Z\",\"start_time\":\"2021-01-26T10:21:39.577509Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=1}\n``` {.python .cell-code}\nprint(\"Hi everybody!\")\n```\n:::\n\n\n# Basic types\n\n## Integers\n\n::: {#db8c065e .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:21:48.191166Z\",\"start_time\":\"2021-01-26T10:21:48.181921Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=2}\n``` {.python .cell-code}\n1 + 42\n```\n:::\n\n\n::: {#8c7d53cb .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:21:50.119817Z\",\"start_time\":\"2021-01-26T10:21:50.115692Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=3}\n``` {.python .cell-code}\ntype(1+1)\n```\n:::\n\n\nWe can assign values to variables with `=`\n\n::: {#f83c69d0 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:22:09.152051Z\",\"start_time\":\"2021-01-26T10:22:09.148135Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=4}\n``` {.python .cell-code}\na = (3 + 5 ** 2) % 4\na\n```\n:::\n\n\n## Remark\n\nWe don't declare the type of a variable before assigning its value. \nIn C, conversely, one should write\n\n```C\nint a = 4;\n```\n\n## Something cool\n\n- **Arbitrary large** integer arithmetics\n\n::: {#53edd265 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:22:20.017016Z\",\"start_time\":\"2021-01-26T10:22:20.012996Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=5}\n``` {.python .cell-code}\n17 ** 542\n```\n:::\n\n\n## Floats\n\nThere exists a floating point type that is created when the variable has decimal values\n\n::: {#d410e4f5 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:22:48.180478Z\",\"start_time\":\"2021-01-26T10:22:48.177424Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=6}\n``` {.python .cell-code}\nc = 2.\n```\n:::\n\n\n::: {#8f845fe5 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:22:48.386461Z\",\"start_time\":\"2021-01-26T10:22:48.381009Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=7}\n``` {.python .cell-code}\ntype(c)\n```\n:::\n\n\n::: {#d883376d .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:22:53.303241Z\",\"start_time\":\"2021-01-26T10:22:53.298876Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=8}\n``` {.python .cell-code}\nc = 2\ntype(c)\n```\n:::\n\n\n::: {#9175f1de .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:15.640321Z\",\"start_time\":\"2021-01-26T10:23:15.636205Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=9}\n``` {.python .cell-code}\ntruc = 1 / 2\ntruc\n```\n:::\n\n\n::: {#2c0e428f .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:36.468643Z\",\"start_time\":\"2021-01-26T10:23:36.464148Z\"}' execution_count=10}\n``` {.python .cell-code}\n1 // 2 + 1 % 2\n```\n:::\n\n\n::: {#8a9fc8ad .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:41.839969Z\",\"start_time\":\"2021-01-26T10:23:41.835363Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=11}\n``` {.python .cell-code}\ntype(truc)\n```\n:::\n\n\n## Boolean\nSimilarly, boolean types are created from a comparison\n\n::: {#64f15fd6 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:43.765175Z\",\"start_time\":\"2021-01-26T10:23:43.761701Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=12}\n``` {.python .cell-code}\ntest = 3 > 4\ntest\n```\n:::\n\n\n::: {#7bad629e .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:47.310818Z\",\"start_time\":\"2021-01-26T10:23:47.306145Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=13}\n``` {.python .cell-code}\ntype(test)\n```\n:::\n\n\n::: {#fed4a8c8 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:48.899891Z\",\"start_time\":\"2021-01-26T10:23:48.895700Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=14}\n``` {.python .cell-code}\nFalse == (not True)\n```\n:::\n\n\n::: {#46194d03 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:56.264231Z\",\"start_time\":\"2021-01-26T10:23:56.259609Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=15}\n``` {.python .cell-code}\n1.41 < 2.71 and 2.71 < 3.14\n```\n:::\n\n\n::: {#d149ce93 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:06.450423Z\",\"start_time\":\"2021-01-26T10:24:06.446054Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=16}\n``` {.python .cell-code}\n# It's equivalent to\n1.41 < 2.71 < 3.14\n```\n:::\n\n\n## Type conversion (casting)\n\n::: {#0e632804 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:23.846051Z\",\"start_time\":\"2021-01-26T10:24:23.841709Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=17}\n``` {.python .cell-code}\na = 1\ntype(a)\n```\n:::\n\n\n::: {#818d5f02 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:24.566291Z\",\"start_time\":\"2021-01-26T10:24:24.561510Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=18}\n``` {.python .cell-code}\nb = float(a)\ntype(b)\n```\n:::\n\n\n::: {#9eed1860 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:44.986299Z\",\"start_time\":\"2021-01-26T10:24:44.981939Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=19}\n``` {.python .cell-code}\nstr(b)\n```\n:::\n\n\n::: {#04e69077 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:52.865090Z\",\"start_time\":\"2021-01-26T10:24:52.860248Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=20}\n``` {.python .cell-code}\nbool(b)\n# All non-zero, non empty objects are casted to boolean as True (more later)\n```\n:::\n\n\n::: {#61c1c6a1 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:59.506191Z\",\"start_time\":\"2021-01-26T10:24:59.502013Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=21}\n``` {.python .cell-code}\nbool(1-1)\n```\n:::\n\n\n#  Containers\n\nPython provides many efficient types of *containers* or *sequences*, in which collections of objects can be stored. \n\nThe main ones are `list`, `tuple`, `set` and `dict` (but there are many others...)\n\n## Tuples\n\n::: {#a98e7614 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:27:14.513637Z\",\"start_time\":\"2021-01-26T10:27:14.509638Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=22}\n``` {.python .cell-code}\ntt = 'truc', 3.14, \"truc\"\ntt\n```\n:::\n\n\n::: {#c44bd983 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:27:18.172578Z\",\"start_time\":\"2021-01-26T10:27:18.168425Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=23}\n``` {.python .cell-code}\ntt[0]\n```\n:::\n\n\nYou can't change a tuple, we say that it's *immutable*\n\n::: {#d1f85aa5 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:02.315034Z\",\"start_time\":\"2021-01-26T10:28:02.306507Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=24}\n``` {.python .cell-code}\ntry:\n    tt[0] = 1\nexcept TypeError:\n    print(f\"TypeError: 'tuple' object does not support item assignment\")\n```\n:::\n\n\nThree ways of doing the same thing\n\n::: {#2d32a0e8 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:15.173558Z\",\"start_time\":\"2021-01-26T10:28:15.169603Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=25}\n``` {.python .cell-code}\n# Method 1\ntuple([1, 2, 3])\n```\n:::\n\n\n::: {#6288d5bd .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:18.262396Z\",\"start_time\":\"2021-01-26T10:28:18.257807Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=26}\n``` {.python .cell-code}\n# Method 2\n1, 2, 3\n```\n:::\n\n\n::: {#afa5a5d3 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:32.225077Z\",\"start_time\":\"2021-01-26T10:28:32.219931Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=27}\n``` {.python .cell-code}\n# Method 3\n(1, 2, 3)\n```\n:::\n\n\n**Simpler is better in Python**, so usually you want to use Method 2.\n\n::: {#182eadfc .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:35.028409Z\",\"start_time\":\"2021-01-26T10:28:35.023677Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=28}\n``` {.python .cell-code}\ntoto = 1, 2, 3\ntoto\n```\n:::\n\n\n- This is serious !\n\n## The Zen of Python easter's egg\n\n::: {#5c46aca2 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:41.814008Z\",\"start_time\":\"2021-01-26T10:28:41.805313Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=29}\n``` {.python .cell-code}\nimport this\n```\n:::\n\n\n## Lists\n\nA list is an ordered collection of objects. These objects may have different types. For example:\n\n::: {#25a32209 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:56.683616Z\",\"start_time\":\"2021-01-26T10:28:56.680383Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=30}\n``` {.python .cell-code}\ncolors = ['red', 'blue', 'green', 'black', 'white']\n```\n:::\n\n\n::: {#a2f4169b .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:21.606351Z\",\"start_time\":\"2021-01-26T10:29:21.601561Z\"}' execution_count=31}\n``` {.python .cell-code}\ncolors[0]\n```\n:::\n\n\n::: {#22645319 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:07.632451Z\",\"start_time\":\"2021-01-26T10:29:07.627681Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=32}\n``` {.python .cell-code}\ntype(colors)\n```\n:::\n\n\n*Indexing:* accessing individual objects contained in the list by their position\n\n::: {#56d8c4b2 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:24.838416Z\",\"start_time\":\"2021-01-26T10:29:24.833616Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=33}\n``` {.python .cell-code}\ncolors[2]\n```\n:::\n\n\n::: {#86b29e61 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:25.132251Z\",\"start_time\":\"2021-01-26T10:29:25.124359Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=34}\n``` {.python .cell-code}\ncolors[2] = 3.14\ncolors\n```\n:::\n\n\n::: {.callout-warning}\n\nFor any *iterable* object in Python, indexing *starts at 0* (as in C), not at 1 (as in Fortran, R, or Matlab).\n\n:::\n\nCounting from the end with negative indices:\n\n::: {#db43a762 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:44.258856Z\",\"start_time\":\"2021-01-26T10:29:44.254238Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=35}\n``` {.python .cell-code}\ncolors[-1]\n```\n:::\n\n\nIndex must remain in the range of the list\n\n::: {#f7de9eb6 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:47.674912Z\",\"start_time\":\"2021-01-26T10:29:47.666346Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=36}\n``` {.python .cell-code}\ntry:\n    colors[10]\nexcept IndexError:\n    print(f\"IndexError: 10 >= {len(colors)} ==len(colors), index out of range \")\n```\n:::\n\n\n::: {#62d3ab6c .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:01.912160Z\",\"start_time\":\"2021-01-26T10:30:01.907265Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=37}\n``` {.python .cell-code}\ncolors\n```\n:::\n\n\n::: {#0c991496 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:02.143331Z\",\"start_time\":\"2021-01-26T10:30:02.137270Z\"}' execution_count=38}\n``` {.python .cell-code}\ntt\n```\n:::\n\n\n::: {#39dd63d8 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:34.000220Z\",\"start_time\":\"2021-01-26T10:30:33.995039Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=39}\n``` {.python .cell-code}\ncolors.append(tt)\ncolors\n```\n:::\n\n\n::: {#8ab2da8d .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:47.434827Z\",\"start_time\":\"2021-01-26T10:30:47.429744Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=40}\n``` {.python .cell-code}\nlen(colors)\n```\n:::\n\n\n::: {#bcea993a .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:52.949200Z\",\"start_time\":\"2021-01-26T10:30:52.944225Z\"}' execution_count=41}\n``` {.python .cell-code}\nlen(tt)\n```\n:::\n\n\n## Slicing: obtaining sublists of regularly-spaced elements\n\nThis work with anything iterable whenever it makes sense (`list`, `str`, `tuple`, etc.)\n\n::: {#08373ae8 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:59.895713Z\",\"start_time\":\"2021-01-26T10:30:59.890434Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=42}\n``` {.python .cell-code}\ncolors\n```\n:::\n\n\n::: {#7131e495 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:31:26.118892Z\",\"start_time\":\"2021-01-26T10:31:26.113811Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=43}\n``` {.python .cell-code}\nlist(reversed(colors))\n```\n:::\n\n\n::: {#e8a5c175 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:32:55.756965Z\",\"start_time\":\"2021-01-26T10:32:55.752090Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=44}\n``` {.python .cell-code}\ncolors[::-1]\n```\n:::\n\n\n::: {.callout-important}\n\n### Slicing syntax: \n\n`colors[start:stop:stride]`\n\n`start, stop, stride` are optional, with default values `0, len(sequence), 1`\n\n:::\nl\n\n::: {#0842c5c5 .cell execution_count=45}\n``` {.python .cell-code}\nprint(slice(4))\nprint(slice(1,5))\nprint(slice(None,13,3))\n```\n:::\n\n\n::: {#13a0277d .cell execution_count=46}\n``` {.python .cell-code}\nsl = slice(1,5,2)\ncolors[sl]\n```\n:::\n\n\n::: {#5fd95d00 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:10.985959Z\",\"start_time\":\"2021-01-15T08:34:10.980519Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=47}\n``` {.python .cell-code}\ncolors\n```\n:::\n\n\n::: {#70b2c1e8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:11.188011Z\",\"start_time\":\"2021-01-15T08:34:11.182382Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=48}\n``` {.python .cell-code}\ncolors[3:]\n```\n:::\n\n\n::: {#3936017b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:11.462017Z\",\"start_time\":\"2021-01-15T08:34:11.457005Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=49}\n``` {.python .cell-code}\ncolors[:3]\n```\n:::\n\n\n::: {#8f4aeeeb .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:11.666073Z\",\"start_time\":\"2021-01-15T08:34:11.661006Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=50}\n``` {.python .cell-code}\ncolors[1::2]\n```\n:::\n\n\n::: {#a1ff11df .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:11.892685Z\",\"start_time\":\"2021-01-15T08:34:11.886394Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=51}\n``` {.python .cell-code}\ncolors[::-1]\n```\n:::\n\n\n## Strings\n\nDifferent string syntaxes (simple, double or triple quotes):\n\n::: {#5881466a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:12.527044Z\",\"start_time\":\"2021-01-15T08:34:12.522242Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=52}\n``` {.python .cell-code}\ns = 'tintin'\ntype(s)\n```\n:::\n\n\n::: {#71113dc1 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:12.741025Z\",\"start_time\":\"2021-01-15T08:34:12.735783Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=53}\n``` {.python .cell-code}\ns\n```\n:::\n\n\n::: {#04bcf633 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:12.954647Z\",\"start_time\":\"2021-01-15T08:34:12.948403Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=54}\n``` {.python .cell-code}\ns = \"\"\"         Bonjour,\nJe m'appelle Stephane.\nJe vous souhaite une bonne journée.\nSalut.       \n\"\"\"\ns\n```\n:::\n\n\n::: {#315e9483 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:13.096374Z\",\"start_time\":\"2021-01-15T08:34:13.091122Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=55}\n``` {.python .cell-code}\ns.strip()\n```\n:::\n\n\n::: {#f76bb6aa .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:13.378652Z\",\"start_time\":\"2021-01-15T08:34:13.372858Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=56}\n``` {.python .cell-code}\nprint(s.strip())\n```\n:::\n\n\n::: {#ee14022c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:13.455410Z\",\"start_time\":\"2021-01-15T08:34:13.449943Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=57}\n``` {.python .cell-code}\nlen(s)\n```\n:::\n\n\n::: {#ef1e7227 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:14.309647Z\",\"start_time\":\"2021-01-15T08:34:14.304154Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=58}\n``` {.python .cell-code}\n# Casting to a list\nlist(s.strip()[:15])\n```\n:::\n\n\n::: {#4c44a1ac .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:14.523496Z\",\"start_time\":\"2021-01-15T08:34:14.518586Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=59}\n``` {.python .cell-code}\n# Arithmetics\nprint('Bonjour' * 2)\nprint('Hello' + ' all')\n```\n:::\n\n\n::: {#0f196e77 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:15.160961Z\",\"start_time\":\"2021-01-15T08:34:15.155909Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=60}\n``` {.python .cell-code}\nsss = 'A'\nsss += 'bc'\nsss += 'dE'\nsss.lower()\n```\n:::\n\n\n::: {#d3bc6ab1 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:15.363145Z\",\"start_time\":\"2021-01-15T08:34:15.357847Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=61}\n``` {.python .cell-code}\nss = s.strip()\nprint(ss[:10] + ss[24:28])\n```\n:::\n\n\n::: {#9871940c .cell execution_count=62}\n``` {.python .cell-code}\ns.strip()\n```\n:::\n\n\n::: {#de5adb39 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:15.594172Z\",\"start_time\":\"2021-01-15T08:34:15.588495Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=63}\n``` {.python .cell-code}\ns.strip().split('\\n')\n```\n:::\n\n\n::: {#8c1179ab .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:17.689813Z\",\"start_time\":\"2021-01-15T08:34:17.684346Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=64}\n``` {.python .cell-code}\ns[::3]\n```\n:::\n\n\n::: {#915ba2d6 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:23.785045Z\",\"start_time\":\"2021-01-15T08:34:23.779973Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=65}\n``` {.python .cell-code}\ns[3:10]\n```\n:::\n\n\n::: {#ba5b754f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:23.993089Z\",\"start_time\":\"2021-01-15T08:34:23.987450Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=66}\n``` {.python .cell-code}\n\" \".join(['Il', 'fait', 'super', 'beau', \"aujourd'hui\"])\n```\n:::\n\n\nChaining method calls is the basic of pipeline building. \n\n::: {#7eccbcc4 .cell execution_count=67}\n``` {.python .cell-code}\n( \n    \" \".join(['Il', 'fait', 'super', 'beau', \"aujourd'hui\"])\n       .title()\n       .replace(' ', '')\n       .replace(\"'\",\"\")\n)\n```\n:::\n\n\n### Important\n\nA string is *immutable* !!\n\n::: {#547b86a7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:24.332754Z\",\"start_time\":\"2021-01-15T08:34:24.329558Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=68}\n``` {.python .cell-code}\ns = 'I am an immutable guy'\n```\n:::\n\n\n::: {#26281cff .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:24.511029Z\",\"start_time\":\"2021-01-15T08:34:24.499601Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=69}\n``` {.python .cell-code}\ntry:  \n    s[2] = 's'\nexcept TypeError:\n    print(f\"Strings are immutable! s is still '{s}'\")\n```\n:::\n\n\n::: {#5688e27e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:24.732120Z\",\"start_time\":\"2021-01-15T08:34:24.725628Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=70}\n``` {.python .cell-code}\nid(s)\n```\n:::\n\n\n::: {#d7b18111 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:25.275379Z\",\"start_time\":\"2021-01-15T08:34:25.269724Z\"}' execution_count=71}\n``` {.python .cell-code}\nprint(s + ', for sure')\nid(s), id(s + ' for sure')\n```\n:::\n\n\n### Extra stuff with strings\n\n::: {#2d66350e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:25.685455Z\",\"start_time\":\"2021-01-15T08:34:25.679575Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=72}\n``` {.python .cell-code}\n'square of 2 is ' + str(2 ** 2)\n```\n:::\n\n\n::: {#ca775e74 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:26.075613Z\",\"start_time\":\"2021-01-15T08:34:26.070551Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=73}\n``` {.python .cell-code}\n'square of 2 is %d' % 2 ** 2\n```\n:::\n\n\n::: {#692e31e8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:28.906445Z\",\"start_time\":\"2021-01-15T08:34:28.900777Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=74}\n``` {.python .cell-code}\n'square of 2 is {}'.format(2 ** 2)\n```\n:::\n\n\n::: {#16df243e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:29.230345Z\",\"start_time\":\"2021-01-15T08:34:29.225362Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=75}\n``` {.python .cell-code}\n'square of 2 is {square}'.format(square=2 ** 2)\n```\n:::\n\n\n::: {#c44b86f8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:29.464228Z\",\"start_time\":\"2021-01-15T08:34:29.457777Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=76}\n``` {.python .cell-code}\n# And since Python 3.6 you can use an `f-string`\nnumber = 2\nsquare = number ** 2\n\nf'square of {number} is {square}'\n```\n:::\n\n\n### The `in` keyword\n\nYou can use the `in` keyword with any container, whenever it makes sense\n\n::: {#11583290 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:29.779042Z\",\"start_time\":\"2021-01-15T08:34:29.774313Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=77}\n``` {.python .cell-code}\nprint(s)\nprint('Salut' in s)\n```\n:::\n\n\n::: {#8981101e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:30.599065Z\",\"start_time\":\"2021-01-15T08:34:30.595645Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=78}\n``` {.python .cell-code}\nprint(tt)\nprint('truc' in tt)\n```\n:::\n\n\n::: {#aea1d08f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:30.819735Z\",\"start_time\":\"2021-01-15T08:34:30.813275Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=79}\n``` {.python .cell-code}\nprint(colors)\nprint('truc' in colors)\n```\n:::\n\n\n::: {#e0b59d9b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:31.035913Z\",\"start_time\":\"2021-01-15T08:34:31.030502Z\"}' execution_count=80}\n``` {.python .cell-code}\n('truc', 3.14, 'truc') in colors\n```\n:::\n\n\n::: {.callout-warning}\n\nStrings are not bytes. Have a look at chapter 4 *Unicode Text versus Bytes* in [Fluent Python](https://www.oreilly.com/library/view/fluent-python-2nd/9781492056348/) \n\n:::\n\n### Brain-teasing\n\nExplain this weird behaviour:\n\n::: {#fe25621e .cell execution_count=81}\n``` {.python .cell-code}\n5 in [1, 2, 3, 4] == False\n```\n:::\n\n\n::: {#25a1506c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:31.612963Z\",\"start_time\":\"2021-01-15T08:34:31.607708Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=82}\n``` {.python .cell-code}\n[1, 2, 3, 4] == False\n```\n:::\n\n\n::: {#263b747f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:31.825068Z\",\"start_time\":\"2021-01-15T08:34:31.819205Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=83}\n``` {.python .cell-code}\n5 not in [1, 2, 3, 4]\n```\n:::\n\n\n::: {#af4a262c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:32.299157Z\",\"start_time\":\"2021-01-15T08:34:32.293640Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=84}\n``` {.python .cell-code}\n(5 in [1, 2, 3, 4]) == False\n```\n:::\n\n\n::: {#b4373220 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:32.524705Z\",\"start_time\":\"2021-01-15T08:34:32.518440Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=85}\n``` {.python .cell-code}\n# ANSWER.\n# This is a chained comparison. We have seen that \n1 < 2 < 3\n# is equivalent to\n(1 < 2) and (2 < 3)\n# so that\n5 in [1, 2, 3, 4] == False\n# is equivalent to\n(5 in [1, 2, 3, 4]) and ([1, 2, 3, 4] == False)\n```\n:::\n\n\n::: {#9337fb0a .cell execution_count=86}\n``` {.python .cell-code}\n(5 in [1, 2, 3, 4])\n```\n:::\n\n\n::: {#7d72744d .cell execution_count=87}\n``` {.python .cell-code}\n([1, 2, 3, 4] == False)\n```\n:::\n\n\n## Dictionaries\n\n- A dictionary is basically an efficient table that **maps keys to values**.\n- The **MOST** important container in Python. \n- Many things are actually a `dict` under the hood in `Python`\n\n::: {#7eb4f13f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:33.375226Z\",\"start_time\":\"2021-01-15T08:34:33.371037Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=88}\n``` {.python .cell-code}\ntel = {'emmanuelle': 5752, 'sebastian': 5578}\nprint(tel)\nprint(type(tel))\n```\n:::\n\n\n::: {#aa3439d8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:33.572354Z\",\"start_time\":\"2021-01-15T08:34:33.566227Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=89}\n``` {.python .cell-code}\ntel['emmanuelle'], tel['sebastian']\n```\n:::\n\n\n::: {#59eb1e5b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:33.711591Z\",\"start_time\":\"2021-01-15T08:34:33.705748Z\"}' execution_count=90}\n``` {.python .cell-code}\ntel['francis'] = '5919'\ntel\n```\n:::\n\n\n::: {#6fa6447e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:33.889041Z\",\"start_time\":\"2021-01-15T08:34:33.883802Z\"}' execution_count=91}\n``` {.python .cell-code}\nlen(tel)\n```\n:::\n\n\n### Important remarks\n\n- Keys can be of different types\n- A key must be of **immutable** type\n\n::: {#081dfc59 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:35.180227Z\",\"start_time\":\"2021-01-15T08:34:35.172919Z\"}' execution_count=92}\n``` {.python .cell-code}\ntel[7162453] = [1, 3, 2]\ntel[3.14] = 'bidule'\ntel[('jaouad', 2)] = 1234\ntel\n```\n:::\n\n\n::: {#fdcba38f .cell execution_count=93}\n``` {.python .cell-code}\ntry:\n    sorted(tel)\nexcept TypeError:\n    print(\"TypeError: '<' not supported between instances of 'int' and 'str'\")    \n```\n:::\n\n\n::: {#d6a11447 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:35.781423Z\",\"start_time\":\"2021-01-15T08:34:35.770370Z\"}' execution_count=94}\n``` {.python .cell-code}\n# A list is mutable and not hashable\ntry:\n    tel[['jaouad']] = '5678'\nexcept TypeError:\n    print(\"TypeError: unhashable type: 'list'\")\n```\n:::\n\n\n::: {#f1b9e19f .cell execution_count=95}\n``` {.python .cell-code}\ntry:\n    tel[2]\nexcept KeyError:\n    print(\"KeyError: 2\")\n```\n:::\n\n\n::: {#b34b8e9e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:35.984417Z\",\"start_time\":\"2021-01-15T08:34:35.978289Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=96}\n``` {.python .cell-code}\ntel = {'emmanuelle': 5752, 'sebastian' : 5578, 'jaouad' : 1234}\nprint(tel.keys())\nprint(tel.values())\nprint(tel.items())\n```\n:::\n\n\n::: {#438ee1c5 .cell execution_count=97}\n``` {.python .cell-code}\nlist(tel.keys())[2]\n```\n:::\n\n\n::: {#31b19d97 .cell execution_count=98}\n``` {.python .cell-code}\ntel.values().mapping\n```\n:::\n\n\n::: {#b2653fc0 .cell execution_count=99}\n``` {.python .cell-code}\ntype(tel.keys())\n```\n:::\n\n\n::: {#8f1a2c44 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:36.135136Z\",\"start_time\":\"2021-01-15T08:34:36.129801Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=100}\n``` {.python .cell-code}\n'rémi' in tel\n```\n:::\n\n\n::: {#16ef81d9 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:36.649224Z\",\"start_time\":\"2021-01-15T08:34:36.643788Z\"}' execution_count=101}\n``` {.python .cell-code}\nlist(tel)\n```\n:::\n\n\n::: {#7de6859f .cell execution_count=102}\n``` {.python .cell-code}\n'rémi' in tel.keys()\n```\n:::\n\n\nYou can swap values like this\n\n::: {#259c5b99 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:37.036245Z\",\"start_time\":\"2021-01-15T08:34:37.032296Z\"}' execution_count=103}\n``` {.python .cell-code}\nprint(tel)\ntel['emmanuelle'], tel['sebastian'] = tel['sebastian'], tel['emmanuelle']\nprint(tel)\n```\n:::\n\n\n::: {#eb866348 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:37.755117Z\",\"start_time\":\"2021-01-15T08:34:37.750155Z\"}' execution_count=104}\n``` {.python .cell-code}\n# It works, since\na, b = 2.71, 3.14\na, b = b, a\na, b\n```\n:::\n\n\n### Exercise 1\n\nGet keys of `tel` sorted by decreasing order\n\n::: {#4c5dc137 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:38.375787Z\",\"start_time\":\"2021-01-15T08:34:38.372593Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=105}\n``` {.python .cell-code}\ntel = {'emmanuelle': 5752, 'sebastian' : 5578, 'jaouad' : 1234}\n```\n:::\n\n\n::: {.content-visible when-profile='solution'} \n \n#### Answer\n\n::: {#20271d9c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:38.860742Z\",\"start_time\":\"2021-01-15T08:34:38.855547Z\"}' execution_count=106}\n``` {.python .cell-code}\nsorted(tel, reverse=True)\n```\n:::\n\n\n::: {#7443b2b9 .cell execution_count=107}\n``` {.python .cell-code}\ntype(sorted(tel, reverse=True))\n```\n:::\n\n\n:::\n\n### Exercise 2\n\nGet keys of `tel` sorted by increasing _values_\n\n::: {#c7b15dbf .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:39.295210Z\",\"start_time\":\"2021-01-15T08:34:39.291759Z\"}' execution_count=108}\n``` {.python .cell-code}\ntel = {'emmanuelle': 5752, 'sebastian' : 5578, 'jaouad' : 1234}\n```\n:::\n\n\n::: {.content-visible when-profile='solution'} \n \n#### Answer\n\n::: {#5b3c25f6 .cell execution_count=109}\n``` {.python .cell-code}\ntel[\"sebastian\"]\n```\n:::\n\n\n::: {#6cdb4623 .cell execution_count=110}\n``` {.python .cell-code}\ntel.get('rémi')\n```\n:::\n\n\n::: {#b299ec43 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:39.696800Z\",\"start_time\":\"2021-01-15T08:34:39.691171Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=111}\n``` {.python .cell-code}\nsorted(tel, key=tel.get)\n```\n:::\n\n\n:::\n\n### Exercise 3\n\nObtain a sorted-by-key version of `tel`\n\n::: {#9f415967 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:40.064213Z\",\"start_time\":\"2021-01-15T08:34:40.060078Z\"}' execution_count=112}\n``` {.python .cell-code}\ntel = {'emmanuelle': 5752, 'sebastian' : 5578, 'jaouad' : 1234}\n```\n:::\n\n\n::: {.content-visible when-profile='solution'} \n \n#### Answer\n\n- A dict is inherently **orderless**\n- Only a _representation_ of a dict can be ordered\n\n::: {#5423ddee .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:41.012018Z\",\"start_time\":\"2021-01-15T08:34:41.006814Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=113}\n``` {.python .cell-code}\n# Simplest is through a list\nprint(type(tel.items()))\nissubclass(type(tel.items()), list)\n```\n:::\n\n\n::: {#76f5482f .cell execution_count=114}\n``` {.python .cell-code}\nsorted(tel.items())\n```\n:::\n\n\nIf you really want an ordered dict `OrderDict` memorizes order of insertion in it\n\n::: {#3b3b6456 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:41.406578Z\",\"start_time\":\"2021-01-15T08:34:41.400640Z\"}' execution_count=115}\n``` {.python .cell-code}\nfrom collections import OrderedDict\n\nOrderedDict(sorted(tel.items()))\n```\n:::\n\n\n:::\n\n## Sets\n\nA set is an unordered container, containing unique elements\n\n::: {#301cd707 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:43.408375Z\",\"start_time\":\"2021-01-15T08:34:43.402917Z\"}' execution_count=116}\n``` {.python .cell-code}\nss = {1, 2, 2, 2, 3, 3, 'tintin', 'tintin', 'toto'}\nss\n```\n:::\n\n\n::: {#56773f3b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:43.689264Z\",\"start_time\":\"2021-01-15T08:34:43.683234Z\"}' execution_count=117}\n``` {.python .cell-code}\ns = 'truc truc bidule truc'\nset(s)\n```\n:::\n\n\n::: {#c5ea9dc3 .cell execution_count=118}\n``` {.python .cell-code}\nset(list(s))\n```\n:::\n\n\n::: {#29f8999c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:43.900734Z\",\"start_time\":\"2021-01-15T08:34:43.894591Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=119}\n``` {.python .cell-code}\n{1, 5, 2, 1, 1}.union({1, 2, 3})\n```\n:::\n\n\n::: {#0e8b5bc3 .cell execution_count=120}\n``` {.python .cell-code}\nset((1, 5, 3, 2))\n```\n:::\n\n\n::: {#aa3274ba .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:44.236053Z\",\"start_time\":\"2021-01-15T08:34:44.230406Z\"}' execution_count=121}\n``` {.python .cell-code}\nset([1, 5, 2, 1, 1]).intersection(set([1, 2, 3]))\n```\n:::\n\n\n::: {#db39398e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:44.521051Z\",\"start_time\":\"2021-01-15T08:34:44.515051Z\"}' execution_count=122}\n``` {.python .cell-code}\nss.add('tintin')\nss\n```\n:::\n\n\n::: {#f79cede3 .cell execution_count=123}\n``` {.python .cell-code}\nss.difference(range(6))\n```\n:::\n\n\nYou can combine all containers together\n\n::: {#06ff5cde .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:45.317823Z\",\"start_time\":\"2021-01-15T08:34:45.310957Z\"}' execution_count=124}\n``` {.python .cell-code}\ndd = {\n    'truc': [1, 2, 3], \n    5: (1, 4, 2),\n    (1, 3): {'hello', 'world'}\n}\ndd\n```\n:::\n\n\n# Assigments in `Python` is name binding\n\n## Everything is either mutable or immutable\n\n::: {#35bcf9f4 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:46.250900Z\",\"start_time\":\"2021-01-15T08:34:46.245797Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=125}\n``` {.python .cell-code}\nss = {1, 2, 3}\nsss = ss\nsss, ss\n```\n:::\n\n\n::: {#bb57eed2 .cell execution_count=126}\n``` {.python .cell-code}\nid(ss), id(sss)\n```\n:::\n\n\n::: {#7be7eccb .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:46.487601Z\",\"start_time\":\"2021-01-15T08:34:46.484299Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=127}\n``` {.python .cell-code}\nsss.add(\"Truc\")\n```\n:::\n\n\n**Question.** What is in `ss` ?\n\n::: {#fd231f5a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:47.555940Z\",\"start_time\":\"2021-01-15T08:34:47.549993Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=128}\n``` {.python .cell-code}\nss, sss\n```\n:::\n\n\n`ss` and `sss` are names for the same object\n\n::: {#345c8fd4 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:47.889439Z\",\"start_time\":\"2021-01-15T08:34:47.883802Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=129}\n``` {.python .cell-code}\nid(ss), id(sss)\n```\n:::\n\n\n::: {#f12268c1 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:48.385040Z\",\"start_time\":\"2021-01-15T08:34:48.380259Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=130}\n``` {.python .cell-code}\nss is sss\n```\n:::\n\n\n::: {#8de787d1 .cell execution_count=131}\n``` {.python .cell-code}\nhelp('is')\n```\n:::\n\n\n## About assigments\n\n- Python never copies an object\n- Unless you ask him to\n\nWhen you code\n```python\nx = [1, 2, 3]\ny = x\n```\nyou just\n- **bind** the variable name `x` to a list `[1, 2, 3]`\n- give another name `y` to the same object\n\n**Important remarks**\n\n- **Everything** is an object in Python\n- Either **immutable** or **mutable**\n\n::: {#6152f7d4 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:48.640520Z\",\"start_time\":\"2021-01-15T08:34:48.635298Z\"}' execution_count=132}\n``` {.python .cell-code}\nid(1), id(1+1), id(2)\n```\n:::\n\n\n**A `list` is mutable**\n\n::: {#cb45df14 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:48.849673Z\",\"start_time\":\"2021-01-15T08:34:48.845469Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=133}\n``` {.python .cell-code}\nx = [1, 2, 3]\nprint(id(x), x)\nx[0] += 42; x.append(3.14)\nprint(id(x), x)\n```\n:::\n\n\n**A `str` is immutable**\n\nIn order to \"change\" an **immutable** object, Python creates a new one\n\n::: {#46628adf .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:48.989090Z\",\"start_time\":\"2021-01-15T08:34:48.984655Z\"}' execution_count=134}\n``` {.python .cell-code}\ns = 'to'\nprint(id(s), s)\ns += 'to'\nprint(id(s), s)\n```\n:::\n\n\n**Once again, a `list` is mutable**\n\n::: {#a5e09754 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:49.185045Z\",\"start_time\":\"2021-01-15T08:34:49.179743Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=135}\n``` {.python .cell-code}\nsuper_list = [3.14, (1, 2, 3), 'tintin']\nother_list = super_list\nid(other_list), id(super_list)\n```\n:::\n\n\n- `other_list` and `super_list` are the same list\n- If you change one, you change the other.\n- `id` returns the identity of an object. Two objects with the same idendity are the same (not only the same type, but the same instance)\n\n::: {#dffc9347 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:49.490066Z\",\"start_time\":\"2021-01-15T08:34:49.483598Z\"}' execution_count=136}\n``` {.python .cell-code}\nother_list[1] = 'youps'\nother_list, super_list\n```\n:::\n\n\n::: {#a58060a4 .cell execution_count=137}\n``` {.python .cell-code}\nid(super_list), id(other_list)\n```\n:::\n\n\n## If you want a copy, to need to ask for one\n\n::: {#146de8dd .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:49.810775Z\",\"start_time\":\"2021-01-15T08:34:49.804825Z\"}' execution_count=138}\n``` {.python .cell-code}\nother_list = super_list.copy()\nid(other_list), id(super_list)\n```\n:::\n\n\n::: {#105757da .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:50.044319Z\",\"start_time\":\"2021-01-15T08:34:50.038631Z\"}' execution_count=139}\n``` {.python .cell-code}\nother_list[1] = 'copy'\nother_list, super_list\n```\n:::\n\n\nOnly `other_list` is modified. \n\nBut... what if you have a `list` of `list` ? (or a mutable object containing mutable objects)\n\n::: {#82a571c3 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:50.522523Z\",\"start_time\":\"2021-01-15T08:34:50.515916Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=140}\n``` {.python .cell-code}\nl1, l2 = [1, 2, 3], [4, 5, 6]\nlist_list = [l1, l2]\nlist_list\n```\n:::\n\n\n::: {#72f9ce33 .cell execution_count=141}\n``` {.python .cell-code}\nid(list_list), id(list_list[0]), id(l1), list_list[0] is l1\n```\n:::\n\n\nLet's make a copy of `list_list`\n\n::: {#b61f552d .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:50.900506Z\",\"start_time\":\"2021-01-15T08:34:50.894593Z\"}' execution_count=142}\n``` {.python .cell-code}\ncopy_list = list_list.copy()\ncopy_list.append('super')\nlist_list, copy_list\n```\n:::\n\n\n::: {#181d3184 .cell execution_count=143}\n``` {.python .cell-code}\nid(list_list[0]), id(copy_list[0])\n```\n:::\n\n\nOK, only `copy_list` is modified, as expected\n\nBut now...\n\n::: {#e0e0da51 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:51.550226Z\",\"start_time\":\"2021-01-15T08:34:51.545049Z\"}' execution_count=144}\n``` {.python .cell-code}\ncopy_list[0][1] = 'oups'\ncopy_list, list_list\n```\n:::\n\n\n**Question.** What happened ?!?\n\n- The `list_list` object is copied\n- But NOT what it's containing !\n- By default `copy` does a *shallow* copy, not a *deep* copy\n- It does not build copies of what is contained\n- If you want to copy an object and all that is contained in it, you need to use `deepcopy`.\n\n::: {#36b848a6 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:52.242785Z\",\"start_time\":\"2021-01-15T08:34:52.236814Z\"}' execution_count=145}\n``` {.python .cell-code}\nfrom copy import deepcopy\n\ncopy_list = deepcopy(list_list)\ncopy_list[0][1] = 'incredible !'\nlist_list, copy_list\n```\n:::\n\n\n## Final remarks\n\n::: {#8f694f3c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:52.389405Z\",\"start_time\":\"2021-01-15T08:34:52.384515Z\"}' execution_count=146}\n``` {.python .cell-code}\ntt = ([1, 2, 3], [4, 5, 6])\nprint(id(tt), tt)\nprint(list(map(id, tt)))\n```\n:::\n\n\n::: {#c2c9b85d .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:52.490073Z\",\"start_time\":\"2021-01-15T08:34:52.483857Z\"}' execution_count=147}\n``` {.python .cell-code}\ntt[0][1] = '42'\nprint(id(tt), tt)\nprint(list(map(id, tt)))\n```\n:::\n\n\n::: {#88770861 .cell execution_count=148}\n``` {.python .cell-code}\ns = [1, 2, 3]\n```\n:::\n\n\n::: {#0645997f .cell execution_count=149}\n``` {.python .cell-code}\ns2 = s\n```\n:::\n\n\n::: {#eaa253ae .cell execution_count=150}\n``` {.python .cell-code}\ns2 is s\n```\n:::\n\n\n::: {#8b04e893 .cell execution_count=151}\n``` {.python .cell-code}\nid(s2), id(s)\n```\n:::\n\n\n# Control flow and other stuff...\n\nNamely tests, loops, again booleans, etc.\n\n::: {#1cbafe23 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:52.822274Z\",\"start_time\":\"2021-01-15T08:34:52.818018Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=152}\n``` {.python .cell-code}\nif 2 ** 2 == 5:\n    print('Obvious')\nelse:\n    print('YES')\nprint('toujours')\n```\n:::\n\n\n## Blocks are delimited by indentation!\n\n::: {#9491f910 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:53.244482Z\",\"start_time\":\"2021-01-15T08:34:53.240054Z\"}' execution_count=153}\n``` {.python .cell-code}\na = 3\nif a > 0:\n    if a == 1:\n        print(1)\n    elif a == 2:\n        print(2)\nelif a == 2:\n    print(2)\nelif a == 3:\n    print(3)\nelse:\n    print(a)\n```\n:::\n\n\n## Anything can be understood as a boolean\n\nFor example, don't do this to test if a list is empty\n\n::: {#6fa7007b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:53.660533Z\",\"start_time\":\"2021-01-15T08:34:53.655820Z\"}' execution_count=154}\n``` {.python .cell-code}\nl2 = ['hello', 'everybody']\n\nif len(l2) > 0:\n    print(l2[0])\n```\n:::\n\n\nbut this\n\n::: {#f7370eba .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:54.244191Z\",\"start_time\":\"2021-01-15T08:34:54.239801Z\"}' execution_count=155}\n``` {.python .cell-code}\nif l2:\n    print(l2[0])\n```\n:::\n\n\n**Some poetry**\n\n- An empty `dict` is `False`\n- An empty `string` is `False`\n- An empty `list` is `False`\n- An empty `tuple` is `False`\n- An empty `set` is `False`\n- `0` is `False`\n- `.0` is `False`\n- etc...\n- everything else is `True`\n\n## While loops\n\n::: {#60208996 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:55.427330Z\",\"start_time\":\"2021-01-15T08:34:55.422079Z\"}' execution_count=156}\n``` {.python .cell-code}\na = 10\nb = 1\nwhile b < a:\n    b = b + 1\n    print(b)\n```\n:::\n\n\nCompute the decimals of Pi using the Wallis formula\n\n$$\n\\pi = 2 \\prod_{i=1}^{100} \\frac{4i^2}{4i^2 - 1}\n$$\n\n::: {#0384de8b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:55.901297Z\",\"start_time\":\"2021-01-15T08:34:55.815952Z\"}' execution_count=157}\n``` {.python .cell-code}\npi = 2\neps = 1e-10\ndif = 2 * eps\ni = 1\nwhile dif > eps:\n    pi, i, old_pi = pi * 4 * i ** 2 / (4 * i ** 2 - 1), i + 1, pi\n    dif = pi - old_pi\n```\n:::\n\n\n::: {#dbfbdb32 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:55.998039Z\",\"start_time\":\"2021-01-15T08:34:55.993033Z\"}' execution_count=158}\n``` {.python .cell-code}\npi\n```\n:::\n\n\n::: {#de065a4d .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:56.672400Z\",\"start_time\":\"2021-01-15T08:34:56.667181Z\"}' execution_count=159}\n``` {.python .cell-code}\nfrom math import pi\n\npi\n```\n:::\n\n\n##  `for` loop with `range`\n- Iteration with an index, with a list, with many things !\n- `range` has the same parameters as with slicing `start:end:stride`, all parameters being optional\n\n::: {#6bda4195 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:57.074626Z\",\"start_time\":\"2021-01-15T08:34:57.068953Z\"}' execution_count=160}\n``` {.python .cell-code}\nfor i in range(10):\n    print(i)\n```\n:::\n\n\n::: {#f7595020 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:57.288732Z\",\"start_time\":\"2021-01-15T08:34:57.283152Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=161}\n``` {.python .cell-code}\nfor i in range(4):\n    print(i + 1)\nprint('-')\n\nfor i in range(1, 5):\n    print(i)\nprint('-')\n\nfor i in range(1, 10, 3):\n    print(i)\n```\n:::\n\n\n**Something for nerds**. You can use `else` in a `for` loop\n\n::: {#423daf9c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:03.792632Z\",\"start_time\":\"2021-01-15T08:35:03.788211Z\"}' execution_count=162}\n``` {.python .cell-code}\nnames = ['stephane', 'mokhtar', 'jaouad', 'simon', 'yiyang']\n\nfor name in names:\n    if name.startswith('u'):\n        print(name)\n        break\nelse:\n    print('Not found.')\n```\n:::\n\n\n::: {#3f5a5124 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:11.089072Z\",\"start_time\":\"2021-01-15T08:35:11.084070Z\"}' execution_count=163}\n``` {.python .cell-code}\nnames = ['stephane', 'mokhtar', 'jaouad', 'ulysse', 'simon', 'yiyang']\n\nfor name in names:\n    if name.startswith('u'):\n        print(name)\n        break\nelse:\n    print('Not found.')\n```\n:::\n\n\n## For loops over iterable objects\n\nYou can iterate using `for` over any container: `list`, `tuple`, `dict`, `str`, `set` among others...\n\n::: {#e7391b3e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:14.358404Z\",\"start_time\":\"2021-01-15T08:35:14.354354Z\"}' execution_count=164}\n``` {.python .cell-code}\ncolors = ['red', 'blue', 'black', 'white']\npeoples = ['stephane', 'jaouad', 'mokhtar', 'yiyang', 'rémi']\n```\n:::\n\n\n::: {#3990c64a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:14.546348Z\",\"start_time\":\"2021-01-15T08:35:14.541964Z\"}' execution_count=165}\n``` {.python .cell-code}\n# This is stupid\nfor i in range(len(colors)):\n    print(colors[i])\n    \n# This is better\nfor color in colors:\n    print(color)\n```\n:::\n\n\nTo iterate over several sequences at the same time, use `zip`\n\n::: {#87e8755c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:15.578703Z\",\"start_time\":\"2021-01-15T08:35:15.574575Z\"}' execution_count=166}\n``` {.python .cell-code}\nfor color, people in zip(colors, peoples):\n    print(color, people)\n```\n:::\n\n\n::: {#b52ef495 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:15.787784Z\",\"start_time\":\"2021-01-15T08:35:15.781691Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=167}\n``` {.python .cell-code}\nl = [\"Bonjour\", {'francis': 5214, 'stephane': 5123}, ('truc', 3)]\nfor e in l:\n    print(e, len(e))\n```\n:::\n\n\n**Loop over a `str`**\n\n::: {#3cf191df .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:16.284944Z\",\"start_time\":\"2021-01-15T08:35:16.279583Z\"}' execution_count=168}\n``` {.python .cell-code}\ns = 'Bonjour'\nfor c in s:\n    print(c)\n```\n:::\n\n\n**Loop over a `dict`**\n\n::: {#feee5e1e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:24.915816Z\",\"start_time\":\"2021-01-15T08:35:24.910552Z\"}' execution_count=169}\n``` {.python .cell-code}\ndd = {(1, 3): {'hello', 'world'}, 'truc': [1, 2, 3], 5: (1, 4, 2)}\n\n# Default is to loop over keys\nfor key in dd:\n    print(key)\n```\n:::\n\n\n::: {#7a0bfba2 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:25.116664Z\",\"start_time\":\"2021-01-15T08:35:25.112459Z\"}' execution_count=170}\n``` {.python .cell-code}\n# Loop over values\nfor e in dd.values():\n    print(e)\n```\n:::\n\n\n::: {#8ce9e79c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:25.253625Z\",\"start_time\":\"2021-01-15T08:35:25.248561Z\"}' execution_count=171}\n``` {.python .cell-code}\n# Loop over items (key, value) pairs\nfor key, val in dd.items():\n    print(key, val)\n```\n:::\n\n\n::: {#da17800a .cell execution_count=172}\n``` {.python .cell-code}\nfor t in dd.items():\n    print(t)\n```\n:::\n\n\n## Comprehensions\n\nYou can construct a `list`, `dict`, `set` and others using the **comprehension** syntax\n\n**`list` comprehension**\n\n::: {#cefbe0d6 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:27.023136Z\",\"start_time\":\"2021-01-15T08:35:27.016816Z\"}' execution_count=173}\n``` {.python .cell-code}\nprint(colors)\nprint(peoples)\n```\n:::\n\n\n::: {#8221a6d9 .cell execution_count=174}\n``` {.python .cell-code}\nl = []\nfor p, c in zip(peoples, colors):\n    if len(c)<=4 :\n        l.append(p)\nprint(l)\n```\n:::\n\n\n::: {#75d7cc75 .cell execution_count=175}\n``` {.python .cell-code}\n# The list of people with favorite color that has no more than 4 characters\n\n[people for color, people in zip(colors, peoples) if len(color) <= 4]\n```\n:::\n\n\n**`dict` comprehension**\n\n::: {#5aa4014c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:29.425720Z\",\"start_time\":\"2021-01-15T08:35:29.418729Z\"}' execution_count=176}\n``` {.python .cell-code}\n{people: color for color, people in zip(colors, peoples) if len(color) <= 4}\n```\n:::\n\n\n::: {#3ab1017f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:29.650791Z\",\"start_time\":\"2021-01-15T08:35:29.645099Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=177}\n``` {.python .cell-code}\n# Allows to build a dict from two lists (for keys and values)\n{key: value for (key, value) in zip(peoples, colors)}\n```\n:::\n\n\n::: {#9738aa0f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:29.733037Z\",\"start_time\":\"2021-01-15T08:35:29.728275Z\"}' execution_count=178}\n``` {.python .cell-code}\n# But it's simpler (so better) to use\ndict(zip(peoples, colors))\n```\n:::\n\n\nSomething very convenient is `enumerate`\n\n::: {#96ac1864 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:34.108535Z\",\"start_time\":\"2021-01-15T08:35:34.101660Z\"}' execution_count=179}\n``` {.python .cell-code}\nfor i, color in enumerate(colors):\n    print(i, color)\n```\n:::\n\n\n::: {#b0e1ba0e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:34.308091Z\",\"start_time\":\"2021-01-15T08:35:34.302386Z\"}' execution_count=180}\n``` {.python .cell-code}\nlist(enumerate(colors))\n```\n:::\n\n\n::: {#b5a3f9b0 .cell execution_count=181}\n``` {.python .cell-code}\ndict(enumerate(s))\n```\n:::\n\n\n::: {#177f88c3 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:34.436719Z\",\"start_time\":\"2021-01-15T08:35:34.432315Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=182}\n``` {.python .cell-code}\nprint(dict(enumerate(s)))\n```\n:::\n\n\n::: {#3a9cf77f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:35.307514Z\",\"start_time\":\"2021-01-15T08:35:35.302402Z\"}' execution_count=183}\n``` {.python .cell-code}\ns = 'Hey everyone'\n{c: i for i, c in enumerate(s)}\n```\n:::\n\n\n## About functional programming\n\nWe can use `lambda` to define **anonymous** functions, and use them in the `map` and `reduce` functions\n\n::: {#4b374aab .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:37.077273Z\",\"start_time\":\"2021-01-15T08:35:37.071704Z\"}' execution_count=184}\n``` {.python .cell-code}\nsquare = lambda x: x ** 2\nsquare(2)\n```\n:::\n\n\n::: {#82e0fbee .cell execution_count=185}\n``` {.python .cell-code}\ntype(square)\n```\n:::\n\n\n::: {#206aa6c4 .cell execution_count=186}\n``` {.python .cell-code}\ndir(square)\n```\n:::\n\n\n::: {#a432b8e7 .cell execution_count=187}\n``` {.python .cell-code}\ns = \"a\"\n```\n:::\n\n\n::: {#98e68d0f .cell execution_count=188}\n``` {.python .cell-code}\ntry:\n    square(\"a\")\nexcept TypeError:\n    print(\"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\")\n```\n:::\n\n\n::: {#5d986f64 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:37.269771Z\",\"start_time\":\"2021-01-15T08:35:37.265389Z\"}' execution_count=189}\n``` {.python .cell-code}\nsum2 = lambda a, b: a + b\nprint(sum2('Hello', ' world'))\nprint(sum2(1, 2))\n```\n:::\n\n\nIntended for short and one-line function. \n\nMore complex functions use `def` (see below)\n\n## Exercise\n\nPrint the squares of even numbers between 0 et 15\n\n1. Using a list comprehension as before\n2. Using `map`\n\n::: {.content-visible when-profile='solution'} \n\n::: {#a185e70f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:45.251215Z\",\"start_time\":\"2021-01-15T08:35:45.245421Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=190}\n``` {.python .cell-code}\n# Answer to 1.\n[i ** 2 for i in range(15) if i % 2 == 0]\n```\n:::\n\n\n::: {#657c432e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:46.363026Z\",\"start_time\":\"2021-01-15T08:35:46.357149Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=191}\n``` {.python .cell-code}\n# Answer to 2. \nlist(map(lambda x: x ** 2, range(0, 15, 2)))\n```\n:::\n\n\n**Remark**. We will see later why we need to use `list` above\n\n::: {#82249f50 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:49.386681Z\",\"start_time\":\"2021-01-15T08:35:49.380699Z\"}' execution_count=192}\n``` {.python .cell-code}\nmap(lambda x: x ** 2, range(0, 15, 2))\n```\n:::\n\n\nNow, to get the sum of these squares, we can use `sum`\n\n::: {#e02376af .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:49.730719Z\",\"start_time\":\"2021-01-15T08:35:49.725389Z\"}' execution_count=193}\n``` {.python .cell-code}\nsum(map(lambda x: x ** 2, range(0, 15, 2)))\n```\n:::\n\n\nWe can also use `reduce` (not a good idea here, but it's good to know that it exists)\n\n::: {#47de13af .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:50.125792Z\",\"start_time\":\"2021-01-15T08:35:50.119351Z\"}' execution_count=194}\n``` {.python .cell-code}\nfrom functools import reduce\n\nreduce(lambda a, b: a + b, map(lambda x: x ** 2, range(0, 15, 2)))\n```\n:::\n\n\nThere is also something that can be useful in `functool` called `partial`\n\nIt allows to **simplify** functions by freezing some arguments\n\n::: {#556e0d71 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:51.690112Z\",\"start_time\":\"2021-01-15T08:35:51.683874Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=195}\n``` {.python .cell-code}\nfrom functools import partial\n\ndef mult(a, b):\n    return a * b\n\ndouble = partial(mult, b=2)\ndouble(2) \n```\n:::\n\n\n:::\n\n## Brain-teasing\n\nWhat is the output of\n\n::: {#433e2981 .cell execution_count=196}\n``` {.python .cell-code}\nreduce(lambda a, b: a + b[0] * b[1], enumerate('abcde'), 'A')\n```\n:::\n\n\n::: {.content-visible when-profile='solution'} \n\n::: {#1230eeb7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:53.480678Z\",\"start_time\":\"2021-01-15T08:35:53.474794Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=197}\n``` {.python .cell-code}\nreduce(lambda a, b: a + b[0] * b[1], enumerate('abcde'), 'A')\n```\n:::\n\n\nThis does the following\n\n::: {#18cdd47c .cell execution_count=198}\n``` {.python .cell-code}\nlist(enumerate('abcde'))\n```\n:::\n\n\n::: {#86aa44b8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:55.504410Z\",\"start_time\":\"2021-01-15T08:35:55.498980Z\"}' execution_count=199}\n``` {.python .cell-code}\n((((('A' + 0 * 'a') + 1 * 'b') + 2 * 'c') + 3 * 'd') + 4 * 'e')\n```\n:::\n\n\n:::\n\n\n# Generators\n\n::: {#801983e9 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:00.984160Z\",\"start_time\":\"2021-01-15T08:36:00.402833Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=200}\n``` {.python .cell-code}\nimport sys\nimport matplotlib.pyplot as plt\n%matplotlib inline\n```\n:::\n\n\n::: {#a436c888 .cell execution_count=201}\n``` {.python .cell-code}\nplt.figure(figsize=(6, 6))\nplt.plot([sys.getsizeof(list(range(i))) for i in range(10000)], lw=3)\nplt.plot([sys.getsizeof(range(i)) for i in range(10000)], lw=3)\nplt.xlabel('Number of elements (value of i)', fontsize=14)\nplt.ylabel('Size (in bytes)', fontsize=14)\n_ = plt.legend(['list(range(i))', 'range(i)'], fontsize=16)\n```\n:::\n\n\n## Why generators ?\n\nThe memory used by `range(i)` does not scale linearly with `i`\n\nWhat is happening ?\n\n- `range(n)` does not allocate a list of `n` elements ! \n- It **generates on the fly** the list of required integers\n- We say that such an object behaves like a **generator** in `Python`\n- Many things in the `Python` standard library behaves like this\n\n\n**Warning.** Getting the real memory footprint of a `Python` object is difficult. \nNote that `sizeof` calls the `__sizeof__` method of `r`, which does not give in general the actual memory used by an object. But nevermind here.\n\nThe following computation has no memory footprint:\n\n::: {#ae6691d4 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:17.535131Z\",\"start_time\":\"2021-01-15T08:36:16.258179Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=202}\n``` {.python .cell-code}\nsum(range(10**8))\n```\n:::\n\n\n::: {#efa9c44a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:17.541785Z\",\"start_time\":\"2021-01-15T08:36:17.537229Z\"}' execution_count=203}\n``` {.python .cell-code}\nmap(lambda x: x**2, range(10**7))\n```\n:::\n\n\n`map` does not return a `list` for the same reason\n\n::: {#368f0709 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:17.817857Z\",\"start_time\":\"2021-01-15T08:36:17.544451Z\"}' execution_count=204}\n``` {.python .cell-code}\nsum(map(lambda x: x**2, range(10**6)))\n```\n:::\n\n\n## Generator expression\n\nNamely generators defined through comprehensions.\nJust replace `[]` by `()` in the comprehension.\n\nA generator can be iterated on only **once**\n\n::: {#38dd6625 .cell execution_count=205}\n``` {.python .cell-code}\nrange(10)\n```\n:::\n\n\n::: {#d11d1d12 .cell execution_count=206}\n``` {.python .cell-code}\ncarres = (i**2 for i in range(10))\n```\n:::\n\n\n::: {#56db440a .cell execution_count=207}\n``` {.python .cell-code}\ncarres\n```\n:::\n\n\n::: {#b8c4cfca .cell execution_count=208}\n``` {.python .cell-code}\nfor c in carres:\n    print(c)\n```\n:::\n\n\n::: {#a8f038ff .cell execution_count=209}\n``` {.python .cell-code}\nfor i in range(4):\n    for j in range(3):\n        print(i, j)\n```\n:::\n\n\n::: {#d3a40d0a .cell execution_count=210}\n``` {.python .cell-code}\nfrom itertools import product\n\nfor t in product(range(4), range(3)):\n    print(t)\n```\n:::\n\n\n::: {#76fad407 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:19.688387Z\",\"start_time\":\"2021-01-15T08:36:19.683024Z\"}' execution_count=211}\n``` {.python .cell-code}\nfrom itertools import product\n\ngene = (i + j for i, j in product(range(3), range(3)))\ngene\n```\n:::\n\n\n::: {#fa804353 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:19.886398Z\",\"start_time\":\"2021-01-15T08:36:19.879904Z\"}' execution_count=212}\n``` {.python .cell-code}\nprint(list(gene))\nprint(list(gene))\n```\n:::\n\n\n## `yield`\n\nSomething very powerful\n\n::: {#2e5124a6 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:21.518680Z\",\"start_time\":\"2021-01-15T08:36:21.514939Z\"}' execution_count=213}\n``` {.python .cell-code}\ndef startswith(words, letter):\n    for word in words:\n        if word.startswith(letter):\n            yield word\n```\n:::\n\n\n::: {#266f43f7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:21.681758Z\",\"start_time\":\"2021-01-15T08:36:21.676154Z\"}' execution_count=214}\n``` {.python .cell-code}\nwords = [\n    'Python', \"is\", 'awesome', 'in', 'particular', 'generators', \n    'are', 'really', 'cool'\n]\n```\n:::\n\n\n::: {#7a1320eb .cell execution_count=215}\n``` {.python .cell-code}\nlist(word for word in words if word.startswith(\"a\"))\n```\n:::\n\n\n::: {#6254681f .cell execution_count=216}\n``` {.python .cell-code}\na = 2\n```\n:::\n\n\n::: {#f0aee02e .cell execution_count=217}\n``` {.python .cell-code}\nfloat(a)\n```\n:::\n\n\nBut also with a `for` loop\n\n::: {#a5f2466e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:25.112354Z\",\"start_time\":\"2021-01-15T08:36:25.107107Z\"}' execution_count=218}\n``` {.python .cell-code}\nfor word in startswith(words, letter='a'):\n    print(word)\n```\n:::\n\n\n::: {#6783d3a1 .cell execution_count=219}\n``` {.python .cell-code}\nit = startswith(words, letter='a')\n```\n:::\n\n\n::: {#b42b4d6b .cell execution_count=220}\n``` {.python .cell-code}\ntype(it)\n```\n:::\n\n\n::: {#174386b0 .cell execution_count=221}\n``` {.python .cell-code}\nnext(it)\n```\n:::\n\n\n::: {#bc0853c6 .cell execution_count=222}\n``` {.python .cell-code}\nnext(it)\n```\n:::\n\n\n::: {#7fc84a84 .cell execution_count=223}\n``` {.python .cell-code}\ntry:\n    next(it)\nexcept StopIteration:\n    print(\"StopIteration exception!\")\n```\n:::\n\n\n# A glimpse at the ` collections` module\n\n(This is where the good stuff hides)\n\n::: {#bff2480c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:26.046700Z\",\"start_time\":\"2021-01-15T08:36:26.041712Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=224}\n``` {.python .cell-code}\ntexte = \"\"\"             \nBonjour,\nPython c'est super.\nPython ca a l'air quand même un peu compliqué.\nMais bon, ca a l'air pratique.\nPeut-être que je pourrais m'en servir pour faire des trucs super.\n\"\"\"\ntexte\n```\n:::\n\n\n::: {#00704310 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:28.485696Z\",\"start_time\":\"2021-01-15T08:36:28.481795Z\"}' execution_count=225}\n``` {.python .cell-code}\nprint(texte)\n```\n:::\n\n\n::: {#11d4f610 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:28.891498Z\",\"start_time\":\"2021-01-15T08:36:28.886862Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=226}\n``` {.python .cell-code}\n# Some basic text preprocessing \nnew_text = (\n    texte\n    .strip()\n    .replace('\\n', ' ')\n    .replace(',', ' ')\n    .replace('.', ' ')\n    .replace(\"'\", ' ')\n)\n\nprint(new_text)\nprint('-' * 8)\n\nwords = new_text.split()\nprint(words)\n```\n:::\n\n\n## Exercise \n\nCount the number of occurences of all the words in `words`. \n\nOutput must be a dictionary containg ``word: count``\n\n::: {#ae81855d .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:30.579563Z\",\"start_time\":\"2021-01-15T08:36:30.573645Z\"}' execution_count=227}\n``` {.python .cell-code}\nprint(words)\n```\n:::\n\n\n::: {.content-visible when-profile='solution'} \n\n### Solution 1: hand-made\n\n::: {#0d29ab5f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:32.221188Z\",\"start_time\":\"2021-01-15T08:36:32.216317Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=228}\n``` {.python .cell-code}\nwords_counts = {}\nfor word in words:\n    if word in words_counts:\n        words_counts[word] += 1\n    else:\n        words_counts[word] = 1\n\nprint(words_counts)\n```\n:::\n\n\n:::\n\n::: {.content-visible when-profile='solution'} \n\n### Solution 2: using `defaultdict`\n\n::: {#8decf71b .cell execution_count=229}\n``` {.python .cell-code}\nint()\n```\n:::\n\n\n::: {#2a200da8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:32.539800Z\",\"start_time\":\"2021-01-15T08:36:32.534351Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=230}\n``` {.python .cell-code}\nfrom collections import defaultdict\n\nwords_counts = defaultdict(int)\nfor word in words:\n    words_counts[word] += 1\n\nprint(words_counts)\n```\n:::\n\n\n- `defaultdict` can be extremely useful\n- A dict with a default value: here an `int` is created (defaults to 0) if key is not found\n- Allows to avoid a test\n\n### About `defaultdict`\n\n- the argument must be a \"callable\" (something that can be called)\n- Beware: as soon as a key is searched, a default value is added to the `defaultdict`\n\n::: {#9d1a39d9 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:43.344984Z\",\"start_time\":\"2021-01-15T08:36:43.340012Z\"}' execution_count=231}\n``` {.python .cell-code}\naddresses = defaultdict(lambda: 'unknown')\naddresses['huyen']\naddresses['stephane'] = '8 place Aurelie Nemours'\nprint(addresses)\n```\n:::\n\n\n::: {#564fbd48 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:43.539021Z\",\"start_time\":\"2021-01-15T08:36:43.533855Z\"}' execution_count=232}\n``` {.python .cell-code}\n# Somewhat nasty...\nprint('jean-francois' in addresses)\nprint(addresses['jean-francois'])\nprint('jean-francois' in addresses)\n```\n:::\n\n\n:::\n\n::: {.content-visible when-profile='solution'} \n\n### Solution 3. Don't do it by hand ! Use `counter`\n\n::: {#e5bf1e55 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:47.448243Z\",\"start_time\":\"2021-01-15T08:36:47.442365Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=233}\n``` {.python .cell-code}\nfrom collections import Counter\n\nprint(dict(Counter(words)))\n```\n:::\n\n\n`Counter` counts the number of occurences of all objects in an iterable\n\n**Question.** Which one do you prefer ?\n\n- The `Counter` one right ?\n\n### Morality\n\n- When you need to do something, assume that there is a tool to do it directly \n\n- If you can't find it, ask `google` or `stackoverflow`\n\n- Otherwise, try to do it as simply as possible\n\n:::\n\n## Exercise \n\nCompute the number of occurences AND the length of each word in `words`.\n\nOutput must be a dictionary containing ``word: (count, length)``\n\n::: {.content-visible when-profile='solution'} \n\n### Solution\n\n::: {#1be6c6a8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:59.414057Z\",\"start_time\":\"2021-01-15T08:36:59.406260Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=234}\n``` {.python .cell-code}\nfrom collections import Counter\n\n{word: (count, len(word)) for word, count in Counter(words).items()}\n```\n:::\n\n\n## The `namedtuple`\n\nThere is also the `namedtuple`. It's a `tuple` but with named attributes\n\n::: {#31ef92d4 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:37:03.255687Z\",\"start_time\":\"2021-01-15T08:37:03.249481Z\"}' execution_count=235}\n``` {.python .cell-code}\nfrom collections import namedtuple\n\nJedi = namedtuple('Jedi', ['firstname', 'lastname', 'age', 'color'])\nyoda = Jedi('Minch', 'Yoda', 900, 'green')\nyoda\n```\n:::\n\n\n::: {#2c9fbeda .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:37:03.466246Z\",\"start_time\":\"2021-01-15T08:37:03.460414Z\"}' execution_count=236}\n``` {.python .cell-code}\nyoda.firstname\n```\n:::\n\n\n::: {#72e0cd8f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:37:03.594771Z\",\"start_time\":\"2021-01-15T08:37:03.589467Z\"}' execution_count=237}\n``` {.python .cell-code}\nyoda[1]\n```\n:::\n\n\n**Remark.** A better alternative since `Python 3.7` is dataclasses. We will talk about it later\n\n:::\n\n# I/O, reading and writing files\n\nNext, put a text file `miserables.txt` in the folder containing \nthis notebook.  If it is not there, the next cell downloads it, if is it there, then we do nothing.\n\n::: {#866a0d4e .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:18:44.977524Z\",\"start_time\":\"2021-01-15T09:18:44.691253Z\"}' execution_count=238}\n``` {.python .cell-code}\nimport requests\nimport os\n\n# The path containing your notebook\npath_data = './'\n# The name of the file\nfilename = 'miserables.txt'\n\nif os.path.exists(os.path.join(path_data, filename)):\n    print('The file %s already exists.' % os.path.join(path_data, filename))\nelse:\n    url = 'https://stephanegaiffas.github.io/big_data_course/data/miserables.txt'\n    r = requests.get(url)\n    with open(os.path.join(path_data, filename), 'wb') as f:\n        f.write(r.content)\n    print('Downloaded file %s.' % os.path.join(path_data, filename))\n```\n:::\n\n\n::: {#bcee8661 .cell execution_count=239}\n``` {.python .cell-code}\nls -alh\n```\n:::\n\n\n::: {#9d7fe56b .cell execution_count=240}\n``` {.python .cell-code}\n# !rm -f miserables.txt\n```\n:::\n\n\n::: {#bdd45dbe .cell execution_count=241}\n``` {.python .cell-code}\nos.path.join(path_data, filename)\n```\n:::\n\n\nIn `jupyter` and `ipython` you can run terminal command lines using `!`\n\nLet's count number of lines and number of words with the `wc` command-line tool (linux or mac only, don't ask me how on windows)\n\n::: {#1c599418 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:39:34.789525Z\",\"start_time\":\"2021-01-15T08:39:34.498167Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=242}\n``` {.python .cell-code}\n# Lines count\n!wc -l miserables.txt\n```\n:::\n\n\n::: {#7f8c14c2 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:39:35.525235Z\",\"start_time\":\"2021-01-15T08:39:35.244691Z\"}' execution_count=243}\n``` {.python .cell-code}\n# Word count\n!wc -w miserables.txt\n```\n:::\n\n\n## Exercise\n\nCount the number of occurences of each word in the text file `miserables.txt`.\nWe use a `open` *context* and the `Counter` from before.\n\n::: {.content-visible when-profile='solution'} \n\n### Solution\n\n::: {#681d8c8c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:39:38.300109Z\",\"start_time\":\"2021-01-15T08:39:38.073213Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=244}\n``` {.python .cell-code}\nfrom collections import Counter\n\ncounter = Counter()\n\nwith open('miserables.txt', encoding='utf8') as f:\n    for line_idx, line in enumerate(f):\n        line = line.strip().replace('\\n', ' ')\\\n            .replace(',', ' ')\\\n            .replace('.', ' ')\\\n            .replace('»', ' ')\\\n            .replace('-', ' ')\\\n            .replace('!', ' ')\\\n            .replace('(', ' ')\\\n            .replace(')', ' ')\\\n            .replace('?', ' ').split()\n\n        counter.update(line)\n```\n:::\n\n\n::: {#2b4da0cc .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:39:40.361408Z\",\"start_time\":\"2021-01-15T08:39:40.332944Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=245}\n``` {.python .cell-code}\ncounter\n```\n:::\n\n\n::: {#77a6405e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:39:40.577854Z\",\"start_time\":\"2021-01-15T08:39:40.547026Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=246}\n``` {.python .cell-code}\ncounter.most_common(500)\n```\n:::\n\n\n:::\n\n\n## Contexts \n\n- A *context* in Python is something that we use with the `with` keyword.\n\n- It allows to deal automatically with the opening and the closing of the file.\n\nNote the for loop:\n```python\nfor line in f:\n    ...\n```\nYou loop directly over the lines of the open file from **within** the `open` context\n\n## About `pickle`\n\nYou can save your computation with `pickle`. \n\n- `pickle` is a way of saving **almost anything** with Python.\n- It serializes the object in a binary format, and is usually the simplest and fastest way to go.\n\n::: {#03bdfc44 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:19.146250Z\",\"start_time\":\"2021-01-15T08:40:19.105800Z\"}' execution_count=247}\n``` {.python .cell-code}\nimport pickle as pkl\n\n# Let's save it\nwith open('miserable_word_counts.pkl', 'wb') as f:\n    pkl.dump(counter, f)\n\n# And read it again\nwith open('miserable_word_counts.pkl', 'rb') as f:\n    counter = pkl.load(f)\n```\n:::\n\n\n::: {#857f6f89 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:20.330093Z\",\"start_time\":\"2021-01-15T08:40:20.320482Z\"}' execution_count=248}\n``` {.python .cell-code}\ncounter.most_common(10)\n```\n:::\n\n\n# Defining functions\n\nYou **must** use function to order and reuse code\n\n## Function definition\n\nFunction blocks must be indented as other control-flow blocks.\n\n::: {#50b13483 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:22.581564Z\",\"start_time\":\"2021-01-15T08:40:22.574422Z\"}' execution_count=249}\n``` {.python .cell-code}\ndef test():\n    return 'in test function'\n\ntest()\n```\n:::\n\n\n## Return statement\n\nFunctions can *optionally* return values.\nBy default, functions return ``None``.\n\nThe syntax to define a function:\n\n- the ``def`` keyword;\n- is followed by the function's **name**, then\n- the arguments of the function are given between parentheses followed by a colon\n- the function body;\n- and ``return object`` for optionally returning values.\n\n::: {#4675c507 .cell execution_count=250}\n``` {.python .cell-code}\nNone is None\n```\n:::\n\n\n::: {#7c9ebe87 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:25.396369Z\",\"start_time\":\"2021-01-15T08:40:25.389580Z\"}' execution_count=251}\n``` {.python .cell-code}\ndef f(x):\n    return x + 10\nf(20)\n```\n:::\n\n\nA function that returns several elements returns a `tuple`\n\n::: {#7f5619cd .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:25.827300Z\",\"start_time\":\"2021-01-15T08:40:25.821162Z\"}' execution_count=252}\n``` {.python .cell-code}\ndef f(x):\n    return x + 1, x + 4\n\nf(5)\n```\n:::\n\n\n::: {#75747797 .cell execution_count=253}\n``` {.python .cell-code}\ntype(f)\n```\n:::\n\n\n::: {#02499d4b .cell execution_count=254}\n``` {.python .cell-code}\nf.truc = \"bonjour\"\n```\n:::\n\n\n::: {#6d1db16b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:26.056197Z\",\"start_time\":\"2021-01-15T08:40:26.050039Z\"}' execution_count=255}\n``` {.python .cell-code}\ntype(f(5))\n```\n:::\n\n\n## Parameters\n\nMandatory parameters (positional arguments)\n\n::: {#61de25fb .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:26.897893Z\",\"start_time\":\"2021-01-15T08:40:26.891052Z\"}' execution_count=256}\n``` {.python .cell-code}\ndef double_it(x):\n    return x * 2\n\ndouble_it(2)\n```\n:::\n\n\n::: {#c8bd6569 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:27.154900Z\",\"start_time\":\"2021-01-15T08:40:27.127912Z\"}' execution_count=257}\n``` {.python .cell-code}\ntry:\n    double_it()\nexcept TypeError:\n    print(\"TypeError: double_it() missing 1 required positional argument: 'x'\")\n```\n:::\n\n\nOptimal parameters\n\n::: {#d01c6c6c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:28.071546Z\",\"start_time\":\"2021-01-15T08:40:28.065551Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=258}\n``` {.python .cell-code}\ndef double_it(x=2):\n    return x * 2\n\ndouble_it()\n```\n:::\n\n\n::: {#48acf066 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:30.162845Z\",\"start_time\":\"2021-01-15T08:40:30.155840Z\"}' execution_count=259}\n``` {.python .cell-code}\ndouble_it(3)\n```\n:::\n\n\n::: {#a4152aae .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:30.451386Z\",\"start_time\":\"2021-01-15T08:40:30.446933Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=260}\n``` {.python .cell-code}\ndef f(x, y=2, z=10):\n    print(x, '+', y, '+', z, '=', x + y + z)\n```\n:::\n\n\n::: {#e05b841f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:30.696765Z\",\"start_time\":\"2021-01-15T08:40:30.691179Z\"}' execution_count=261}\n``` {.python .cell-code}\nf(5)\n```\n:::\n\n\n::: {#0ae01e9f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:31.857293Z\",\"start_time\":\"2021-01-15T08:40:31.851956Z\"}' execution_count=262}\n``` {.python .cell-code}\nf(5, -2)\n```\n:::\n\n\n::: {#31c2cf56 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:32.095421Z\",\"start_time\":\"2021-01-15T08:40:32.089684Z\"}' execution_count=263}\n``` {.python .cell-code}\nf(5, -2, 8)\n```\n:::\n\n\n::: {#0b00fb8c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:32.310466Z\",\"start_time\":\"2021-01-15T08:40:32.304981Z\"}' execution_count=264}\n``` {.python .cell-code}\nf(z=5, x=-2, y=8)\n```\n:::\n\n\n## Argument unpacking and keyword argument unpacking\n\nYou can do stuff like this, using unpacking `*` notation\n\n::: {#00f8e3f4 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:32.767851Z\",\"start_time\":\"2021-01-15T08:40:32.762760Z\"}' execution_count=265}\n``` {.python .cell-code}\na, *b, c = 1, 2, 3, 4, 5\na, b, c\n```\n:::\n\n\nBack to function `f` you can unpack a `tuple` as positional arguments\n\n::: {#fec416b8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:33.123879Z\",\"start_time\":\"2021-01-15T08:40:33.117094Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=266}\n``` {.python .cell-code}\ntt = (1, 2, 3)\nf(*tt)\n```\n:::\n\n\n::: {#b202ea39 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:33.344119Z\",\"start_time\":\"2021-01-15T08:40:33.339429Z\"}' execution_count=267}\n``` {.python .cell-code}\ndd = {'y': 10, 'z': -5}\n```\n:::\n\n\n::: {#7a29731c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:33.503933Z\",\"start_time\":\"2021-01-15T08:40:33.497965Z\"}' execution_count=268}\n``` {.python .cell-code}\nf(3, **dd)\n```\n:::\n\n\n::: {#154059a5 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:33.713710Z\",\"start_time\":\"2021-01-15T08:40:33.708290Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=269}\n``` {.python .cell-code}\ndef g(x, z, y, t=1, u=2):\n    print(x, '+', y, '+', z, '+', t, '+', \n          u, '=', x + y + z + t + u)\n```\n:::\n\n\n::: {#f4fdf3d5 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:33.853331Z\",\"start_time\":\"2021-01-15T08:40:33.847946Z\"}' execution_count=270}\n``` {.python .cell-code}\ntt = (1, -4, 2)\ndd = {'t': 10, 'u': -5}\ng(*tt, **dd)\n```\n:::\n\n\n## The prototype of all functions in `Python`\n\n::: {#6554ae5d .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:34.122929Z\",\"start_time\":\"2021-01-15T08:40:34.118269Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=271}\n``` {.python .cell-code}\ndef f(*args, **kwargs):\n    print('args=', args)\n    print('kwargs=', kwargs)\n\nf(1, 2, 'truc', lastname='gaiffas', firstname='stephane')\n```\n:::\n\n\n- Uses `*` for **argument unpacking** and `**` for **keyword argument unpacking**\n- The names `args` and `kwargs` are a convention, not mandatory \n- (but you are fired if you name these arguments otherwise)\n\n::: {#e3d79d27 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:34.735447Z\",\"start_time\":\"2021-01-15T08:40:34.728777Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=272}\n``` {.python .cell-code}\n# How to get fired\ndef f(*aaa, **bbb):\n    print('args=', aaa)\n    print('kwargs=', bbb)\nf(1, 2, 'truc', lastname='gaiffas', firstname='stephane')    \n```\n:::\n\n\n**Remark**. A function is a regular an object... you can add attributes on it !\n\n::: {#625805dd .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:34.887176Z\",\"start_time\":\"2021-01-15T08:40:34.884378Z\"}' execution_count=273}\n``` {.python .cell-code}\nf.truc = 4\n```\n:::\n\n\n::: {#c710a506 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:34.968083Z\",\"start_time\":\"2021-01-15T08:40:34.963229Z\"}' execution_count=274}\n``` {.python .cell-code}\nf(1, 3)\n```\n:::\n\n\n::: {#91322335 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:35.082074Z\",\"start_time\":\"2021-01-15T08:40:35.076581Z\"}' execution_count=275}\n``` {.python .cell-code}\nf(3, -2, y='truc')\n```\n:::\n\n\n# Object-oriented programming (OOP)\n\nPython supports object-oriented programming (OOP). The goals of OOP are:\n\n- to organize the code, and\n- to re-use code in similar contexts.\n\nHere is a small example: we create a `Student` class, which is an object\ngathering several custom functions (called *methods*) and variables \n(called *attributes*).\n\n::: {#73883b1a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:35.228158Z\",\"start_time\":\"2021-01-15T08:40:35.221388Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=276}\n``` {.python .cell-code}\nclass Student(object):\n\n    def __init__(self, name, birthyear, major='computer science'):\n        self.name = name\n        self.birthyear = birthyear\n        self.major = major\n\n    def __repr__(self):\n        return \"Student(name='{name}', birthyear={birthyear}, major='{major}')\"\\\n                .format(name=self.name, birthyear=self.birthyear, major=self.major)\n\nanna = Student('anna', 1987)\nanna\n```\n:::\n\n\nThe `__repr__` is what we call a 'magic method' in Python, that allows \nto display an object as a string easily. There is a very large number of such magic methods.\nThere are used to implement **interfaces**\n\n## Exercise \n\nAdd a `age` method to the Student class that computes the age of the student. \n- You  can (and should) use the `datetime` module. \n- Since we only know about the birth year, let's assume that the day of the birth is January, 1st.\n\n::: {.content-visible when-profile='solution'} \n\n### Correction\n\n::: {#8450bcff .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:38.739250Z\",\"start_time\":\"2021-01-15T08:40:38.731816Z\"}' execution_count=277}\n``` {.python .cell-code}\nfrom datetime import datetime\n\nclass Student(object):\n\n    def __init__(self, name, birthyear, major='computer science'):\n        self.name = name\n        self.birthyear = birthyear\n        self.major = major\n\n    def __repr__(self):\n        return \"Student(name='{name}', birthyear={birthyear}, major='{major}')\"\\\n                .format(name=self.name, birthyear=self.birthyear, major=self.major)\n\n    def age(self):\n        return datetime.now().year - self.birthyear\n        \nanna = Student('anna', 1987)\nanna.age()\n```\n:::\n\n\n:::\n\n\n## Properties\n\nWe can make methods look like attributes using **properties**, as shown below\n\n::: {#414154e0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:41.454538Z\",\"start_time\":\"2021-01-15T08:40:41.447007Z\"}' execution_count=278}\n``` {.python .cell-code}\nclass Student(object):\n\n    def __init__(self, name, birthyear, major='computer science'):\n        self.name = name\n        self.birthyear = birthyear\n        self.major = major\n\n    def __repr__(self):\n        return \"Student(name='{name}', birthyear={birthyear}, major='{major}')\"\\\n                .format(name=self.name, birthyear=self.birthyear, major=self.major)\n\n    @property\n    def age(self):\n        return datetime.now().year - self.birthyear\n        \nanna = Student('anna', 1987)\nanna.age\n```\n:::\n\n\n## Inheritance \n\nA `MasterStudent` is a `Student` with a new extra mandatory `internship` attribute\n\n::: {#f7f4644a .cell execution_count=279}\n``` {.python .cell-code}\n\"%d\" % 2\n```\n:::\n\n\n::: {#50cc347f .cell execution_count=280}\n``` {.python .cell-code}\nx = 2\n\nf\"truc {x}\"\n```\n:::\n\n\n::: {#2022bd3f .cell execution_count=281}\n``` {.python .cell-code}\nclass MasterStudent(Student):\n    \n    def __init__(self, name, age, internship, major='computer science'):\n        # Student.__init__(self, name, age, major)\n        Student.__init__(self, name, age, major)\n        self.internship = internship\n\n    def __repr__(self):\n        return f\"MasterStudent(name='{self.name}', internship={self.internship}, birthyear={self.birthyear}, major={self.major})\"\n    \nMasterStudent('djalil', 22, 'pwc')\n```\n:::\n\n\n::: {#6955f276 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:44.047633Z\",\"start_time\":\"2021-01-15T08:40:44.039779Z\"}' execution_count=282}\n``` {.python .cell-code}\nclass MasterStudent(Student):\n    \n    def __init__(self, name, age, internship, major='computer science'):\n        # Student.__init__(self, name, age, major)\n        Student.__init__(self, name, age, major)\n        self.internship = internship\n\n    def __repr__(self):\n        return \"MasterStudent(name='{name}', internship='{internship}'\" \\\n               \", birthyear={birthyear}, major='{major}')\"\\\n                .format(name=self.name, internship=self.internship,\n                        birthyear=self.birthyear, major=self.major)\n    \ndjalil = MasterStudent('djalil', 1996, 'pwc')\n```\n:::\n\n\n::: {#3370d90d .cell execution_count=283}\n``` {.python .cell-code}\ndjalil.__dict__\n```\n:::\n\n\n::: {#0054e130 .cell execution_count=284}\n``` {.python .cell-code}\ndjalil.birthyear\n```\n:::\n\n\n::: {#68aef232 .cell execution_count=285}\n``` {.python .cell-code}\ndjalil.__dict__[\"birthyear\"]\n```\n:::\n\n\n## Monkey patching\n\n- Classes in `Python`  are `objects` and actually `dict`s under the hood...\n- Therefore classes are objects that can be changed on the fly\n\n::: {#0b5c6025 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:44.745686Z\",\"start_time\":\"2021-01-15T08:40:44.739499Z\"}' execution_count=286}\n``` {.python .cell-code}\nclass Monkey(object):\n    \n    def __init__(self, name):\n        self.name = name\n\n    def describe(self):\n        print(\"Old monkey %s\" % self.name)\n\ndef patch(self):\n    print(\"New monkey %s\" % self.name)\n\nmonkey = Monkey(\"Baloo\")\nmonkey.describe()\n\nMonkey.describe = patch\nmonkey.describe()\n```\n:::\n\n\n::: {#882aa349 .cell execution_count=287}\n``` {.python .cell-code}\nmonkeys = [Monkey(\"Baloo\"), Monkey(\"Super singe\")]\n\n\nmonkey_name = monkey.name\n\nfor i in range(1000):    \n    monkey_name\n```\n:::\n\n\n## Data classes\n\nSince `Python 3.7` you can use a dataclass for this\n\nDoes a lot of work for you (produces the `__repr__` among many other things for you)\n\n::: {#09d6983b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:46.810275Z\",\"start_time\":\"2021-01-15T08:40:46.796524Z\"}' execution_count=288}\n``` {.python .cell-code}\nfrom dataclasses import dataclass\nfrom datetime import datetime \n\n@dataclass\nclass Student(object):\n    name: str\n    birthyear: int\n    major: str = 'computer science'\n\n    @property\n    def age(self):\n        return datetime.now().year - self.birthyear\n        \nanna = Student(name=\"anna\", birthyear=1987)\nanna\n```\n:::\n\n\n::: {#72c495f7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:47.251530Z\",\"start_time\":\"2021-01-15T08:40:47.246324Z\"}' execution_count=289}\n``` {.python .cell-code}\nprint(anna.age)\n```\n:::\n\n\n# Most common mistakes\n\n- Let us wrap this up with the most common mistakes with `Python`\n\nFirst, best way to learn and practice:\n\n- Start with the official tutorial https://docs.python.org/fr/3/tutorial/index.html\n\n- Look at https://python-3-for-scientists.readthedocs.io/en/latest/index.html\n\n- Continue with the documentation at https://docs.python.org/fr/3/index.html and work!\n\n## Using a mutable value as a default value\n\n::: {#dda8b0e8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:51.446805Z\",\"start_time\":\"2021-01-15T08:40:51.441178Z\"}' execution_count=290}\n``` {.python .cell-code}\ndef foo(bar=[]):\n    bar.append('oops')\n    return bar\n\nprint(foo())\nprint(foo())\nprint(foo())\n\nprint('-' * 8)\nprint(foo(['Ah ah']))\nprint(foo([]))\n```\n:::\n\n\n::: {#b43dd093 .cell execution_count=291}\n``` {.python .cell-code}\nprint(foo.__defaults__)\nfoo()\nprint(foo.__defaults__)\n```\n:::\n\n\n- The default value for a function argument is evaluated once, when the function is defined\n- `the` bar argument is initialized to its default (i.e., an empty list) only when foo() is first defined\n- successive calls to `foo()` (with no a `bar` argument specified) use the same list!\n\nOne should use instead\n\n::: {#299f2f1b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:52.916162Z\",\"start_time\":\"2021-01-15T08:40:52.908617Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=292}\n``` {.python .cell-code}\ndef foo(bar=None):\n    if bar is None:\n        bar = []\n    bar.append('oops')\n    return bar\n\nprint(foo())\nprint(foo())\nprint(foo())\nprint(foo(['OK']))\n```\n:::\n\n\n::: {#5c069be5 .cell execution_count=293}\n``` {.python .cell-code}\nprint(foo.__defaults__)\nfoo()\nprint(foo.__defaults__)\n```\n:::\n\n\nNo problem with immutable types\n\n::: {#ad471d7f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:53.337268Z\",\"start_time\":\"2021-01-15T08:40:53.330411Z\"}' execution_count=294}\n``` {.python .cell-code}\ndef foo(bar=()):\n    bar += ('oops',)\n    return bar\n\nprint(foo())\nprint(foo())\nprint(foo())\n```\n:::\n\n\n::: {#3675dcd8 .cell execution_count=295}\n``` {.python .cell-code}\nprint(foo.__defaults__)\n```\n:::\n\n\n## Class attributes VS object attributes\n\n::: {#979ad175 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:53.948439Z\",\"start_time\":\"2021-01-15T08:40:53.942319Z\"}' execution_count=296}\n``` {.python .cell-code}\nclass A(object):\n    x = 1\n\n    def __init__(self):\n        self.y = 2\n\nclass B(A):\n    def __init__(self):\n        super().__init__()\n\nclass C(A):\n    def __init__(self):\n        super().__init__()\n\na, b, c = A(), B(), C()\n```\n:::\n\n\n::: {#dcc473a0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:54.135498Z\",\"start_time\":\"2021-01-15T08:40:54.131029Z\"}' execution_count=297}\n``` {.python .cell-code}\nprint(a.x, b.x, c.x)\nprint(a.y, b.y, c.y)\n```\n:::\n\n\n::: {#7d728b05 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:54.858324Z\",\"start_time\":\"2021-01-15T08:40:54.853424Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=298}\n``` {.python .cell-code}\na.y = 3\nprint(a.y, b.y, c.y)\n```\n:::\n\n\n::: {#4ea88777 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:55.058452Z\",\"start_time\":\"2021-01-15T08:40:55.050679Z\"}' execution_count=299}\n``` {.python .cell-code}\na.x = 3  # Adds a new attribute named x in object a\nprint(a.x, b.x, c.x)\n```\n:::\n\n\n::: {#038cf940 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:55.812247Z\",\"start_time\":\"2021-01-15T08:40:55.805966Z\"}' execution_count=300}\n``` {.python .cell-code}\nA.x = 4 # Changes the class attribute x of class A\nprint(a.x, b.x, c.x)\n```\n:::\n\n\n- Attribute `x` is not an **attribute** of `b` nor `c`\n- It is also not a **class attribute** of classes `B` and `C`\n- So, it is is looked up in the base class `A`, which contains a **class attribute** `x`\n\nClasses and objects contain a hidden `dict` to store their attributes, and are accessed following a method resolution order (MRO)\n\n::: {#93380225 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:56.589556Z\",\"start_time\":\"2021-01-15T08:40:56.583455Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=301}\n``` {.python .cell-code}\na.__dict__, b.__dict__, c.__dict__\n```\n:::\n\n\n::: {#b7a2144f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:57.372472Z\",\"start_time\":\"2021-01-15T08:40:57.365176Z\"}' execution_count=302}\n``` {.python .cell-code}\nA.__dict__, B.__dict__, C.__dict__\n```\n:::\n\n\nThis can lead to **nasty** errors when using class attributes: learn more about this\n\n## Python scope rules\n\n::: {#dd627ef2 .cell execution_count=303}\n``` {.python .cell-code}\ntry:\n    ints += [4]\nexcept NameError:\n    print(\"NameError: name 'ints' is not defined\")\n```\n:::\n\n\n::: {#c1cb2f41 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:58.254394Z\",\"start_time\":\"2021-01-15T08:40:58.250379Z\"}' execution_count=304}\n``` {.python .cell-code}\nints = [1]\n\ndef foo1():\n    ints.append(2)\n    return ints\n\ndef foo2():\n    ints += [2]\n    return ints\n```\n:::\n\n\n::: {#234ca7c7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:58.471436Z\",\"start_time\":\"2021-01-15T08:40:58.464761Z\"}' execution_count=305}\n``` {.python .cell-code}\nfoo1()\n```\n:::\n\n\n::: {#c592afdc .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:58.668154Z\",\"start_time\":\"2021-01-15T08:40:58.647332Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=306}\n``` {.python .cell-code}\ntry:    \n    foo2()\nexcept UnboundLocalError as inst:\n    print(inst)\n```\n:::\n\n\n### What the hell ?\n\n- An assignment to a variable in a scope assumes that the variable is local to that scope \n- and shadows any similarly named variable in any outer scope\n\n```{.python}\nints += [2]\n```\nmeans\n```{.python}\nints = ints + [2]\n```\n\nwhich is an *assigment*: `ints` must be defined in the local scope, but it is not, while\n```{.python}\nints.append(2)\n```\n\nis not an *assignemnt*\n\n## Modify a `list` while iterating over it\n\n::: {#475776a0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:05.902243Z\",\"start_time\":\"2021-01-15T08:41:05.890704Z\"}' execution_count=307}\n``` {.python .cell-code}\nodd = lambda x: bool(x % 2)\nnumbers = list(range(10))\n\ntry:\n  for i in range(len(numbers)):\n      if odd(numbers[i]):\n          del numbers[i]\nexcept IndexError as inst:\n    print(inst)\n```\n:::\n\n\nTypically an example where one should use a list comprehension\n\n::: {#437d0f95 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:16.008696Z\",\"start_time\":\"2021-01-15T08:41:16.002196Z\"}' execution_count=308}\n``` {.python .cell-code}\n[number for number in numbers if not odd(number)]\n```\n:::\n\n\n## No docstrings\n\nAccept to spend time to write clean docstrings (look at `numpydoc` style)\n\n::: {#65f3880b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:17.239948Z\",\"start_time\":\"2021-01-15T08:41:17.236031Z\"}' execution_count=309}\n``` {.python .cell-code}\ndef create_student(name, age, address, major='computer science'):\n    \"\"\"Add a student in the database\n    \n    Parameters\n    ----------\n    name: `str`\n        Name of the student\n    \n    age: `int`\n        Age of the student\n    \n    address: `str`\n        Address of the student\n    \n    major: `str`, default='computer science'\n        The major chosen by the student\n    \n    Returns\n    -------\n    output: `Student`\n        A fresh student\n    \"\"\"\n    pass\n```\n:::\n\n\n::: {#ba7fc9b7 .cell execution_count=310}\n``` {.python .cell-code}\ncreate_student('Duduche', 28, 'Chalons')\n```\n:::\n\n\n## Not using available methods and/or the simplest solution\n\n::: {#2c286e4e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:19.794009Z\",\"start_time\":\"2021-01-15T08:41:19.785191Z\"}' execution_count=311}\n``` {.python .cell-code}\ndd = {'stephane': 1234, 'gael': 4567, 'gontran': 891011}\n\n# Bad\nfor key in dd.keys():\n    print(key, dd[key])\n\nprint('-' * 8)\n\n# Good\nfor key, value in dd.items():\n    print(key, value)\n```\n:::\n\n\n::: {#753b2c09 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:20.116770Z\",\"start_time\":\"2021-01-15T08:41:20.104428Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=312}\n``` {.python .cell-code}\ncolors = ['black', 'yellow', 'brown', 'red', 'pink']\n\n# Bad\nfor i in range(len(colors)):\n    print(i, colors[i])\n\nprint('-' * 8)\n\n# Good\nfor i, color in enumerate(colors):\n    print(i, color)\n```\n:::\n\n\n## Not using the standard library \n\nWhile it's **always** better than a hand-made solution\n\n::: {#ebf2ab7b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:21.109134Z\",\"start_time\":\"2021-01-15T08:41:21.101392Z\"}' execution_count=313}\n``` {.python .cell-code}\nlist1 = [1, 2]\nlist2 = [3, 4]\nlist3 = [5, 6, 7]\n\nfor a in list1:\n    for b in list2:\n        for c in list3:\n            print(a, b, c)\n```\n:::\n\n\n::: {#94fddf17 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:22.827474Z\",\"start_time\":\"2021-01-15T08:41:22.819519Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=314}\n``` {.python .cell-code}\nfrom itertools import product\n\nfor a, b, c in product(list1, list2, list3):\n    print(a, b, c)\n```\n:::\n\n\n# That's it for now !\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /usr/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.3\n---\n",
    "supporting": [
      "notebook01_python_files"
    ],
    "filters": []
  }
}