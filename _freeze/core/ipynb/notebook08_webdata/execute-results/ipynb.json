{
  "hash": "a2a7c6dd6d08f86e6070a01e719674fb",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Using with `pyspark` for data preprocessing\njupyter: python3\nexecute: \n  eval: true\n---\n\n\nWe want to use pyspark to preprocess a potentially huge dataset used for web-marketing.\n\n## Data description\n\nThe data is a `parquet` file which contains a dataframe with 8 columns:\n\n- `xid`: unique user id\n- `action`: type of action. 'C' is a click, 'O' or 'VSL' is a web-display\n- `date`: date of the action\n- `website_id`: unique id of the website\n- `url`: url of the webpage\n- `category_id`: id of the display\n- `zipcode`: postal zipcode of the user\n- `device`: type of device used by the user\n\n## Q1. Some statistics / computations\n\nUsing `pyspark.sql` we want to do the following things:\n\n1. Compute the total number of unique users\n2. Construct a column containing the total number of actions per user\n3. Construct a column containing the number of days since the last action of the user\n4. Construct a column containing the number of actions of each user for each modality of device \n\n## Q2. Binary classification\n\nThen, we want to construct a classifier to predict the click on the category 1204. \nHere is an agenda for this:\n\n1. Construction of a features matrix for which each line corresponds to the information concerning a user.\n2. In this matrix, we need to keep only the users that have been exposed to the display in category 1204\n3. Using this training dataset, train a binary classifier, and evaluate your classifier using a precision / recall curve computed on test data.\n\n\n# Download/read the data and a first look at the data\n\n::: {#1f8491c7 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport sys\n\nos.environ['PYSPARK_PYTHON'] = sys.executable\nos.environ['PYSPARK_DRIVER_PYTHON'] = sys.executable\n```\n:::\n\n\n::: {#553b63cc .cell ExecuteTime='{\"end_time\":\"2020-05-03T16:25:56.650024Z\",\"start_time\":\"2020-05-03T16:25:52.400542Z\"}' execution_count=2}\n``` {.python .cell-code}\nfrom pyspark.sql import SparkSession\n```\n:::\n\n\n::: {.callout-note}\n\n### Spark in standalone mode\n\nSo far, we used the `local` mode. \n\nTo launch spark in standalone mode, assuming the current working directory is `$SPARK_HOME` \n\n```{.bash}\n$ ./sbin/sWe may tart-master.sh --ip localhost\n>>> starting org.apache.spark.deploy.master.Master, logging to ...\n$ ./sbin/start-worker.sh spark://localhost:7077\n```\n\nWe may now launch the  instance of `SparkSession`, setting explicitly the `master` node and the port to communicate with the master.\n\nSparkUI should be reachable at `localhost:4040`. \n\nThe master can be monitored at `localhost:8080`\n\n:::\n\n::: {#07eb5263 .cell execution_count=3}\n``` {.python .cell-code}\nfrom pyspark import SparkConf, SparkContext\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as fn\nfrom pyspark.sql.functions import col\n\nspark = (SparkSession\n    .builder\n    .appName(\"Taming Webdata\")\n    .getOrCreate()\n)\n\nsc = spark._sc\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/03/10 17:30:50 WARN Utils: Your hostname, boucheron-Precision-5480 resolves to a loopback address: 127.0.1.1; using 172.23.32.10 instead (on interface enxac91a1bd3e89)\n25/03/10 17:30:50 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n25/03/10 17:30:50 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n25/03/10 17:30:50 WARN Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.\n```\n:::\n:::\n\n\n::: {#2ad2a812 .cell execution_count=4}\n``` {.python .cell-code}\nspark = SparkSession.builder \\\n            .appName(\"Spark webdata\") \\\n            .master(\"spark://localhost:7077\") \\\n            .config(\"spark.driver.memory\", \"16G\") \\\n            .config(\"spark.serializer\", \"org.apache.spark.serializer.KryoSerializer\") \\\n            .config(\"spark.kryoserializer.buffer.max\", \"2000M\") \\\n            .config(\"spark.driver.maxResultSize\", \"0\") \\\n            .config(\"spark.jars.packages\", \"com.johnsnowlabs.nlp:spark-nlp_2.12:5.2.3\") \\\n            .getOrCreate()\n```\n:::\n\n\n::: {#46c49735 .cell ExecuteTime='{\"end_time\":\"2020-05-03T16:25:56.650024Z\",\"start_time\":\"2020-05-03T16:25:52.400542Z\"}' execution_count=5}\n``` {.python .cell-code}\n#spark = (SparkSession\n#    .builder\n#    .appName(\"Web data\")         \n#    .getOrCreate()\n#)\n```\n:::\n\n\n::: {#f23995ce .cell ExecuteTime='{\"end_time\":\"2020-05-03T16:28:38.406210Z\",\"start_time\":\"2020-05-03T16:28:08.594803Z\"}' execution_count=6}\n``` {.python .cell-code}\nimport requests, zipfile, io\nfrom pathlib import Path\n\npath = Path('data/webdata.parquet')\nif not path.exists():\n    url = \"https://s-v-b.github.io/IFEBY310/data/webdata.parquet.zip\"\n    r = requests.get(url)\n    z = zipfile.ZipFile(io.BytesIO(r.content))\n    z.extractall(path='data/')\n```\n:::\n\n\n::: {#afba6fb4 .cell ExecuteTime='{\"end_time\":\"2020-05-03T16:27:49.141388Z\",\"start_time\":\"2020-05-03T16:27:48.989135Z\"}' execution_count=7}\n``` {.python .cell-code}\ninput_path = Path('./data')\ninput_file =  'webdata.parquet'\nfile_path = str(input_path / input_file)\n\ndf = spark.read.parquet(file_path)\n```\n:::\n\n\nWe can give a try to Pandas on Spark\n\n::: {.callout-note}\n\nWe can also give a try to `pyarrow.parquet` module to load the Parquet file in an Arrow table.\n\n:::\n\n::: {#509e55ba .cell execution_count=8}\n``` {.python .cell-code}\nimport pyarrow as pa\nimport comet as co\nimport pyarrow.parquet as pq\n\ndfa = pq.read_table(file_path)\n```\n:::\n\n\n::: {#0ed993cc .cell execution_count=9}\n``` {.python .cell-code}\ndfa.num_columns\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n8\n```\n:::\n:::\n\n\n::: {.callout-warning}\n\nLet us go back to the spark data frame\n\n:::\n\n::: {#9253f4bc .cell ExecuteTime='{\"end_time\":\"2020-05-03T16:27:52.121782Z\",\"start_time\":\"2020-05-03T16:27:50.752210Z\"}' execution_count=10}\n``` {.python .cell-code}\ndf.head(6)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n[Row(xid='001ff9b6-5383-4221-812d-58c2c3f234cc', action='O', date=datetime.datetime(2017, 1, 25, 7, 2, 18), website_id='3', url='http://www.8chances.com/grille', category_id=1002.0, zipcode='11370', device='SMP'),\n Row(xid='0056ab7a-3cba-4ed5-a495-3d4abf79ab66', action='O', date=datetime.datetime(2016, 12, 28, 9, 47, 8), website_id='54', url='http://www.salaire-brut-en-net.fr/differences-brut-net/', category_id=1002.0, zipcode='86000', device='DSK'),\n Row(xid='005ae4ab-363a-41a0-b8f9-faee47d622a4', action='O', date=datetime.datetime(2017, 1, 27, 22, 21, 6), website_id='74', url='http://www.realite-virtuelle.com/top-applications-horreur-vr-halloween', category_id=1002.0, zipcode='49700', device='DSK'),\n Row(xid='006f867c-70cb-41f0-82af-f3688fa719c5', action='O', date=datetime.datetime(2016, 12, 20, 12, 45, 14), website_id='43', url='http://www.frenchblues.fr/', category_id=1002.0, zipcode='42660', device='DSK'),\n Row(xid='006f867c-70cb-41f0-82af-f3688fa719c5', action='O', date=datetime.datetime(2016, 12, 20, 12, 56, 50), website_id='43', url='http://www.frenchblues.fr/', category_id=1002.0, zipcode='42660', device='DSK'),\n Row(xid='006f867c-70cb-41f0-82af-f3688fa719c5', action='O', date=datetime.datetime(2016, 12, 20, 12, 56, 53), website_id='43', url='http://www.frenchblues.fr/contact/', category_id=1002.0, zipcode='42660', device='DSK')]\n```\n:::\n:::\n\n\n::: {#d71d2f4c .cell execution_count=11}\n``` {.python .cell-code}\ndf.show(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+\n|                 xid|action|               date|website_id|                 url|category_id|zipcode|device|\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+\n|001ff9b6-5383-422...|     O|2017-01-25 07:02:18|         3|http://www.8chanc...|     1002.0|  11370|   SMP|\n|0056ab7a-3cba-4ed...|     O|2016-12-28 09:47:08|        54|http://www.salair...|     1002.0|  86000|   DSK|\n|005ae4ab-363a-41a...|     O|2017-01-27 22:21:06|        74|http://www.realit...|     1002.0|  49700|   DSK|\n|006f867c-70cb-41f...|     O|2016-12-20 12:45:14|        43|http://www.french...|     1002.0|  42660|   DSK|\n|006f867c-70cb-41f...|     O|2016-12-20 12:56:50|        43|http://www.french...|     1002.0|  42660|   DSK|\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+\nonly showing top 5 rows\n\n```\n:::\n:::\n\n\n::: {#5b6631fe .cell execution_count=12}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nDataFrame[summary: string, xid: string, action: string, website_id: string, url: string, category_id: string, zipcode: string, device: string]\n```\n:::\n:::\n\n\n::: {#95ce355e .cell execution_count=13}\n``` {.python .cell-code}\ndf.printSchema()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nroot\n |-- xid: string (nullable = true)\n |-- action: string (nullable = true)\n |-- date: timestamp (nullable = true)\n |-- website_id: string (nullable = true)\n |-- url: string (nullable = true)\n |-- category_id: float (nullable = true)\n |-- zipcode: string (nullable = true)\n |-- device: string (nullable = true)\n\n```\n:::\n:::\n\n\n::: {#f1d0b6ca .cell execution_count=14}\n``` {.python .cell-code}\ndf.rdd.getNumPartitions()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n12\n```\n:::\n:::\n\n\n::: {.callout-note  title=\"Question\"}\n\nExplain the partition size. \n\n:::\n\n# Basic statistics\n\nFirst we need to import some things:\n\n- `Window` class\n- SQL functions module\n- Some very useful functions\n- Spark types\n\n::: {#def30ad5 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:20:34.024704Z\",\"start_time\":\"2020-05-03T15:20:34.016322Z\"}' execution_count=15}\n``` {.python .cell-code}\nfrom pyspark.sql import Window\nimport pyspark.sql.functions as func\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import col, lit\n```\n:::\n\n\n## Compute the total number of unique users\n\n::: {#605caac7 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:20:36.790893Z\",\"start_time\":\"2020-05-03T15:20:34.856924Z\"}' execution_count=16}\n``` {.python .cell-code}\n( \n    df.select('xid')\n      .distinct()\n      .count()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n473761\n```\n:::\n:::\n\n\n::: {#577689d5 .cell execution_count=17}\n``` {.python .cell-code}\ndef foo(x):\n   c = len(set(x))\n   print(c)\n   return c\n```\n:::\n\n\n::: {#f7978a4f .cell execution_count=18}\n``` {.python .cell-code}\nfoo([1, 1, 2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n2\n```\n:::\n:::\n\n\n::: {#cc43c7b7 .cell execution_count=19}\n``` {.python .cell-code}\ndf.rdd.map(lambda x : x.xid).foreachPartition(foo)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n0\n0\n0\n0\n0\n0\n\r[Stage 9:=============================>                            (6 + 6) / 12]\r78120\n\r[Stage 9:=================================>                        (7 + 5) / 12]\r78865\n79090\n78636\n79296\n\r[Stage 9:====================================================>    (11 + 1) / 12]\r79754\n\r                                                                                \r\n```\n:::\n:::\n\n\n::: {#63b0916d .cell execution_count=20}\n``` {.python .cell-code}\n78120 + 78636 + 79090 + 78865 + 79296 + 79754\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n473761\n```\n:::\n:::\n\n\nThis might pump up some computational resources \n\n::: {#dd553170 .cell execution_count=21}\n``` {.python .cell-code}\n( \n    df.select('xid')\n      .distinct() \n      .explain()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Physical Plan ==\nAdaptiveSparkPlan isFinalPlan=false\n+- HashAggregate(keys=[xid#0], functions=[])\n   +- Exchange hashpartitioning(xid#0, 200), ENSURE_REQUIREMENTS, [plan_id=136]\n      +- HashAggregate(keys=[xid#0], functions=[])\n         +- FileScan parquet [xid#0] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/home/boucheron/Documents/IFEBY310/core/ipynb/data/webdata.parquet], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<xid:string>\n\n\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nThe distinct values of `xid` seem to be evenly spread among the six files making the `parquet` directory \n\n:::\n\n## Construct a column containing the total number of actions per user\n\n::: {#c435831f .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:20:52.163321Z\",\"start_time\":\"2020-05-03T15:20:50.965856Z\"}' execution_count=22}\n``` {.python .cell-code}\nxid_partition = Window.partitionBy('xid')\n\nn_events = func.count(col('action')).over(xid_partition)\n\ndf = df.withColumn('n_events', n_events)\n\ndf.show(n=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+--------+\n|                 xid|action|               date|website_id|                 url|category_id|zipcode|device|n_events|\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+--------+\n|0006cea7-1679-426...|     O|2016-12-26 13:41:08|        51|https://www.footl...|     1002.0|  34290|   TAB|       1|\n|000893c8-a14b-4f3...|     O|2016-12-23 16:18:37|        56|http://blague.dum...|     1002.0|   NULL|   DSK|       1|\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+--------+\nonly showing top 2 rows\n\n```\n:::\n:::\n\n\n::: {#3c87e7ec .cell execution_count=23}\n``` {.python .cell-code}\n( \n  df\n    .groupBy('xid')\n    .agg(func.count('action'))\n    .show(n=5)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------------------+-------------+\n|                 xid|count(action)|\n+--------------------+-------------+\n|001c4a21-52c6-489...|            1|\n|0024344b-7ee2-4fc...|            4|\n|004564e3-87c1-4e1...|            1|\n|006d807f-91c3-415...|            1|\n|006e0463-b24c-499...|            1|\n+--------------------+-------------+\nonly showing top 5 rows\n\n```\n:::\n:::\n\n\nVisualize the distribution of the number of users per number of actions.\n\n::: {.callout-note title=\"Question\"}\n\nConstruct a column containing the number of days since the last action of the user\n\n:::\n\n::: {#ee19df3d .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:20:55.895918Z\",\"start_time\":\"2020-05-03T15:20:54.925126Z\"}' execution_count=24}\n``` {.python .cell-code}\n# xid_partition = Window.partitionBy('xid')\n\nmax_date = (\n  func\n    .max(col('date'))\n    .over(xid_partition)\n)\n\nn_days_since_last_event = func.datediff(func.current_date(), max_date)\n\ndf = df.withColumn('n_days_since_last_event',\n                   n_days_since_last_event)\n\ndf.show(n=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+--------+-----------------------+\n|                 xid|action|               date|website_id|                 url|category_id|zipcode|device|n_events|n_days_since_last_event|\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+--------+-----------------------+\n|0006cea7-1679-426...|     O|2016-12-26 13:41:08|        51|https://www.footl...|     1002.0|  34290|   TAB|       1|                   2996|\n|000893c8-a14b-4f3...|     O|2016-12-23 16:18:37|        56|http://blague.dum...|     1002.0|   NULL|   DSK|       1|                   2999|\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+--------+-----------------------+\nonly showing top 2 rows\n\n```\n:::\n:::\n\n\n::: {#fe7995a5 .cell execution_count=25}\n``` {.python .cell-code}\ndf.printSchema()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nroot\n |-- xid: string (nullable = true)\n |-- action: string (nullable = true)\n |-- date: timestamp (nullable = true)\n |-- website_id: string (nullable = true)\n |-- url: string (nullable = true)\n |-- category_id: float (nullable = true)\n |-- zipcode: string (nullable = true)\n |-- device: string (nullable = true)\n |-- n_events: long (nullable = false)\n |-- n_days_since_last_event: integer (nullable = true)\n\n```\n:::\n:::\n\n\n## Construct a column containing the number of actions of each user for each modality of device\n\n::: {#a6177e49 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:21:03.846417Z\",\"start_time\":\"2020-05-03T15:21:03.027855Z\"}' execution_count=26}\n``` {.python .cell-code}\nxid_device_partition = xid_partition.partitionBy('device')\n\nn_events_per_device = func.count(col('action')).over(xid_device_partition)\n\ndf = df.withColumn('n_events_per_device', n_events_per_device)\n\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 21:==================================================>     (20 + 2) / 22]\r\r[Stage 24:>                                                         (0 + 1) / 1]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n[Row(xid='000893c8-a14b-4f33-858f-210440f37def', action='O', date=datetime.datetime(2016, 12, 23, 16, 18, 37), website_id='56', url='http://blague.dumatin.fr/', category_id=1002.0, zipcode=None, device='DSK', n_events=1, n_days_since_last_event=2999, n_events_per_device=1021837),\n Row(xid='0008c5d2-c263-4b55-ae7d-82c4bf566cc4', action='O', date=datetime.datetime(2017, 1, 16, 4, 26, 21), website_id='74', url='http://www.realite-virtuelle.com/meilleure-videos-360-vr', category_id=1002.0, zipcode=None, device='DSK', n_events=1, n_days_since_last_event=2975, n_events_per_device=1021837)]\n```\n:::\n:::\n\n\n## Number of devices per user {{< fa mug-hot >}}\n\n::: {#be35c646 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:21:06.411472Z\",\"start_time\":\"2020-05-03T15:21:05.373879Z\"}' execution_count=27}\n``` {.python .cell-code}\nxid_partition = Window.partitionBy('xid')\n\nrank_device = (\n  func\n    .dense_rank()\n    .over(xid_partition.orderBy('device'))\n)\n\nn_unique_device = (\n    func\n      .last(rank_device)\n      .over(xid_partition)\n)\n\ndf = df.withColumn('n_device', n_unique_device)\n\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 30:======================================>                   (2 + 1) / 3]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n[Row(xid='0006cea7-1679-4264-bdef-0cd089749ede', action='O', date=datetime.datetime(2016, 12, 26, 13, 41, 8), website_id='51', url='https://www.footlegende.fr/mercato-psg-coutinho-10166', category_id=1002.0, zipcode='34290', device='TAB', n_events=1, n_days_since_last_event=2996, n_events_per_device=132013, n_device=1),\n Row(xid='000893c8-a14b-4f33-858f-210440f37def', action='O', date=datetime.datetime(2016, 12, 23, 16, 18, 37), website_id='56', url='http://blague.dumatin.fr/', category_id=1002.0, zipcode=None, device='DSK', n_events=1, n_days_since_last_event=2999, n_events_per_device=1021837, n_device=1)]\n```\n:::\n:::\n\n\n::: {#5e191350 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:21:13.863382Z\",\"start_time\":\"2020-05-03T15:21:12.479688Z\"}' execution_count=28}\n``` {.python .cell-code}\ndf\\\n    .where(col('n_device') > 1)\\\n    .select('xid', 'device', 'n_events',  'n_device', 'n_events_per_device')\\\n    .head(n=8)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n[Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='MOB', n_events=6, n_device=2, n_events_per_device=1564),\n Row(xid='78156cdf-7229-46eb-bb6b-92d384f9a6fa', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='78156cdf-7229-46eb-bb6b-92d384f9a6fa', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837)]\n```\n:::\n:::\n\n\n::: {#cd72eb6b .cell execution_count=29}\n``` {.python .cell-code}\ndf\\\n    .where(col('n_device') > 1)\\\n    .select('xid', 'device', 'n_events',  'n_device', 'n_events_per_device')\\\n    .count()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n3153\n```\n:::\n:::\n\n\n# Let's select the correct users and build a training dataset\n\nWe construct a ETL (Extract Transform Load) process on this data using the `pyspark.sql` API.\n\n## Extraction\n\nHere extraction is just about reading the data\n\n::: {#89787f43 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:21:36.683625Z\",\"start_time\":\"2020-05-03T15:21:36.427615Z\"}' execution_count=30}\n``` {.python .cell-code}\ndf = spark.read.parquet(file_path)\ndf.show(n=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+\n|                 xid|action|               date|website_id|                 url|category_id|zipcode|device|\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+\n|001ff9b6-5383-422...|     O|2017-01-25 07:02:18|         3|http://www.8chanc...|     1002.0|  11370|   SMP|\n|0056ab7a-3cba-4ed...|     O|2016-12-28 09:47:08|        54|http://www.salair...|     1002.0|  86000|   DSK|\n|005ae4ab-363a-41a...|     O|2017-01-27 22:21:06|        74|http://www.realit...|     1002.0|  49700|   DSK|\n+--------------------+------+-------------------+----------+--------------------+-----------+-------+------+\nonly showing top 3 rows\n\n```\n:::\n:::\n\n\n## Transformation of the data\n\nAt this step we compute a lot of extra things from the data. The aim is to build *features* that describe users.\n\n::: {#dad041d8 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:24:09.159215Z\",\"start_time\":\"2020-05-03T15:24:09.136189Z\"}' execution_count=31}\n``` {.python .cell-code}\ndef n_events_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    n_events = func.count(col('action')).over(xid_partition)\n    \n    df = df.withColumn('n_events', n_events)\n\n    return df\n```\n:::\n\n\n::: {#05bcf1d2 .cell execution_count=32}\n``` {.python .cell-code}\ndef n_events_per_action_transformer(df):\n    xid_action_partition = Window.partitionBy('xid', 'action')\n    n_events_per_action = func.count(col('action')).over(xid_action_partition)\n\n    df = df.withColumn('n_events_per_action', n_events_per_action)\n    \n    return df\n```\n:::\n\n\n::: {#cb7196aa .cell execution_count=33}\n``` {.python .cell-code}\ndef hour_transformer(df):\n    hour = func.hour(col('date'))\n    df = df.withColumn('hour', hour)\n    return df\n\ndef weekday_transformer(df):\n    weekday = func.date_format(col('date'), 'EEEE')\n    df = df.withColumn('weekday', weekday)\n    return df\n\ndef n_events_per_hour_transformer(df):\n    xid_hour_partition = Window.partitionBy('xid', 'hour')\n    n_events_per_hour = func.count(col('action')).over(xid_hour_partition)\n    df = df.withColumn('n_events_per_hour', n_events_per_hour)\n    return df\n\ndef n_events_per_weekday_transformer(df):\n    xid_weekday_partition = Window.partitionBy('xid', 'weekday')\n    n_events_per_weekday = func.count(col('action')).over(xid_weekday_partition)\n    df = df.withColumn('n_events_per_weekday', n_events_per_weekday)\n    return df\n\ndef n_days_since_last_event_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    max_date = func.max(col('date')).over(xid_partition)\n    n_days_since_last_event = func.datediff(func.current_date(), max_date)\n    df = df.withColumn('n_days_since_last_event',\n                       n_days_since_last_event + lit(0.1))\n    return df\n\ndef n_days_since_last_action_transformer(df):\n    xid_partition_action = Window.partitionBy('xid', 'action')\n    max_date = func.max(col('date')).over(xid_partition_action)\n    n_days_since_last_action = func.datediff(func.current_date(),\n                                                        max_date)\n    df = df.withColumn('n_days_since_last_action',\n                       n_days_since_last_action + lit(0.1))\n    return df\n\ndef n_unique_day_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    dayofyear = func.dayofyear(col('date'))\n    rank_day = func.dense_rank().over(xid_partition.orderBy(dayofyear))\n    n_unique_day = func.last(rank_day).over(xid_partition)\n    df = df.withColumn('n_unique_day', n_unique_day)\n    return df\n\ndef n_unique_hour_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_hour = func.dense_rank().over(xid_partition.orderBy('hour'))\n    n_unique_hour = func.last(rank_hour).over(xid_partition)\n    df = df.withColumn('n_unique_hour', n_unique_hour)\n    return df\n\ndef n_events_per_device_transformer(df):\n    xid_device_partition = Window.partitionBy('xid', 'device')\n    n_events_per_device = func.count(func.col('device')) \\\n        .over(xid_device_partition)\n    df = df.withColumn('n_events_per_device', n_events_per_device)\n    return df\n\ndef n_unique_device_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_device = func.dense_rank().over(xid_partition.orderBy('device'))\n    n_unique_device = func.last(rank_device).over(xid_partition)\n    df = df.withColumn('n_device', n_unique_device)\n    return df\n\ndef n_actions_per_category_id_transformer(df):\n    xid_category_id_partition = Window.partitionBy('xid', 'category_id',\n                                                   'action')\n    n_actions_per_category_id = func.count(func.col('action')) \\\n        .over(xid_category_id_partition)\n    df = df.withColumn('n_actions_per_category_id', n_actions_per_category_id)\n    return df\n\ndef n_unique_category_id_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_category_id = func.dense_rank().over(xid_partition\\\n                                              .orderBy('category_id'))\n    n_unique_category_id = func.last(rank_category_id).over(xid_partition)\n    df = df.withColumn('n_unique_category_id', n_unique_category_id)\n    return df\n\ndef n_events_per_category_id_transformer(df):\n    xid_category_id_partition = Window.partitionBy('xid', 'category_id')\n    n_events_per_category_id = func.count(func.col('action')) \\\n        .over(xid_category_id_partition)\n    df = df.withColumn('n_events_per_category_id', n_events_per_category_id)\n    return df\n\ndef n_events_per_website_id_transformer(df):\n    xid_website_id_partition = Window.partitionBy('xid', 'website_id')\n    n_events_per_website_id = func.count(col('action'))\\\n        .over(xid_website_id_partition)\n    df = df.withColumn('n_events_per_website_id', n_events_per_website_id)\n    return df\n```\n:::\n\n\n::: {#a4527eec .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:24:33.042444Z\",\"start_time\":\"2020-05-03T15:24:15.032735Z\"}' execution_count=34}\n``` {.python .cell-code}\ntransformers = [\n    hour_transformer,\n    weekday_transformer,\n    n_events_per_hour_transformer,\n    n_events_per_weekday_transformer,\n    n_days_since_last_event_transformer,\n    n_days_since_last_action_transformer,\n    n_unique_day_transformer,\n    n_unique_hour_transformer,\n    n_events_per_device_transformer,\n    n_unique_device_transformer,\n    n_actions_per_category_id_transformer,\n    n_events_per_category_id_transformer,\n    n_events_per_website_id_transformer,\n]\n```\n:::\n\n\n::: {#9f476789 .cell execution_count=35}\n``` {.python .cell-code}\nN = 10000\n```\n:::\n\n\n::: {#2bd6e4cc .cell execution_count=36}\n``` {.python .cell-code}\nsample_df = df.sample(withReplacement=False, fraction=.05)\n```\n:::\n\n\n::: {#e32b1c5a .cell execution_count=37}\n``` {.python .cell-code}\nsample_df.count()\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n59155\n```\n:::\n:::\n\n\n::: {#0b91b6e7 .cell execution_count=38}\n``` {.python .cell-code}\nfor transformer in transformers:\n    df = transformer(df)\n\ndf.head(n=1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 58:>                                                         (0 + 1) / 1]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n[Row(xid='0006cea7-1679-4264-bdef-0cd089749ede', action='O', date=datetime.datetime(2016, 12, 26, 13, 41, 8), website_id='51', url='https://www.footlegende.fr/mercato-psg-coutinho-10166', category_id=1002.0, zipcode='34290', device='TAB', hour=13, weekday='Monday', n_events_per_hour=1, n_events_per_weekday=1, n_days_since_last_event=2996.1, n_days_since_last_action=2996.1, n_unique_day=1, n_unique_hour=1, n_events_per_device=1, n_device=1, n_actions_per_category_id=1, n_events_per_category_id=1, n_events_per_website_id=1)]\n```\n:::\n:::\n\n\n::: {#fc3cb4e7 .cell execution_count=39}\n``` {.python .cell-code}\nfor transformer in transformers:\n    sample_df = transformer(sample_df)\n\nsample_df.head(n=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n[Row(xid='000893c8-a14b-4f33-858f-210440f37def', action='O', date=datetime.datetime(2016, 12, 23, 16, 18, 37), website_id='56', url='http://blague.dumatin.fr/', category_id=1002.0, zipcode=None, device='DSK', hour=16, weekday='Friday', n_events_per_hour=1, n_events_per_weekday=1, n_days_since_last_event=2999.1, n_days_since_last_action=2999.1, n_unique_day=1, n_unique_hour=1, n_events_per_device=1, n_device=1, n_actions_per_category_id=1, n_events_per_category_id=1, n_events_per_website_id=1)]\n```\n:::\n:::\n\n\n::: {#42372b35 .cell execution_count=40}\n``` {.python .cell-code}\ndf = sample_df\n```\n:::\n\n\n::: {#153f79c9 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:24:40.406910Z\",\"start_time\":\"2020-05-03T15:24:40.393184Z\"}' execution_count=41}\n``` {.python .cell-code}\nsorted(df.columns)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n['action',\n 'category_id',\n 'date',\n 'device',\n 'hour',\n 'n_actions_per_category_id',\n 'n_days_since_last_action',\n 'n_days_since_last_event',\n 'n_device',\n 'n_events_per_category_id',\n 'n_events_per_device',\n 'n_events_per_hour',\n 'n_events_per_website_id',\n 'n_events_per_weekday',\n 'n_unique_day',\n 'n_unique_hour',\n 'url',\n 'website_id',\n 'weekday',\n 'xid',\n 'zipcode']\n```\n:::\n:::\n\n\n## Load step\n\nHere, we use all the previous computations (saved in the columns of the dataframe) \nto compute aggregated informations about each user.\n\n::: {#b0aaf22c .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:25:22.243433Z\",\"start_time\":\"2020-05-03T15:25:22.217248Z\"}' execution_count=42}\n``` {.python .cell-code}\ndef n_events_per_hour_loader(df):\n    csr = df\\\n        .select('xid', 'hour', 'n_events_per_hour')\\\n        .withColumnRenamed('n_events_per_hour', 'value')\\\n        .distinct()     # action\n    feature_name = func.concat(lit('n_events_per_hour#'), col('hour'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('hour')\n    return csr\n\ndef n_events_per_website_id_loader(df):\n    csr = df.select('xid', 'website_id', 'n_events_per_website_id')\\\n        .withColumnRenamed('n_events_per_hour', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_website_id#'),\n                               col('website_id'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('website_id')\n    return csr\n\ndef n_events_per_hour_loader(df):\n    csr = df\\\n        .select('xid', 'hour', 'n_events_per_hour')\\\n        .withColumnRenamed('n_events_per_hour', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_hour#'), col('hour'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('hour')\n    return csr\n\ndef n_events_per_weekday_loader(df):\n    csr = df\\\n        .select('xid', 'weekday', 'n_events_per_weekday')\\\n        .withColumnRenamed('n_events_per_weekday', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_weekday#'), col('weekday'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('weekday')\n    return csr\n\ndef n_days_since_last_event_loader(df):\n    csr = df.select('xid',  'n_days_since_last_event')\\\n        .withColumnRenamed('n_days_since_last_event#', 'value')\\\n        .distinct()\n    feature_name = lit('n_days_since_last_event')\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\n    return csr\n\ndef n_days_since_last_action_loader(df):\n    csr = df.select('xid', 'action', 'n_days_since_last_action')\\\n        .withColumnRenamed('n_days_since_last_action', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_days_since_last_action#'), col('action'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('action')\n    return csr\n\ndef n_unique_day_loader(df):\n    csr = df.select('xid', 'n_unique_day')\\\n        .withColumnRenamed('n_unique_day', 'value')\\\n        .distinct()\n    feature_name = lit('n_unique_day')\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\n    return csr\n\ndef n_unique_hour_loader(df):\n    csr = df.select('xid', 'n_unique_hour')\\\n        .withColumnRenamed('n_unique_hour', 'value')\\\n        .distinct()\n    feature_name = lit('n_unique_hour')\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\n    return csr\n\ndef n_events_per_device_loader(df):\n    csr = df\\\n        .select('xid', 'device', 'n_events_per_device')\\\n        .withColumnRenamed('n_events_per_device', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_device#'), col('device'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('device')\n    return csr\n\ndef n_unique_device_loader(df):\n    csr = df.select('xid', 'n_device')\\\n        .withColumnRenamed('n_device', 'value')\\\n        .distinct()\n    feature_name = lit('n_device')\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\n    return csr\n\ndef n_events_per_category_id_loader(df):\n    csr = df.select('xid', 'category_id', 'n_events_per_category_id')\\\n        .withColumnRenamed('n_events_per_category_id', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_category_id#'),\n                               col('category_id'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('category_id')\n    return csr\n\ndef n_actions_per_category_id_loader(df):\n    csr = df.select('xid', 'category_id', 'action', 'n_actions_per_category_id')\\\n        .withColumnRenamed('n_actions_per_category_id', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_actions_per_category_id#'),\n                               col('action'), lit('#'), \n                               col('category_id'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('category_id')\\\n        .drop('action')\n    return csr\n\ndef n_events_per_website_id_loader(df):\n    csr = df.select('xid', 'website_id', 'n_events_per_website_id')\\\n        .withColumnRenamed('n_events_per_website_id', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_website_id#'),\n                               col('website_id'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('website_id')\n    return csr\n```\n:::\n\n\n::: {#56503a8d .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:25:48.149670Z\",\"start_time\":\"2020-05-03T15:25:37.966657Z\"}' execution_count=43}\n``` {.python .cell-code}\nfrom functools import reduce\n```\n:::\n\n\n::: {#b9c1e5c3 .cell execution_count=44}\n``` {.python .cell-code}\nloaders = [\n    n_events_per_hour_loader,\n    n_events_per_website_id_loader,\n    n_events_per_hour_loader,\n    n_events_per_weekday_loader,\n    n_days_since_last_event_loader,\n    n_days_since_last_action_loader,\n    n_unique_day_loader,\n    n_unique_hour_loader,\n    n_events_per_device_loader,\n    n_unique_device_loader,\n    n_events_per_category_id_loader,\n    n_actions_per_category_id_loader,\n    n_events_per_website_id_loader,\n]\n```\n:::\n\n\n::: {#5ce7b1c9 .cell execution_count=45}\n``` {.python .cell-code}\ndef union(df, other):\n    return df.union(other)\n```\n:::\n\n\n::: {.callout-caution title=\"About DataFrame.union()\"}\n\nThis method performs a SQL-style set union of the rows from both DataFrame objects, with no automatic deduplication of elements.\n\nUse the distinct() method to perform deduplication of rows.\n\nThe method resolves columns by position (not by name), following the standard behavior in SQL.\n\n:::\n\n::: {#c276381e .cell execution_count=46}\n``` {.python .cell-code}\nspam = [loader(df) for loader in loaders]\n```\n:::\n\n\n::: {#3f83bd10 .cell execution_count=47}\n``` {.python .cell-code}\nspam[0].printSchema()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nroot\n |-- xid: string (nullable = true)\n |-- value: long (nullable = false)\n |-- feature_name: string (nullable = true)\n\n```\n:::\n:::\n\n\n::: {#a26c9aac .cell execution_count=48}\n``` {.python .cell-code}\nlen(spam)\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n13\n```\n:::\n:::\n\n\n::: {#4296e575 .cell execution_count=49}\n``` {.python .cell-code}\ncsr = reduce(\n    lambda df1, df2: df1.union(df2),\n    spam\n)\n\ncsr.head(n=3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 66:===================================================>    (11 + 1) / 12]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n[Row(xid='000893c8-a14b-4f33-858f-210440f37def', value=1.0, feature_name='n_events_per_hour#16'),\n Row(xid='000b249a-f872-4e9a-9713-175b8a7d39c6', value=1.0, feature_name='n_events_per_hour#21'),\n Row(xid='000e9077-15c8-4328-a23d-8c6dd8510752', value=1.0, feature_name='n_events_per_hour#23')]\n```\n:::\n:::\n\n\n::: {#890fc7db .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:25:54.862814Z\",\"start_time\":\"2020-05-03T15:25:54.857914Z\"}' execution_count=50}\n``` {.python .cell-code}\ncsr.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n['xid', 'value', 'feature_name']\n```\n:::\n:::\n\n\n::: {#18b74acb .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:26:13.629146Z\",\"start_time\":\"2020-05-03T15:25:55.683800Z\"}' execution_count=51}\n``` {.python .cell-code}\ncsr.show(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------------------+-----+--------------------+\n|                 xid|value|        feature_name|\n+--------------------+-----+--------------------+\n|000893c8-a14b-4f3...|  1.0|n_events_per_hour#16|\n|000b249a-f872-4e9...|  1.0|n_events_per_hour#21|\n|000e9077-15c8-432...|  1.0|n_events_per_hour#23|\n|000f9f4f-563d-4f7...|  1.0|n_events_per_hour#23|\n|000fb8d4-646e-446...|  1.0| n_events_per_hour#8|\n+--------------------+-----+--------------------+\nonly showing top 5 rows\n\n```\n:::\n:::\n\n\n::: {#106a5d4e .cell execution_count=52}\n``` {.python .cell-code}\ncsr.rdd.getNumPartitions()\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n17\n```\n:::\n:::\n\n\n::: {#1a9f2a00 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:30:20.643141Z\",\"start_time\":\"2020-05-03T15:29:45.221790Z\"}' execution_count=53}\n``` {.python .cell-code}\n# Replace features names and xid by a unique number\nfeature_name_partition = Window().orderBy('feature_name')\nxid_partition = Window().orderBy('xid')\n\ncol_idx = func.dense_rank().over(feature_name_partition)\nrow_idx = func.dense_rank().over(xid_partition)\n```\n:::\n\n\n::: {#8bd442a7 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:30:20.643141Z\",\"start_time\":\"2020-05-03T15:29:45.221790Z\"}' execution_count=54}\n``` {.python .cell-code}\ncsr = csr.withColumn('col', col_idx)\\\n    .withColumn('row', row_idx)\n\ncsr = csr.na.drop('any')\n\ncsr.head(n=5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/03/10 17:31:12 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:12 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:12 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:12 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:12 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:13 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:14 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:14 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:14 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:14 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n[Row(xid='0004c22f-62b5-40c2-8d0a-fa1115a08525', value=1.0, feature_name='n_actions_per_category_id#O#1204.0', col=4, row=1),\n Row(xid='0004c22f-62b5-40c2-8d0a-fa1115a08525', value=2962.1, feature_name='n_days_since_last_action#O', col=6, row=1),\n Row(xid='0004c22f-62b5-40c2-8d0a-fa1115a08525', value=2962.1, feature_name='n_days_since_last_event', col=7, row=1),\n Row(xid='0004c22f-62b5-40c2-8d0a-fa1115a08525', value=1.0, feature_name='n_device', col=8, row=1),\n Row(xid='0004c22f-62b5-40c2-8d0a-fa1115a08525', value=1.0, feature_name='n_events_per_category_id#1204.0', col=10, row=1)]\n```\n:::\n:::\n\n\n::: {#9add6134 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:32:02.552364Z\",\"start_time\":\"2020-05-03T15:31:14.990298Z\"}' execution_count=55}\n``` {.python .cell-code}\n# Let's save the result of our hard work into a new parquet file\noutput_path = Path('./data')\noutput_file = str(output_path / 'csr.parquet')\ncsr.write.parquet(output_file, mode='overwrite')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:15 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:16 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n\r[Stage 222:>                                                        (0 + 1) / 1]\r\r                                                                                \r\n```\n:::\n:::\n\n\n# Preparation of the training dataset\n\n::: {#6566b2e9 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:32:56.421452Z\",\"start_time\":\"2020-05-03T15:32:55.819071Z\"}' execution_count=56}\n``` {.python .cell-code}\ncsr_path = './data'\ncsr_file = os.path.join(csr_path, 'csr.parquet')\n\ndf = spark.read.parquet(csr_file)\ndf.head(n=5)\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n[Row(xid='0004c22f-62b5-40c2-8d0a-fa1115a08525', value=1.0, feature_name='n_actions_per_category_id#O#1204.0', col=4, row=1),\n Row(xid='0004c22f-62b5-40c2-8d0a-fa1115a08525', value=2962.1, feature_name='n_days_since_last_action#O', col=6, row=1),\n Row(xid='0004c22f-62b5-40c2-8d0a-fa1115a08525', value=2962.1, feature_name='n_days_since_last_event', col=7, row=1),\n Row(xid='0004c22f-62b5-40c2-8d0a-fa1115a08525', value=1.0, feature_name='n_device', col=8, row=1),\n Row(xid='0004c22f-62b5-40c2-8d0a-fa1115a08525', value=1.0, feature_name='n_events_per_category_id#1204.0', col=10, row=1)]\n```\n:::\n:::\n\n\n::: {#b1b6f05b .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:17.229477Z\",\"start_time\":\"2020-05-03T15:33:16.995048Z\"}' execution_count=57}\n``` {.python .cell-code}\ndf.count()\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\n522934\n```\n:::\n:::\n\n\n::: {#3fda13c8 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:20.881392Z\",\"start_time\":\"2020-05-03T15:33:19.624525Z\"}' execution_count=58}\n``` {.python .cell-code}\n# What are the features related to campaign_id 1204 ?\nfeatures_names = \\\n    df.select('feature_name')\\\n    .distinct()\\\n    .toPandas()['feature_name']\n```\n:::\n\n\n::: {#c0f9fb13 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:21.818568Z\",\"start_time\":\"2020-05-03T15:33:21.812810Z\"}' execution_count=59}\n``` {.python .cell-code}\nfeatures_names\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\n0      n_events_per_website_id#25\n1     n_events_per_weekday#Sunday\n2      n_events_per_website_id#42\n3             n_events_per_hour#0\n4            n_events_per_hour#10\n                 ...             \n93           n_events_per_hour#19\n94     n_events_per_website_id#60\n95     n_events_per_website_id#29\n96    n_events_per_weekday#Monday\n97     n_events_per_website_id#32\nName: feature_name, Length: 98, dtype: object\n```\n:::\n:::\n\n\n::: {#238cf6e6 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:27.083141Z\",\"start_time\":\"2020-05-03T15:33:27.078374Z\"}' execution_count=60}\n``` {.python .cell-code}\n[feature_name for feature_name in features_names if '1204' in feature_name]\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\n['n_events_per_category_id#1204.0',\n 'n_actions_per_category_id#C#1204.0',\n 'n_actions_per_category_id#O#1204.0']\n```\n:::\n:::\n\n\n::: {#4e87d289 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:28.560631Z\",\"start_time\":\"2020-05-03T15:33:27.903921Z\"}' execution_count=61}\n``` {.python .cell-code}\n# Look for the xid that have at least one exposure to campaign 1204\nkeep = func.when(\n    (col('feature_name') == 'n_actions_per_category_id#C#1204.0') |\n    (col('feature_name') == 'n_actions_per_category_id#O#1204.0'),\n    1).otherwise(0)\ndf = df.withColumn('keep', keep)\n\ndf.where(col('keep') > 0).count()\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\n10999\n```\n:::\n:::\n\n\n::: {#8174d61e .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:31.274277Z\",\"start_time\":\"2020-05-03T15:33:31.244066Z\"}' execution_count=62}\n``` {.python .cell-code}\n# Sum of the keeps :)\nxid_partition = Window.partitionBy('xid')\nsum_keep = func.sum(col('keep')).over(xid_partition)\ndf = df.withColumn('sum_keep', sum_keep)\n```\n:::\n\n\n::: {#b9dcfc77 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:31.467139Z\",\"start_time\":\"2020-05-03T15:33:31.404561Z\"}' execution_count=63}\n``` {.python .cell-code}\n# Let's keep the xid exposed to 1204\ndf = df.where(col('sum_keep') > 0)\n```\n:::\n\n\n::: {#e6f01c3e .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:34.619928Z\",\"start_time\":\"2020-05-03T15:33:31.572475Z\"}' execution_count=64}\n``` {.python .cell-code}\ndf.count()\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n157580\n```\n:::\n:::\n\n\n::: {#c9a43be7 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:37.918500Z\",\"start_time\":\"2020-05-03T15:33:34.622711Z\"}' execution_count=65}\n``` {.python .cell-code}\ndf.select('xid').distinct().count()\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n10989\n```\n:::\n:::\n\n\n::: {#ecc1213b .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:52.607777Z\",\"start_time\":\"2020-05-03T15:33:40.110545Z\"}' execution_count=66}\n``` {.python .cell-code}\nrow_partition = Window().orderBy('row')\ncol_partition = Window().orderBy('col')\nrow_new = func.dense_rank().over(row_partition)\ncol_new = func.dense_rank().over(col_partition)\ndf = df.withColumn('row_new', row_new)\ndf = df.withColumn('col_new', col_new)\ncsr_data = df.select('row_new', 'col_new', 'value').toPandas()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:19 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n```\n:::\n:::\n\n\n::: {#05351a05 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:52.617724Z\",\"start_time\":\"2020-05-03T15:33:52.609488Z\"}' execution_count=67}\n``` {.python .cell-code}\ncsr_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row_new</th>\n      <th>col_new</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>192</td>\n      <td>1</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>209</td>\n      <td>1</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3282</td>\n      <td>1</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4821</td>\n      <td>1</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6149</td>\n      <td>1</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#29f6f924 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:33:58.443120Z\",\"start_time\":\"2020-05-03T15:33:52.619858Z\"}' execution_count=68}\n``` {.python .cell-code}\nfeatures_names = df.select('feature_name', 'col_new').distinct()\nfeatures_names.where(col('feature_name') == 'n_actions_per_category_id#C#1204.0').head()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/03/10 17:31:20 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:20 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:20 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:20 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:20 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:20 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:20 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\nRow(feature_name='n_actions_per_category_id#C#1204.0', col_new=2)\n```\n:::\n:::\n\n\n::: {#9499b57e .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:04.104342Z\",\"start_time\":\"2020-05-03T15:33:58.445504Z\"}' execution_count=69}\n``` {.python .cell-code}\nfeatures_names.where(col('feature_name') == 'n_actions_per_category_id#O#1204.0').head()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/03/10 17:31:20 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:20 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:20 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:21 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:21 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:21 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:21 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\nRow(feature_name='n_actions_per_category_id#O#1204.0', col_new=4)\n```\n:::\n:::\n\n\n::: {#5166b3a9 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:11.510538Z\",\"start_time\":\"2020-05-03T15:34:11.454802Z\"}' execution_count=70}\n``` {.python .cell-code}\nfrom scipy.sparse import csr_matrix\nimport numpy as np\n\nrows = csr_data['row_new'].values - 1\ncols = csr_data['col_new'].values - 1\nvals = csr_data['value'].values\n\nX_csr = csr_matrix((vals, (rows, cols)))\n```\n:::\n\n\n::: {#2857d4b3 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:11.977267Z\",\"start_time\":\"2020-05-03T15:34:11.972602Z\"}' execution_count=71}\n``` {.python .cell-code}\nX_csr.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n(10989, 82)\n```\n:::\n:::\n\n\n::: {#133c1999 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:28.207343Z\",\"start_time\":\"2020-05-03T15:34:28.202443Z\"}' execution_count=72}\n``` {.python .cell-code}\nX_csr.shape, X_csr.nnz\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\n((10989, 82), 131779)\n```\n:::\n:::\n\n\n::: {#7668aea5 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:30.978599Z\",\"start_time\":\"2020-05-03T15:34:30.972909Z\"}' execution_count=73}\n``` {.python .cell-code}\nX_csr.nnz / (X_csr.shape[0]* X_csr.shape[1])   # 0152347 * 92)\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\n0.14624269502318282\n```\n:::\n:::\n\n\n::: {#41e053f5 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:32.871960Z\",\"start_time\":\"2020-05-03T15:34:32.860482Z\"}' execution_count=74}\n``` {.python .cell-code}\n# The label vector. Let's make it dense, flat and binary\ny = np.array(X_csr[:, 1].todense()).ravel()\ny = np.array(y > 0, dtype=np.int64)\n```\n:::\n\n\n::: {#69dc8933 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:33.348181Z\",\"start_time\":\"2020-05-03T15:34:33.343110Z\"}' execution_count=75}\n``` {.python .cell-code}\nX_csr.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\n(10989, 82)\n```\n:::\n:::\n\n\n::: {#81f86fd1 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:37.382059Z\",\"start_time\":\"2020-05-03T15:34:37.371588Z\"}' execution_count=76}\n``` {.python .cell-code}\n# We remove the second and fourth column. \n# It actually contain the label we'll want to predict.\nkept_cols = list(range(X_csr.shape[1]))\nkept_cols.pop(1)\nkept_cols.pop(2)\nX = X_csr[:, kept_cols]\n```\n:::\n\n\n::: {#feae4e25 .cell execution_count=77}\n``` {.python .cell-code}\nlen(kept_cols)\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n```\n80\n```\n:::\n:::\n\n\n::: {#8637a0dd .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:38.375629Z\",\"start_time\":\"2020-05-03T15:34:38.369734Z\"}' execution_count=78}\n``` {.python .cell-code}\nX_csr.shape, X.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\n((10989, 82), (10989, 80))\n```\n:::\n:::\n\n\n## Finally !!\n\nWow ! That was a lot of work. Now we have a features matrix $X$ and a vector of labels $y$.\n\n::: {#fe44e0d2 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:40.526092Z\",\"start_time\":\"2020-05-03T15:34:40.521420Z\"}' execution_count=79}\n``` {.python .cell-code}\nX.indices\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\narray([ 3,  4,  5, ..., 77, 78, 79], shape=(120780,), dtype=int32)\n```\n:::\n:::\n\n\n::: {#911ee2bb .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:40.750471Z\",\"start_time\":\"2020-05-03T15:34:40.744670Z\"}' execution_count=80}\n``` {.python .cell-code}\nX.indptr\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\narray([     0,     10,     20, ..., 120760, 120770, 120780],\n      shape=(10990,), dtype=int32)\n```\n:::\n:::\n\n\n::: {#dc18156d .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:40.974359Z\",\"start_time\":\"2020-05-03T15:34:40.969638Z\"}' execution_count=81}\n``` {.python .cell-code}\nX.shape, X.nnz\n```\n\n::: {.cell-output .cell-output-display execution_count=80}\n```\n((10989, 80), 120780)\n```\n:::\n:::\n\n\n::: {#d30c971d .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:34:41.220722Z\",\"start_time\":\"2020-05-03T15:34:41.213466Z\"}' execution_count=82}\n``` {.python .cell-code}\ny.shape, y.sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\n((10989,), np.int64(92))\n```\n:::\n:::\n\n\n# Some learning for/from this data\n\n::: {#9c42268c .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:51:21.964565Z\",\"start_time\":\"2020-05-03T15:51:20.939544Z\"}' execution_count=83}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import MaxAbsScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Normalize the features\nX = MaxAbsScaler().fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.3)\n\nclf = LogisticRegression(\n    penalty='l2',\n    C=1e3,\n    solver='lbfgs',\n    class_weight='balanced'\n)\n\nclf.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```{=html}\n<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: #000;\n  --sklearn-color-text-muted: #666;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: flex;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n  align-items: start;\n  justify-content: space-between;\n  gap: 0.5em;\n}\n\n#sk-container-id-1 label.sk-toggleable__label .caption {\n  font-size: 0.6rem;\n  font-weight: lighter;\n  color: var(--sklearn-color-text-muted);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 0.5em;\n  text-align: center;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(C=1000.0, class_weight=&#x27;balanced&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=1000.0, class_weight=&#x27;balanced&#x27;)</pre></div> </div></div></div></div>\n```\n:::\n:::\n\n\n::: {#987d03f5 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:51:22.820046Z\",\"start_time\":\"2020-05-03T15:51:22.809009Z\"}' execution_count=84}\n``` {.python .cell-code}\nfeatures_names = features_names.toPandas()['feature_name']\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/03/10 17:31:21 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:21 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:21 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:21 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:21 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:21 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n```\n:::\n:::\n\n\n::: {#a6bcd1f9 .cell execution_count=85}\n``` {.python .cell-code}\nfeatures_names[range(6)]\n```\n\n::: {.cell-output .cell-output-display execution_count=84}\n```\n0    n_actions_per_category_id#C#1002.0\n1    n_actions_per_category_id#C#1204.0\n2    n_actions_per_category_id#O#1002.0\n3    n_actions_per_category_id#O#1204.0\n4            n_days_since_last_action#C\n5            n_days_since_last_action#O\nName: feature_name, dtype: object\n```\n:::\n:::\n\n\n::: {#8198bcec .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:51:25.078266Z\",\"start_time\":\"2020-05-03T15:51:23.622795Z\"}' execution_count=86}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n%matplotlib inline\n```\n:::\n\n\n::: {#1e6f2140 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:51:25.078266Z\",\"start_time\":\"2020-05-03T15:51:23.622795Z\"}' execution_count=87}\n``` {.python .cell-code}\nplt.figure(figsize=(16, 5))\nplt.stem(clf.coef_[0]) # , use_line_collection=True)\nplt.title('Logistic regression coefficients', fontsize=18)\n```\n\n::: {.cell-output .cell-output-display execution_count=86}\n```\nText(0.5, 1.0, 'Logistic regression coefficients')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook08_webdata_files/figure-ipynb/cell-88-output-2.png){}\n:::\n:::\n\n\n::: {#42c6e20c .cell execution_count=88}\n``` {.python .cell-code}\nclf.coef_[0].shape[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=87}\n```\n80\n```\n:::\n:::\n\n\n::: {#d1709eda .cell execution_count=89}\n``` {.python .cell-code}\nlen(features_names)\n```\n\n::: {.cell-output .cell-output-display execution_count=88}\n```\n82\n```\n:::\n:::\n\n\n::: {#03743208 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:51:25.078266Z\",\"start_time\":\"2020-05-03T15:51:23.622795Z\"}' execution_count=90}\n``` {.python .cell-code}\n# We change the fontsize of minor ticks label\n_ = plt.xticks(np.arange(clf.coef_[0].shape[0]), features_names, \n           rotation='vertical', fontsize=8)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ValueError</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[89], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># We change the fontsize of minor ticks label</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> _ <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">plt</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">xticks</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">arange</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">clf</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">coef_</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">]</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">shape</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">features_names</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span class=\"ansi-yellow-bg\">           </span><span class=\"ansi-yellow-bg\">rotation</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">vertical</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">fontsize</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">8</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/matplotlib/pyplot.py:2245</span>, in <span class=\"ansi-cyan-fg\">xticks</span><span class=\"ansi-blue-fg\">(ticks, labels, minor, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2243</span>         l<span style=\"color:rgb(98,98,98)\">.</span>_internal_update(kwargs)\n<span class=\"ansi-green-fg ansi-bold\">   2244</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg\">-&gt; 2245</span>     labels_out <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">ax</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">set_xticklabels</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">labels</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">minor</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">minor</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2247</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> locs, labels_out\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/matplotlib/axes/_base.py:74</span>, in <span class=\"ansi-cyan-fg\">_axis_method_wrapper.__set_name__.&lt;locals&gt;.wrapper</span><span class=\"ansi-blue-fg\">(self, *args, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">     73</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">wrapper</span>(<span style=\"color:rgb(0,135,0)\">self</span>, <span style=\"color:rgb(98,98,98)\">*</span>args, <span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span>kwargs):\n<span class=\"ansi-green-fg\">---&gt; 74</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">get_method</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">args</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/matplotlib/axis.py:2117</span>, in <span class=\"ansi-cyan-fg\">Axis.set_ticklabels</span><span class=\"ansi-blue-fg\">(self, labels, minor, fontdict, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2113</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(locator, mticker<span style=\"color:rgb(98,98,98)\">.</span>FixedLocator):\n<span class=\"ansi-green-fg ansi-bold\">   2114</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Passing [] as a list of labels is often used as a way to</span>\n<span class=\"ansi-green-fg ansi-bold\">   2115</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># remove all tick labels, so only error for &gt; 0 labels</span>\n<span class=\"ansi-green-fg ansi-bold\">   2116</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">len</span>(locator<span style=\"color:rgb(98,98,98)\">.</span>locs) <span style=\"color:rgb(98,98,98)\">!=</span> <span style=\"color:rgb(0,135,0)\">len</span>(labels) <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> <span style=\"color:rgb(0,135,0)\">len</span>(labels) <span style=\"color:rgb(98,98,98)\">!=</span> <span style=\"color:rgb(98,98,98)\">0</span>:\n<span class=\"ansi-green-fg\">-&gt; 2117</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ValueError</span>(\n<span class=\"ansi-green-fg ansi-bold\">   2118</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The number of FixedLocator locations</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">   2119</span>             <span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\"> (</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span><span style=\"color:rgb(0,135,0)\">len</span>(locator<span style=\"color:rgb(98,98,98)\">.</span>locs)<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">), usually from a call to</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">   2120</span>             <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\"> set_ticks, does not match</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">   2121</span>             <span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\"> the number of labels (</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span><span style=\"color:rgb(0,135,0)\">len</span>(labels)<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">).</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">   2122</span>     tickd <span style=\"color:rgb(98,98,98)\">=</span> {loc: lab <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> loc, lab <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">zip</span>(locator<span style=\"color:rgb(98,98,98)\">.</span>locs, labels)}\n<span class=\"ansi-green-fg ansi-bold\">   2123</span>     func <span style=\"color:rgb(98,98,98)\">=</span> functools<span style=\"color:rgb(98,98,98)\">.</span>partial(<span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_format_with_dict, tickd)\n\n<span class=\"ansi-red-fg\">ValueError</span>: The number of FixedLocator locations (80), usually from a call to set_ticks, does not match the number of labels (82).</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook08_webdata_files/figure-ipynb/cell-91-output-2.png){}\n:::\n:::\n\n\n::: {#573f78db .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:51:25.078266Z\",\"start_time\":\"2020-05-03T15:51:23.622795Z\"}' execution_count=91}\n``` {.python .cell-code}\n_ = plt.yticks(fontsize=14)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook08_webdata_files/figure-ipynb/cell-92-output-1.png){}\n:::\n:::\n\n\n::: {#872055d1 .cell ExecuteTime='{\"end_time\":\"2020-05-03T15:51:25.280157Z\",\"start_time\":\"2020-05-03T15:51:25.081464Z\"}' execution_count=92}\n``` {.python .cell-code}\nfrom sklearn.metrics import precision_recall_curve, f1_score\n\nprecision, recall, _ = precision_recall_curve(y_test, clf.predict_proba(X_test)[:, 1])\n    \nplt.figure(figsize=(8, 6))\nplt.plot(recall, precision, label='LR (F1=%.2f)' % f1_score(y_test, clf.predict(X_test)), lw=2)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('Recall', fontsize=16)\nplt.ylabel('Precision', fontsize=16)\nplt.title('Precision/recall curve', fontsize=18)\nplt.legend(loc=\"upper right\", fontsize=14)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook08_webdata_files/figure-ipynb/cell-93-output-1.png){}\n:::\n:::\n\n\n# Analyse the tables \n\n::: {#4ce3a236 .cell execution_count=93}\n``` {.python .cell-code}\nquery = \"\"\"ANALYZE TABLE db_table COMPUTE STATISTICS\n            FOR COLUMNS xid\"\"\"\n```\n:::\n\n\n::: {#0908443c .cell execution_count=94}\n``` {.python .cell-code}\ndf.createOrReplaceTempView(\"db_table\")\n```\n:::\n\n\n::: {#d86aec1b .cell execution_count=95}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=94}\n```\n['xid',\n 'value',\n 'feature_name',\n 'col',\n 'row',\n 'keep',\n 'sum_keep',\n 'row_new',\n 'col_new']\n```\n:::\n:::\n\n\n::: {#1baa7e42 .cell execution_count=96}\n``` {.python .cell-code}\nspark.sql(\"cache table db_table\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/03/10 17:31:22 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:22 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:22 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:22 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:22 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:22 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:22 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:22 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:22 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:23 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:23 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:23 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:23 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:23 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:23 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:23 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n25/03/10 17:31:23 WARN WindowExec: No Partition Defined for Window operation! Moving all data to a single partition, this can cause serious performance degradation.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=95}\n```\nDataFrame[]\n```\n:::\n:::\n\n\n::: {#2ebb5928 .cell execution_count=97}\n``` {.python .cell-code}\nspark.sql(query)\n```\n\n::: {.cell-output .cell-output-display execution_count=96}\n```\nDataFrame[]\n```\n:::\n:::\n\n\n::: {#f83953c1 .cell execution_count=98}\n``` {.python .cell-code}\nspark.sql(\"show tables\")\n```\n\n::: {.cell-output .cell-output-display execution_count=97}\n```\nDataFrame[namespace: string, tableName: string, isTemporary: boolean]\n```\n:::\n:::\n\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /usr/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.3\n---\n",
    "supporting": [
      "notebook08_webdata_files"
    ],
    "filters": []
  }
}