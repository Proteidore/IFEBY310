{
  "hash": "9b494396354c2aab1b62574df7c2287d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: '`DataFrame`'\njupyter: python3\n---\n\n::: {#a2c6b5a5 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport sys\n\nos.environ['PYSPARK_PYTHON'] = sys.executable\nos.environ['PYSPARK_DRIVER_PYTHON'] = sys.executable\n```\n:::\n\n\n::: {#d9cc20e0 .cell ExecuteTime='{\"end_time\":\"2022-02-08T20:23:05.867529Z\",\"start_time\":\"2022-02-08T20:23:01.418071Z\"}' execution_count=2}\n``` {.python .cell-code}\nfrom pyspark import SparkConf, SparkContext\nfrom pyspark.sql import SparkSession\n\nconf = SparkConf().setAppName(\"Spark SQL Course\")\nsc = SparkContext(conf=conf)  # no need for Spark 3...\n\nspark = (SparkSession\n    .builder\n    .appName(\"Spark SQL Course\")\n    .getOrCreate()\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/01/17 22:42:50 WARN Utils: Your hostname, boucheron-Precision-5480 resolves to a loopback address: 127.0.1.1; using 192.168.10.120 instead (on interface wlp0s20f3)\n25/01/17 22:42:50 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n25/01/17 22:42:50 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n```\n:::\n:::\n\n\n::: {#8f29bb69 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:46.926825Z\",\"start_time\":\"2022-01-26T10:58:46.920913Z\"}' execution_count=3}\n``` {.python .cell-code}\nfrom pyspark.sql import Row\n\nrow1 = Row(name=\"John\", age=21)\nrow2 = Row(name=\"James\", age=32)\nrow3 = Row(name=\"Jane\", age=18)\nrow1['name']\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'John'\n```\n:::\n:::\n\n\n::: {#1107bd7b .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:57.185741Z\",\"start_time\":\"2022-01-26T10:58:57.155181Z\"}' execution_count=4}\n``` {.python .cell-code}\ndf = spark.createDataFrame([row1, row2, row3])\n```\n:::\n\n\n::: {#715b5b71 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:59:13.491438Z\",\"start_time\":\"2022-01-26T10:59:13.486119Z\"}' execution_count=5}\n``` {.python .cell-code}\ndf.printSchema()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nroot\n |-- name: string (nullable = true)\n |-- age: long (nullable = true)\n\n```\n:::\n:::\n\n\n::: {#14fce636 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:59:17.760344Z\",\"start_time\":\"2022-01-26T10:59:17.597166Z\"}' execution_count=6}\n``` {.python .cell-code}\ndf.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 0:>                                                          (0 + 1) / 1]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n+-----+---+\n| name|age|\n+-----+---+\n| John| 21|\n|James| 32|\n| Jane| 18|\n+-----+---+\n\n```\n:::\n:::\n\n\n::: {#a14b2e1f .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:59:25.889372Z\",\"start_time\":\"2022-01-26T10:59:25.866666Z\"}' execution_count=7}\n``` {.python .cell-code}\nprint(df.rdd.toDebugString().decode(\"utf-8\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(20) MapPartitionsRDD[10] at javaToPython at NativeMethodAccessorImpl.java:0 []\n |   MapPartitionsRDD[9] at javaToPython at NativeMethodAccessorImpl.java:0 []\n |   SQLExecutionRDD[8] at javaToPython at NativeMethodAccessorImpl.java:0 []\n |   MapPartitionsRDD[7] at javaToPython at NativeMethodAccessorImpl.java:0 []\n |   MapPartitionsRDD[4] at applySchemaToPythonRDD at NativeMethodAccessorImpl.java:0 []\n |   MapPartitionsRDD[3] at map at SerDeUtil.scala:69 []\n |   MapPartitionsRDD[2] at mapPartitions at SerDeUtil.scala:117 []\n |   PythonRDD[1] at RDD at PythonRDD.scala:53 []\n |   ParallelCollectionRDD[0] at readRDDFromFile at PythonRDD.scala:289 []\n```\n:::\n:::\n\n\n::: {#5c486890 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:59:45.432264Z\",\"start_time\":\"2022-01-26T10:59:45.426727Z\"}' execution_count=8}\n``` {.python .cell-code}\ndf.rdd.getNumPartitions()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n20\n```\n:::\n:::\n\n\n## Creating dataframes\n\n::: {#29c3b380 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:18.707591Z\",\"start_time\":\"2022-01-26T10:58:18.220608Z\"}' execution_count=9}\n``` {.python .cell-code}\nrows = [\n    Row(name=\"John\", age=21, gender=\"male\"),\n    Row(name=\"James\", age=25, gender=\"female\"),\n    Row(name=\"Albert\", age=46, gender=\"male\")\n]\n\ndf = spark.createDataFrame(rows)\n```\n:::\n\n\n::: {#2c2e59fa .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:18.707591Z\",\"start_time\":\"2022-01-26T10:58:18.220608Z\"}' execution_count=10}\n``` {.python .cell-code}\ndf.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+------+---+------+\n|  name|age|gender|\n+------+---+------+\n|  John| 21|  male|\n| James| 25|female|\n|Albert| 46|  male|\n+------+---+------+\n\n```\n:::\n:::\n\n\n::: {#e1de5155 .cell execution_count=11}\n``` {.python .cell-code}\nhelp(Row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on class Row in module pyspark.sql.types:\n\nclass Row(builtins.tuple)\n |  Row(*args: Optional[str], **kwargs: Optional[Any]) -> 'Row'\n |\n |  A row in :class:`DataFrame`.\n |  The fields in it can be accessed:\n |\n |  * like attributes (``row.key``)\n |  * like dictionary values (``row[key]``)\n |\n |  ``key in row`` will search through row keys.\n |\n |  Row can be used to create a row object by using named arguments.\n |  It is not allowed to omit a named argument to represent that the value is\n |  None or missing. This should be explicitly set to None in this case.\n |\n |  .. versionchanged:: 3.0.0\n |      Rows created from named arguments no longer have\n |      field names sorted alphabetically and will be ordered in the position as\n |      entered.\n |\n |  Examples\n |  --------\n |  >>> from pyspark.sql import Row\n |  >>> row = Row(name=\"Alice\", age=11)\n |  >>> row\n |  Row(name='Alice', age=11)\n |  >>> row['name'], row['age']\n |  ('Alice', 11)\n |  >>> row.name, row.age\n |  ('Alice', 11)\n |  >>> 'name' in row\n |  True\n |  >>> 'wrong_key' in row\n |  False\n |\n |  Row also can be used to create another Row like class, then it\n |  could be used to create Row objects, such as\n |\n |  >>> Person = Row(\"name\", \"age\")\n |  >>> Person\n |  <Row('name', 'age')>\n |  >>> 'name' in Person\n |  True\n |  >>> 'wrong_key' in Person\n |  False\n |  >>> Person(\"Alice\", 11)\n |  Row(name='Alice', age=11)\n |\n |  This form can also be used to create rows as tuple values, i.e. with unnamed\n |  fields.\n |\n |  >>> row1 = Row(\"Alice\", 11)\n |  >>> row2 = Row(name=\"Alice\", age=11)\n |  >>> row1 == row2\n |  True\n |\n |  Method resolution order:\n |      Row\n |      builtins.tuple\n |      builtins.object\n |\n |  Methods defined here:\n |\n |  __call__(self, *args: Any) -> 'Row'\n |      create new Row object\n |\n |  __contains__(self, item: Any) -> bool\n |      Return bool(key in self).\n |\n |  __getattr__(self, item: str) -> Any\n |\n |  __getitem__(self, item: Any) -> Any\n |      Return self[key].\n |\n |  __reduce__(self) -> Union[str, Tuple[Any, ...]]\n |      Returns a tuple so Python knows how to pickle Row.\n |\n |  __repr__(self) -> str\n |      Printable representation of Row used in Python REPL.\n |\n |  __setattr__(self, key: Any, value: Any) -> None\n |      Implement setattr(self, name, value).\n |\n |  asDict(self, recursive: bool = False) -> Dict[str, Any]\n |      Return as a dict\n |\n |      Parameters\n |      ----------\n |      recursive : bool, optional\n |          turns the nested Rows to dict (default: False).\n |\n |      Notes\n |      -----\n |      If a row contains duplicate field names, e.g., the rows of a join\n |      between two :class:`DataFrame` that both have the fields of same names,\n |      one of the duplicate fields will be selected by ``asDict``. ``__getitem__``\n |      will also return one of the duplicate fields, however returned value might\n |      be different to ``asDict``.\n |\n |      Examples\n |      --------\n |      >>> from pyspark.sql import Row\n |      >>> Row(name=\"Alice\", age=11).asDict() == {'name': 'Alice', 'age': 11}\n |      True\n |      >>> row = Row(key=1, value=Row(name='a', age=2))\n |      >>> row.asDict() == {'key': 1, 'value': Row(name='a', age=2)}\n |      True\n |      >>> row.asDict(True) == {'key': 1, 'value': {'name': 'a', 'age': 2}}\n |      True\n |\n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |\n |  __new__(cls, *args: Optional[str], **kwargs: Optional[Any]) -> 'Row'\n |      Create and return a new object.  See help(type) for accurate signature.\n |\n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |\n |  __dict__\n |      dictionary for instance variables\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.tuple:\n |\n |  __add__(self, value, /)\n |      Return self+value.\n |\n |  __eq__(self, value, /)\n |      Return self==value.\n |\n |  __ge__(self, value, /)\n |      Return self>=value.\n |\n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |\n |  __getnewargs__(self, /)\n |\n |  __gt__(self, value, /)\n |      Return self>value.\n |\n |  __hash__(self, /)\n |      Return hash(self).\n |\n |  __iter__(self, /)\n |      Implement iter(self).\n |\n |  __le__(self, value, /)\n |      Return self<=value.\n |\n |  __len__(self, /)\n |      Return len(self).\n |\n |  __lt__(self, value, /)\n |      Return self<value.\n |\n |  __mul__(self, value, /)\n |      Return self*value.\n |\n |  __ne__(self, value, /)\n |      Return self!=value.\n |\n |  __rmul__(self, value, /)\n |      Return value*self.\n |\n |  count(self, value, /)\n |      Return number of occurrences of value.\n |\n |  index(self, value, start=0, stop=9223372036854775807, /)\n |      Return first index of value.\n |\n |      Raises ValueError if the value is not present.\n |\n |  ----------------------------------------------------------------------\n |  Class methods inherited from builtins.tuple:\n |\n |  __class_getitem__(...)\n |      See PEP 585\n\n```\n:::\n:::\n\n\n::: {#76a7e571 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:19.065539Z\",\"start_time\":\"2022-01-26T10:58:18.710711Z\"}' execution_count=12}\n``` {.python .cell-code}\ncolumn_names = [\"name\", \"age\", \"gender\"]\nrows = [\n    [\"John\", 21, \"male\"],\n    [\"James\", 25, \"female\"],\n    [\"Albert\", 46, \"male\"]\n]\ndf = spark.createDataFrame(rows, column_names)\ndf.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+------+---+------+\n|  name|age|gender|\n+------+---+------+\n|  John| 21|  male|\n| James| 25|female|\n|Albert| 46|  male|\n+------+---+------+\n\n```\n:::\n:::\n\n\n::: {#70240cd8 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:19.074335Z\",\"start_time\":\"2022-01-26T10:58:19.068088Z\"}' execution_count=13}\n``` {.python .cell-code}\ndf.printSchema()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nroot\n |-- name: string (nullable = true)\n |-- age: long (nullable = true)\n |-- gender: string (nullable = true)\n\n```\n:::\n:::\n\n\n::: {#f066ef5c .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:19.840178Z\",\"start_time\":\"2022-01-26T10:58:19.077057Z\"}' execution_count=14}\n``` {.python .cell-code}\n# sc = SparkContext(conf=conf)  # no need for Spark 3...\n\ncolumn_names = [\"name\", \"age\", \"gender\"]\nrdd = sc.parallelize([\n    (\"John\", 21, \"male\"),\n    (\"James\", 25, \"female\"),\n    (\"Albert\", 46, \"male\")\n])\ndf = spark.createDataFrame(rdd, column_names)\ndf.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+------+---+------+\n|  name|age|gender|\n+------+---+------+\n|  John| 21|  male|\n| James| 25|female|\n|Albert| 46|  male|\n+------+---+------+\n\n```\n:::\n:::\n\n\n## Schema\n\n::: {#fd65c8f4 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:19.850578Z\",\"start_time\":\"2022-01-26T10:58:19.843835Z\"}' execution_count=15}\n``` {.python .cell-code}\ndf.schema\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nStructType([StructField('name', StringType(), True), StructField('age', LongType(), True), StructField('gender', StringType(), True)])\n```\n:::\n:::\n\n\n::: {#c7cf5a26 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:19.860631Z\",\"start_time\":\"2022-01-26T10:58:19.854012Z\"}' execution_count=16}\n``` {.python .cell-code}\ntype(df.schema)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\npyspark.sql.types.StructType\n```\n:::\n:::\n\n\n::: {#14211f02 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:20.199419Z\",\"start_time\":\"2022-01-26T10:58:19.863528Z\"}' execution_count=17}\n``` {.python .cell-code}\nfrom pyspark.sql.types import *\n\nschema = StructType([\n    StructField(\"name\", StringType(), True),\n    StructField(\"age\", IntegerType(), True),\n    StructField(\"gender\", StringType(), True)\n])\nrows = [(\"John\", 21, \"male\")]\ndf = spark.createDataFrame(rows, schema)\ndf.printSchema()\ndf.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nroot\n |-- name: string (nullable = true)\n |-- age: integer (nullable = true)\n |-- gender: string (nullable = true)\n\n+----+---+------+\n|name|age|gender|\n+----+---+------+\n|John| 21|  male|\n+----+---+------+\n\n```\n:::\n:::\n\n\n# Queries\n\n::: {#8bc4427b .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:20.882311Z\",\"start_time\":\"2022-01-26T10:58:20.201993Z\"}' execution_count=18}\n``` {.python .cell-code}\ncolumn_names = [\"name\", \"age\", \"gender\"]\nrows = [\n    [\"John\", 21, \"male\"],\n    [\"Jane\", 25, \"female\"]\n]\ndf = spark.createDataFrame(rows, column_names)\n\n# Create a temporary view from the DataFrame\ndf.createOrReplaceTempView(\"new_view\")\n\n# Apply the query\nquery = \"SELECT name, age FROM new_view WHERE gender='male'\"\nmen_df = spark.sql(query)\nmen_df.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+\n|name|age|\n+----+---+\n|John| 21|\n+----+---+\n\n```\n:::\n:::\n\n\n## `SELECT`\n\n::: {#73483eef .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:21.162623Z\",\"start_time\":\"2022-01-26T10:58:20.884802Z\"}' execution_count=19}\n``` {.python .cell-code}\ndf.createOrReplaceTempView(\"table\")    \nquery = \"SELECT name, age FROM table\"\nspark.sql(query).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+\n|name|age|\n+----+---+\n|John| 21|\n|Jane| 25|\n+----+---+\n\n```\n:::\n:::\n\n\n::: {#94d7fae5 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:21.388097Z\",\"start_time\":\"2022-01-26T10:58:21.164840Z\"}' execution_count=20}\n``` {.python .cell-code}\ndf.select(\"name\", \"age\").show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+\n|name|age|\n+----+---+\n|John| 21|\n|Jane| 25|\n+----+---+\n\n```\n:::\n:::\n\n\n## `WHERE`\n\n::: {#647da669 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:21.704402Z\",\"start_time\":\"2022-01-26T10:58:21.402155Z\"}' execution_count=21}\n``` {.python .cell-code}\ndf.createOrReplaceTempView(\"table\")\nquery = \"SELECT * FROM table WHERE age > 21\"\nspark.sql(query).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+\n|name|age|gender|\n+----+---+------+\n|Jane| 25|female|\n+----+---+------+\n\n```\n:::\n:::\n\n\n::: {#a80169c5 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:21.924501Z\",\"start_time\":\"2022-01-26T10:58:21.706741Z\"}' execution_count=22}\n``` {.python .cell-code}\ndf.where(\"age > 21\").show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+\n|name|age|gender|\n+----+---+------+\n|Jane| 25|female|\n+----+---+------+\n\n```\n:::\n:::\n\n\n::: {#b3ba6693 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:22.377417Z\",\"start_time\":\"2022-01-26T10:58:21.926708Z\"}' execution_count=23}\n``` {.python .cell-code}\n# Alternatively:\ndf.where(df['age'] > 21).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+\n|name|age|gender|\n+----+---+------+\n|Jane| 25|female|\n+----+---+------+\n\n```\n:::\n:::\n\n\n::: {#877447f7 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:22.566385Z\",\"start_time\":\"2022-01-26T10:58:22.380036Z\"}' execution_count=24}\n``` {.python .cell-code}\ndf.where(df.age > 21).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+\n|name|age|gender|\n+----+---+------+\n|Jane| 25|female|\n+----+---+------+\n\n```\n:::\n:::\n\n\n::: {#037aa720 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:22.837136Z\",\"start_time\":\"2022-01-26T10:58:22.569324Z\"}' execution_count=25}\n``` {.python .cell-code}\n( \n    df.where(\"age > 21\")\n      .select([\"name\", \"age\"])\n      .show()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+\n|name|age|\n+----+---+\n|Jane| 25|\n+----+---+\n\n```\n:::\n:::\n\n\n## `LIMIT`\n\n::: {#f744b3ea .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:23.315363Z\",\"start_time\":\"2022-01-26T10:58:22.842106Z\"}' execution_count=26}\n``` {.python .cell-code}\ndf.createOrReplaceTempView(\"table\")\nquery = query = \"SELECT * FROM table LIMIT 1\"\nspark.sql(query).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+\n|name|age|gender|\n+----+---+------+\n|John| 21|  male|\n+----+---+------+\n\n```\n:::\n:::\n\n\n::: {#5e3bd12b .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:23.522646Z\",\"start_time\":\"2022-01-26T10:58:23.318694Z\"}' execution_count=27}\n``` {.python .cell-code}\ndf.limit(1).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+\n|name|age|gender|\n+----+---+------+\n|John| 21|  male|\n+----+---+------+\n\n```\n:::\n:::\n\n\n::: {#8434f1fb .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:23.778517Z\",\"start_time\":\"2022-01-26T10:58:23.525281Z\"}' execution_count=28}\n``` {.python .cell-code}\ndf.select(\"*\").limit(1).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+\n|name|age|gender|\n+----+---+------+\n|John| 21|  male|\n+----+---+------+\n\n```\n:::\n:::\n\n\n## `ORDER BY`\n\n::: {#dbde1ae6 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:24.190838Z\",\"start_time\":\"2022-01-26T10:58:23.781166Z\"}' execution_count=29}\n``` {.python .cell-code}\ndf.createOrReplaceTempView(\"table\")\n\nquery = \"SELECT * FROM table ORDER BY name ASC\"\n\nspark.sql(query).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+\n|name|age|gender|\n+----+---+------+\n|Jane| 25|female|\n|John| 21|  male|\n+----+---+------+\n\n```\n:::\n:::\n\n\n::: {#f194bdb5 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:24.368069Z\",\"start_time\":\"2022-01-26T10:58:24.193899Z\"}' execution_count=30}\n``` {.python .cell-code}\ndf.orderBy(df.name.asc()).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+\n|name|age|gender|\n+----+---+------+\n|Jane| 25|female|\n|John| 21|  male|\n+----+---+------+\n\n```\n:::\n:::\n\n\n## `ALIAS`\n\n::: {#fc285b95 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:24.643668Z\",\"start_time\":\"2022-01-26T10:58:24.370758Z\"}' execution_count=31}\n``` {.python .cell-code}\ndf.createOrReplaceTempView(\"table\")\nquery = \"SELECT name, age, gender AS sex FROM table\"\nspark.sql(query).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+\n|name|age|   sex|\n+----+---+------+\n|John| 21|  male|\n|Jane| 25|female|\n+----+---+------+\n\n```\n:::\n:::\n\n\n::: {#f58b0fcf .cell execution_count=32}\n``` {.python .cell-code}\ntype(df.age)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\npyspark.sql.column.Column\n```\n:::\n:::\n\n\n::: {#cf40d3c0 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:24.858104Z\",\"start_time\":\"2022-01-26T10:58:24.646119Z\"}' execution_count=33}\n``` {.python .cell-code}\ndf.select(df.name, df.age, df.gender.alias('sex')).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+\n|name|age|   sex|\n+----+---+------+\n|John| 21|  male|\n|Jane| 25|female|\n+----+---+------+\n\n```\n:::\n:::\n\n\n## `CAST`\n\n::: {#722feae5 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:25.072286Z\",\"start_time\":\"2022-01-26T10:58:24.860474Z\"}' execution_count=34}\n``` {.python .cell-code}\ndf.createOrReplaceTempView(\"table\")\nquery = \"SELECT name, cast(age AS float) AS age_f FROM table\"\nspark.sql(query).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+-----+\n|name|age_f|\n+----+-----+\n|John| 21.0|\n|Jane| 25.0|\n+----+-----+\n\n```\n:::\n:::\n\n\n::: {#c2dcedef .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:25.384433Z\",\"start_time\":\"2022-01-26T10:58:25.074523Z\"}' execution_count=35}\n``` {.python .cell-code}\ndf.select(df.name, df.age.cast(\"float\").alias(\"age_f\")).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+-----+\n|name|age_f|\n+----+-----+\n|John| 21.0|\n|Jane| 25.0|\n+----+-----+\n\n```\n:::\n:::\n\n\n::: {#3a2553b3 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:25.648155Z\",\"start_time\":\"2022-01-26T10:58:25.386952Z\"}' execution_count=36}\n``` {.python .cell-code}\nnew_age_col = df.age.cast(\"float\").alias(\"age_f\")\ntype(new_age_col), type(df.age)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n(pyspark.sql.column.Column, pyspark.sql.column.Column)\n```\n:::\n:::\n\n\n::: {#0eec043f .cell execution_count=37}\n``` {.python .cell-code}\ndf.select(df.name, new_age_col).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+-----+\n|name|age_f|\n+----+-----+\n|John| 21.0|\n|Jane| 25.0|\n+----+-----+\n\n```\n:::\n:::\n\n\n## Adding new columns\n\n::: {#9830d335 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:25.931495Z\",\"start_time\":\"2022-01-26T10:58:25.651283Z\"}' execution_count=38}\n``` {.python .cell-code}\ndf.createOrReplaceTempView(\"table\")\nquery = \"SELECT *, 12*age AS age_months FROM table\"\nspark.sql(query).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+----------+\n|name|age|gender|age_months|\n+----+---+------+----------+\n|John| 21|  male|       252|\n|Jane| 25|female|       300|\n+----+---+------+----------+\n\n```\n:::\n:::\n\n\n::: {#4b6b4da9 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:26.195480Z\",\"start_time\":\"2022-01-26T10:58:25.933620Z\"}' execution_count=39}\n``` {.python .cell-code}\ndf.withColumn(\"age_months\", df.age * 12).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+----------+\n|name|age|gender|age_months|\n+----+---+------+----------+\n|John| 21|  male|       252|\n|Jane| 25|female|       300|\n+----+---+------+----------+\n\n```\n:::\n:::\n\n\n::: {#6392a7f9 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:26.422122Z\",\"start_time\":\"2022-01-26T10:58:26.197759Z\"}' execution_count=40}\n``` {.python .cell-code}\ndf.select(\"*\", (df.age * 12).alias(\"age_months\")).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+---+------+----------+\n|name|age|gender|age_months|\n+----+---+------+----------+\n|John| 21|  male|       252|\n|Jane| 25|female|       300|\n+----+---+------+----------+\n\n```\n:::\n:::\n\n\n::: {#410720cc .cell execution_count=41}\n``` {.python .cell-code}\nimport datetime\n\nhui = datetime.date.today()\n\nhui = hui.replace(year=hui.year-21)\n\nstr(hui)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n'2004-01-17'\n```\n:::\n:::\n\n\n::: {#1c7c7675 .cell execution_count=42}\n``` {.python .cell-code}\n# df.select(\"*\", hui.replace(year=hui.year - df.age ).alias(\"yob\")).show()\n```\n:::\n\n\n# Column functions\n\n## Numeric functions examples\n\n::: {#21c0e83f .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:26.748718Z\",\"start_time\":\"2022-01-26T10:58:26.425451Z\"}' execution_count=43}\n``` {.python .cell-code}\nfrom pyspark.sql import functions as fn\n\ncolumns = [\"brand\", \"cost\"]\ndf = spark.createDataFrame([\n    (\"garnier\", 3.49),\n    (\"elseve\", 2.71)\n], columns)\n\nround_cost = fn.round(df.cost, 1)\nfloor_cost = fn.floor(df.cost)\nceil_cost = fn.ceil(df.cost)\n\ndf.withColumn('round', round_cost)\\\n    .withColumn('floor', floor_cost)\\\n    .withColumn('ceil', ceil_cost)\\\n    .show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+-------+----+-----+-----+----+\n|  brand|cost|round|floor|ceil|\n+-------+----+-----+-----+----+\n|garnier|3.49|  3.5|    3|   4|\n| elseve|2.71|  2.7|    2|   3|\n+-------+----+-----+-----+----+\n\n```\n:::\n:::\n\n\n## String functions examples\n\n::: {#89598fd5 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:27.055563Z\",\"start_time\":\"2022-01-26T10:58:26.751235Z\"}' execution_count=44}\n``` {.python .cell-code}\nfrom pyspark.sql import functions as fn\n\ncolumns = [\"first_name\", \"last_name\"]\n\ndf = spark.createDataFrame([\n    (\"John\", \"Doe\"),\n    (\"Mary\", \"Jane\")\n], columns)\n\nlast_name_initial = fn.substring(df.last_name, 0, 1)\n# last_name_initial_dotted = fn.concat(last_name_initial, \".\")\n\nname = fn.concat_ws(\" \", df.first_name, last_name_initial)\ndf.withColumn(\"name\", name).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+---------+------+\n|first_name|last_name|  name|\n+----------+---------+------+\n|      John|      Doe|John D|\n|      Mary|     Jane|Mary J|\n+----------+---------+------+\n\n```\n:::\n:::\n\n\n::: {#e40f9c36 .cell execution_count=45}\n``` {.python .cell-code}\n( \n    df.selectExpr(\"*\", \"substring(last_name, 0, 1) as lni\")\n      .selectExpr(\"first_name\", \"last_name\", \"concat(first_name, ' ', lni, '.') as nname\")\n      .show()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+---------+-------+\n|first_name|last_name|  nname|\n+----------+---------+-------+\n|      John|      Doe|John D.|\n|      Mary|     Jane|Mary J.|\n+----------+---------+-------+\n\n```\n:::\n:::\n\n\n## Date functions examples\n\n::: {#87fc2ccc .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:27.373396Z\",\"start_time\":\"2022-01-26T10:58:27.057938Z\"}' execution_count=46}\n``` {.python .cell-code}\nfrom datetime import date\nfrom pyspark.sql import functions as fn\n\ndf = spark.createDataFrame([\n    (date(2015, 1, 1), date(2015, 1, 15)),\n    (date(2015, 2, 21), date(2015, 3, 8)),\n], [\"start_date\", \"end_date\"])\n\ndays_between = fn.datediff(df.end_date, df.start_date)\nstart_month = fn.month(df.start_date)\n\ndf.withColumn('days_between', days_between)\\\n    .withColumn('start_month', start_month)\\\n    .show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+----------+------------+-----------+\n|start_date|  end_date|days_between|start_month|\n+----------+----------+------------+-----------+\n|2015-01-01|2015-01-15|          14|          1|\n|2015-02-21|2015-03-08|          15|          2|\n+----------+----------+------------+-----------+\n\n```\n:::\n:::\n\n\n::: {#8434e6ff .cell execution_count=47}\n``` {.python .cell-code}\nstr(date(2015, 1, 1) - date(2015, 1, 15))\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n'-14 days, 0:00:00'\n```\n:::\n:::\n\n\n::: {#3e22c55f .cell execution_count=48}\n``` {.python .cell-code}\nfrom datetime import timedelta\n\ndate(2023, 2 , 14) + timedelta(days=3)\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\ndatetime.date(2023, 2, 17)\n```\n:::\n:::\n\n\n## Conditional transformations\n\n::: {#3d382133 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:27.630822Z\",\"start_time\":\"2022-01-26T10:58:27.375855Z\"}' execution_count=49}\n``` {.python .cell-code}\ndf = spark.createDataFrame([\n    (\"John\", 21, \"male\"),\n    (\"Jane\", 25, \"female\"),\n    (\"Albert\", 46, \"male\"),\n    (\"Brad\", 49, \"super-hero\")\n], [\"name\", \"age\", \"gender\"])\n```\n:::\n\n\n::: {#068e2f3b .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:27.630822Z\",\"start_time\":\"2022-01-26T10:58:27.375855Z\"}' execution_count=50}\n``` {.python .cell-code}\nsupervisor = ( \n    fn.when(df.gender == 'male', 'Mr. Smith')\n      .when(df.gender == 'female', 'Miss Jones')\n      .otherwise('NA')\n)\n\ntype(supervisor), type(fn.when)\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n(pyspark.sql.column.Column, function)\n```\n:::\n:::\n\n\n::: {#941432fe .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:27.630822Z\",\"start_time\":\"2022-01-26T10:58:27.375855Z\"}' execution_count=51}\n``` {.python .cell-code}\ndf.withColumn(\"supervisor\", supervisor).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+------+---+----------+----------+\n|  name|age|    gender|supervisor|\n+------+---+----------+----------+\n|  John| 21|      male| Mr. Smith|\n|  Jane| 25|    female|Miss Jones|\n|Albert| 46|      male| Mr. Smith|\n|  Brad| 49|super-hero|        NA|\n+------+---+----------+----------+\n\n```\n:::\n:::\n\n\n## User-defined functions\n\n::: {#0880aae2 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:28.037428Z\",\"start_time\":\"2022-01-26T10:58:27.633093Z\"}' execution_count=52}\n``` {.python .cell-code}\nfrom pyspark.sql import functions as fn\nfrom pyspark.sql.types import StringType\n\ndf = spark.createDataFrame([(1, 3), (4, 2)], [\"first\", \"second\"])\n\ndef my_func(col_1, col_2):\n    if (col_1 > col_2):\n        return \"{} is bigger than {}\".format(col_1, col_2)\n    else:\n        return \"{} is bigger than {}\".format(col_2, col_1)\n\nmy_udf = fn.udf(my_func, StringType())\n\ndf.withColumn(\"udf\", my_udf(df['first'], df['second'])).show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 92:>                                                         (0 + 1) / 1]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n+-----+------+------------------+\n|first|second|               udf|\n+-----+------+------------------+\n|    1|     3|3 is bigger than 1|\n|    4|     2|4 is bigger than 2|\n+-----+------+------------------+\n\n```\n:::\n:::\n\n\n# Joins\n\n## Using the `spark.sql` API\n\n::: {#9ef0b5e3 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:29.098957Z\",\"start_time\":\"2022-01-26T10:58:28.042691Z\"}' execution_count=53}\n``` {.python .cell-code}\nfrom datetime import date\n\nproducts = spark.createDataFrame([\n    ('1', 'mouse', 'microsoft', 39.99),\n    ('2', 'keyboard', 'logitech', 59.99),\n], ['prod_id', 'prod_cat', 'prod_brand', 'prod_value'])\n\npurchases = spark.createDataFrame([\n    (date(2017, 11, 1), 2, '1'),\n    (date(2017, 11, 2), 1, '1'),\n    (date(2017, 11, 5), 1, '2'),\n], ['date', 'quantity', 'prod_id'])\n\n# The default join type is the \"INNER\" join\npurchases.join(products, 'prod_id').show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+-------+----------+--------+--------+----------+----------+\n|prod_id|      date|quantity|prod_cat|prod_brand|prod_value|\n+-------+----------+--------+--------+----------+----------+\n|      1|2017-11-01|       2|   mouse| microsoft|     39.99|\n|      1|2017-11-02|       1|   mouse| microsoft|     39.99|\n|      2|2017-11-05|       1|keyboard|  logitech|     59.99|\n+-------+----------+--------+--------+----------+----------+\n\n```\n:::\n:::\n\n\n::: {#d7cabb24 .cell execution_count=54}\n``` {.python .cell-code}\npurchases.join(products, 'prod_id').explain()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Physical Plan ==\nAdaptiveSparkPlan isFinalPlan=false\n+- Project [prod_id#577, date#575, quantity#576L, prod_cat#568, prod_brand#569, prod_value#570]\n   +- SortMergeJoin [prod_id#577], [prod_id#567], Inner\n      :- Sort [prod_id#577 ASC NULLS FIRST], false, 0\n      :  +- Exchange hashpartitioning(prod_id#577, 200), ENSURE_REQUIREMENTS, [plan_id=575]\n      :     +- Filter isnotnull(prod_id#577)\n      :        +- Scan ExistingRDD[date#575,quantity#576L,prod_id#577]\n      +- Sort [prod_id#567 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(prod_id#567, 200), ENSURE_REQUIREMENTS, [plan_id=576]\n            +- Filter isnotnull(prod_id#567)\n               +- Scan ExistingRDD[prod_id#567,prod_cat#568,prod_brand#569,prod_value#570]\n\n\n```\n:::\n:::\n\n\n## Using a `SQL` query\n\n::: {#7b9b87ee .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:29.731271Z\",\"start_time\":\"2022-01-26T10:58:29.101559Z\"}' execution_count=55}\n``` {.python .cell-code}\nproducts.createOrReplaceTempView(\"products\")\npurchases.createOrReplaceTempView(\"purchases\")\n\nquery = \"\"\"\n    SELECT * \n    FROM purchases AS prc INNER JOIN \n        products AS prd \n    ON prc.prod_id = prd.prod_id\n\"\"\"\nspark.sql(query).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+--------+-------+-------+--------+----------+----------+\n|      date|quantity|prod_id|prod_id|prod_cat|prod_brand|prod_value|\n+----------+--------+-------+-------+--------+----------+----------+\n|2017-11-01|       2|      1|      1|   mouse| microsoft|     39.99|\n|2017-11-02|       1|      1|      1|   mouse| microsoft|     39.99|\n|2017-11-05|       1|      2|      2|keyboard|  logitech|     59.99|\n+----------+--------+-------+-------+--------+----------+----------+\n\n```\n:::\n:::\n\n\n::: {#f499ca92 .cell execution_count=56}\n``` {.python .cell-code}\nspark.sql(query).explain()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Physical Plan ==\nAdaptiveSparkPlan isFinalPlan=false\n+- SortMergeJoin [prod_id#577], [prod_id#567], Inner\n   :- Sort [prod_id#577 ASC NULLS FIRST], false, 0\n   :  +- Exchange hashpartitioning(prod_id#577, 200), ENSURE_REQUIREMENTS, [plan_id=718]\n   :     +- Filter isnotnull(prod_id#577)\n   :        +- Scan ExistingRDD[date#575,quantity#576L,prod_id#577]\n   +- Sort [prod_id#567 ASC NULLS FIRST], false, 0\n      +- Exchange hashpartitioning(prod_id#567, 200), ENSURE_REQUIREMENTS, [plan_id=719]\n         +- Filter isnotnull(prod_id#567)\n            +- Scan ExistingRDD[prod_id#567,prod_cat#568,prod_brand#569,prod_value#570]\n\n\n```\n:::\n:::\n\n\n::: {#5707efa3 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:30.660419Z\",\"start_time\":\"2022-01-26T10:58:29.734282Z\"}' execution_count=57}\n``` {.python .cell-code}\nnew_purchases = spark.createDataFrame([\n    (date(2017, 11, 1), 2, '1'),\n    (date(2017, 11, 2), 1, '3'),\n], ['date', 'quantity', 'prod_id_x'])\n\n# The default join type is the \"INNER\" join\njoin_rule = new_purchases.prod_id_x == products.prod_id\n\nprint(type(join_rule))\n\nnew_purchases.join(products, join_rule, 'left').show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pyspark.sql.column.Column'>\n+----------+--------+---------+-------+--------+----------+----------+\n|      date|quantity|prod_id_x|prod_id|prod_cat|prod_brand|prod_value|\n+----------+--------+---------+-------+--------+----------+----------+\n|2017-11-01|       2|        1|      1|   mouse| microsoft|     39.99|\n|2017-11-02|       1|        3|   NULL|    NULL|      NULL|      NULL|\n+----------+--------+---------+-------+--------+----------+----------+\n\n```\n:::\n:::\n\n\n::: {#32c3dd5a .cell execution_count=58}\n``` {.python .cell-code}\njoin_rule.info\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\nColumn<'(prod_id_x = prod_id)[info]'>\n```\n:::\n:::\n\n\n::: {#0dbf2944 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:31.319336Z\",\"start_time\":\"2022-01-26T10:58:30.663809Z\"}' execution_count=59}\n``` {.python .cell-code}\nnew_purchases = spark.createDataFrame([\n    (date(2017, 11, 1), 2, '1'),\n    (date(2017, 11, 2), 1, '3'),\n], ['date', 'quantity', 'prod_id_x'])\n\n# The default join type is the \"INNER\" join\njoin_rule = new_purchases.prod_id_x == products.prod_id\n\nnew_purchases.join(products, join_rule, 'left').show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+--------+---------+-------+--------+----------+----------+\n|      date|quantity|prod_id_x|prod_id|prod_cat|prod_brand|prod_value|\n+----------+--------+---------+-------+--------+----------+----------+\n|2017-11-01|       2|        1|      1|   mouse| microsoft|     39.99|\n|2017-11-02|       1|        3|   NULL|    NULL|      NULL|      NULL|\n+----------+--------+---------+-------+--------+----------+----------+\n\n```\n:::\n:::\n\n\n## Various types of joins\n\n::: {#66d40fd6 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:31.376310Z\",\"start_time\":\"2022-01-26T10:58:31.323600Z\"}' execution_count=60}\n``` {.python .cell-code}\nleft = spark.createDataFrame([\n    (1, \"A1\"), (2, \"A2\"), (3, \"A3\"), (4, \"A4\")], \n    [\"id\", \"value\"])\n\nright = spark.createDataFrame([\n    (3, \"A3\"), (4, \"A4\"), (4, \"A4_1\"), (5, \"A5\"), (6, \"A6\")], \n    [\"id\", \"value\"])\n\njoin_types = [\n    \"inner\", \"outer\", \"left\", \"right\",\n    \"leftsemi\", \"leftanti\"\n]\n```\n:::\n\n\n::: {#7c4150d4 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:34.708236Z\",\"start_time\":\"2022-01-26T10:58:31.380091Z\"}' execution_count=61}\n``` {.python .cell-code}\nfor join_type in join_types:\n    print(join_type)\n    left.join(right, on=\"id\", how=join_type)\\\n        .orderBy(\"id\")\\\n        .show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ninner\n+---+-----+-----+\n| id|value|value|\n+---+-----+-----+\n|  3|   A3|   A3|\n|  4|   A4|   A4|\n|  4|   A4| A4_1|\n+---+-----+-----+\n\nouter\n+---+-----+-----+\n| id|value|value|\n+---+-----+-----+\n|  1|   A1| NULL|\n|  2|   A2| NULL|\n|  3|   A3|   A3|\n|  4|   A4|   A4|\n|  4|   A4| A4_1|\n|  5| NULL|   A5|\n|  6| NULL|   A6|\n+---+-----+-----+\n\nleft\n+---+-----+-----+\n| id|value|value|\n+---+-----+-----+\n|  1|   A1| NULL|\n|  2|   A2| NULL|\n|  3|   A3|   A3|\n|  4|   A4|   A4|\n|  4|   A4| A4_1|\n+---+-----+-----+\n\nright\n+---+-----+-----+\n| id|value|value|\n+---+-----+-----+\n|  3|   A3|   A3|\n|  4|   A4|   A4|\n|  4|   A4| A4_1|\n|  5| NULL|   A5|\n|  6| NULL|   A6|\n+---+-----+-----+\n\nleftsemi\n+---+-----+\n| id|value|\n+---+-----+\n|  3|   A3|\n|  4|   A4|\n+---+-----+\n\nleftanti\n+---+-----+\n| id|value|\n+---+-----+\n|  1|   A1|\n|  2|   A2|\n+---+-----+\n\n```\n:::\n:::\n\n\n# Agregations\n\n## Examples using the API\n\n::: {#d4263486 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:35.398306Z\",\"start_time\":\"2022-01-26T10:58:34.710552Z\"}' execution_count=62}\n``` {.python .cell-code}\nfrom pyspark.sql import functions as fn\n\nproducts = spark.createDataFrame([\n    ('1', 'mouse', 'microsoft', 39.99),\n    ('2', 'mouse', 'microsoft', 59.99),\n    ('3', 'keyboard', 'microsoft', 59.99),\n    ('4', 'keyboard', 'logitech', 59.99),\n    ('5', 'mouse', 'logitech', 29.99),\n], ['prod_id', 'prod_cat', 'prod_brand', 'prod_value'])\n\nproducts.groupBy('prod_cat').avg('prod_value').show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------+-----------------+\n|prod_cat|  avg(prod_value)|\n+--------+-----------------+\n|   mouse|43.32333333333333|\n|keyboard|            59.99|\n+--------+-----------------+\n\n```\n:::\n:::\n\n\n::: {#5a5c1c53 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:35.782623Z\",\"start_time\":\"2022-01-26T10:58:35.400724Z\"}' execution_count=63}\n``` {.python .cell-code}\nproducts.groupBy('prod_cat').agg(fn.avg('prod_value')).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------+-----------------+\n|prod_cat|  avg(prod_value)|\n+--------+-----------------+\n|   mouse|43.32333333333333|\n|keyboard|            59.99|\n+--------+-----------------+\n\n```\n:::\n:::\n\n\n::: {#27769f43 .cell execution_count=64}\n``` {.python .cell-code}\n(\n    products\n        .groupBy('prod_cat')\n        .agg(fn.mean('prod_value'), fn.stddev('prod_value'))\n        .show()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------+-----------------+------------------+\n|prod_cat|  avg(prod_value)|stddev(prod_value)|\n+--------+-----------------+------------------+\n|   mouse|43.32333333333333|15.275252316519468|\n|keyboard|            59.99|               0.0|\n+--------+-----------------+------------------+\n\n```\n:::\n:::\n\n\n::: {#10bc5967 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:36.195471Z\",\"start_time\":\"2022-01-26T10:58:35.784780Z\"}' execution_count=65}\n``` {.python .cell-code}\nfrom pyspark.sql import functions as fn\n\nproducts.groupBy('prod_brand', 'prod_cat')\\\n    .agg(fn.avg('prod_value')).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+--------+---------------+\n|prod_brand|prod_cat|avg(prod_value)|\n+----------+--------+---------------+\n| microsoft|   mouse|          49.99|\n| microsoft|keyboard|          59.99|\n|  logitech|keyboard|          59.99|\n|  logitech|   mouse|          29.99|\n+----------+--------+---------------+\n\n```\n:::\n:::\n\n\n::: {#652f069d .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:36.650354Z\",\"start_time\":\"2022-01-26T10:58:36.207985Z\"}' execution_count=66}\n``` {.python .cell-code}\nfrom pyspark.sql import functions as fn\n\nproducts.groupBy('prod_brand').agg(\n    fn.round(fn.avg('prod_value'), 1).alias('average'),\n    fn.ceil(fn.sum('prod_value')).alias('sum'),\n    fn.min('prod_value').alias('min')\n).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+-------+---+-----+\n|prod_brand|average|sum|  min|\n+----------+-------+---+-----+\n| microsoft|   53.3|160|39.99|\n|  logitech|   45.0| 90|29.99|\n+----------+-------+---+-----+\n\n```\n:::\n:::\n\n\n## Example using a query\n\n::: {#a371436c .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:37.089099Z\",\"start_time\":\"2022-01-26T10:58:36.652842Z\"}' execution_count=67}\n``` {.python .cell-code}\nproducts.createOrReplaceTempView(\"products\")\n```\n:::\n\n\n::: {#b3df7ff5 .cell execution_count=68}\n``` {.python .cell-code}\nquery = \"\"\"\nSELECT\nprod_brand,\nround(avg(prod_value), 1) AS average,\nmin(prod_value) AS min\nFROM products\nGROUP BY prod_brand\n\"\"\"\n\nspark.sql(query).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+-------+-----+\n|prod_brand|average|  min|\n+----------+-------+-----+\n| microsoft|   53.3|39.99|\n|  logitech|   45.0|29.99|\n+----------+-------+-----+\n\n```\n:::\n:::\n\n\n# Window functions\n\n## Numerical window functions\n\n::: {#88156aa2 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:37.751296Z\",\"start_time\":\"2022-01-26T10:58:37.092075Z\"}' execution_count=69}\n``` {.python .cell-code}\nfrom pyspark.sql import Window\nfrom pyspark.sql import functions as fn\n\n# First, we create the Window definition\nwindow = Window.partitionBy('prod_brand')\n\nprint(type(window))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pyspark.sql.window.WindowSpec'>\n```\n:::\n:::\n\n\n::: {#c4ff6c76 .cell execution_count=70}\n``` {.python .cell-code}\n# Then, we can use \"over\" to aggregate on this window\navg = fn.avg('prod_value').over(window)\n\n# Finally, we can it as a classical column\nproducts.withColumn('avg_brand_value', fn.round(avg, 2)).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+-------+--------+----------+----------+---------------+\n|prod_id|prod_cat|prod_brand|prod_value|avg_brand_value|\n+-------+--------+----------+----------+---------------+\n|      4|keyboard|  logitech|     59.99|          44.99|\n|      5|   mouse|  logitech|     29.99|          44.99|\n|      1|   mouse| microsoft|     39.99|          53.32|\n|      2|   mouse| microsoft|     59.99|          53.32|\n|      3|keyboard| microsoft|     59.99|          53.32|\n+-------+--------+----------+----------+---------------+\n\n```\n:::\n:::\n\n\nWith SQL queries, using multiple windows is not a problem\n\n::: {#e1a08c69 .cell execution_count=71}\n``` {.python .cell-code}\nquery = \"\"\"\nSELECT *, \n    ROUND(AVG(prod_value) OVER w1, 2)  AS avg_brand_value,\n    ROUND(AVG(prod_value) OVER w2, 1)  AS avg_prod_value\nFROM products\nWINDOW w1 AS (PARTITION BY prod_brand),\n       w2 AS (PARTITION BY prod_cat)\n\"\"\"\n\nspark.sql(query).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+-------+--------+----------+----------+---------------+--------------+\n|prod_id|prod_cat|prod_brand|prod_value|avg_brand_value|avg_prod_value|\n+-------+--------+----------+----------+---------------+--------------+\n|      4|keyboard|  logitech|     59.99|          44.99|          60.0|\n|      3|keyboard| microsoft|     59.99|          53.32|          60.0|\n|      5|   mouse|  logitech|     29.99|          44.99|          43.3|\n|      1|   mouse| microsoft|     39.99|          53.32|          43.3|\n|      2|   mouse| microsoft|     59.99|          53.32|          43.3|\n+-------+--------+----------+----------+---------------+--------------+\n\n```\n:::\n:::\n\n\n::: {#6503c971 .cell execution_count=72}\n``` {.python .cell-code}\nwindow2 = Window.partitionBy('prod_cat')\n\navg2 = fn.avg('prod_value').over(window2)\n\n# Finally, we can it as a classical column\n( \n    products\n        .withColumn('avg_brand_value', fn.round(avg, 2))\n        .withColumn('avg_prod_value', fn.round(avg2, 1))\n        .show()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+-------+--------+----------+----------+---------------+--------------+\n|prod_id|prod_cat|prod_brand|prod_value|avg_brand_value|avg_prod_value|\n+-------+--------+----------+----------+---------------+--------------+\n|      4|keyboard|  logitech|     59.99|          44.99|          60.0|\n|      3|keyboard| microsoft|     59.99|          53.32|          60.0|\n|      5|   mouse|  logitech|     29.99|          44.99|          43.3|\n|      1|   mouse| microsoft|     39.99|          53.32|          43.3|\n|      2|   mouse| microsoft|     59.99|          53.32|          43.3|\n+-------+--------+----------+----------+---------------+--------------+\n\n```\n:::\n:::\n\n\n::: {#0793387d .cell execution_count=73}\n``` {.python .cell-code}\n( \n    products\n        .withColumn('avg_brand_value', fn.round(avg, 2))\n        .withColumn('avg_prod_value', fn.round(avg2, 1))\n        .explain()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Physical Plan ==\nAdaptiveSparkPlan isFinalPlan=false\n+- Project [prod_id#854, prod_cat#855, prod_brand#856, prod_value#857, avg_brand_value#1195, round(_we0#1203, 1) AS avg_prod_value#1202]\n   +- Window [avg(prod_value#857) windowspecdefinition(prod_cat#855, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#1203], [prod_cat#855]\n      +- Sort [prod_cat#855 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(prod_cat#855, 200), ENSURE_REQUIREMENTS, [plan_id=2249]\n            +- Project [prod_id#854, prod_cat#855, prod_brand#856, prod_value#857, round(_we0#1196, 2) AS avg_brand_value#1195]\n               +- Window [avg(prod_value#857) windowspecdefinition(prod_brand#856, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#1196], [prod_brand#856]\n                  +- Sort [prod_brand#856 ASC NULLS FIRST], false, 0\n                     +- Exchange hashpartitioning(prod_brand#856, 200), ENSURE_REQUIREMENTS, [plan_id=2244]\n                        +- Scan ExistingRDD[prod_id#854,prod_cat#855,prod_brand#856,prod_value#857]\n\n\n```\n:::\n:::\n\n\n::: {#b1878494 .cell execution_count=74}\n``` {.python .cell-code}\nspark.sql(query).explain()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Physical Plan ==\nAdaptiveSparkPlan isFinalPlan=false\n+- Project [prod_id#854, prod_cat#855, prod_brand#856, prod_value#857, round(_we0#1214, 2) AS avg_brand_value#1210, round(_we1#1215, 1) AS avg_prod_value#1211]\n   +- Window [avg(prod_value#857) windowspecdefinition(prod_cat#855, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we1#1215], [prod_cat#855]\n      +- Sort [prod_cat#855 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(prod_cat#855, 200), ENSURE_REQUIREMENTS, [plan_id=2273]\n            +- Window [avg(prod_value#857) windowspecdefinition(prod_brand#856, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#1214], [prod_brand#856]\n               +- Sort [prod_brand#856 ASC NULLS FIRST], false, 0\n                  +- Exchange hashpartitioning(prod_brand#856, 200), ENSURE_REQUIREMENTS, [plan_id=2269]\n                     +- Scan ExistingRDD[prod_id#854,prod_cat#855,prod_brand#856,prod_value#857]\n\n\n```\n:::\n:::\n\n\n::: {#ba876a19 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:38.261379Z\",\"start_time\":\"2022-01-26T10:58:37.753256Z\"}' execution_count=75}\n``` {.python .cell-code}\nfrom pyspark.sql import Window\nfrom pyspark.sql import functions as fn\n\n# The window can be defined on multiple columns\nwindow = Window.partitionBy('prod_brand', 'prod_cat')\n\navg = fn.avg('prod_value').over(window)\n\nproducts.withColumn('avg_value', fn.round(avg, 2)).show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+-------+--------+----------+----------+---------+\n|prod_id|prod_cat|prod_brand|prod_value|avg_value|\n+-------+--------+----------+----------+---------+\n|      4|keyboard|  logitech|     59.99|    59.99|\n|      5|   mouse|  logitech|     29.99|    29.99|\n|      3|keyboard| microsoft|     59.99|    59.99|\n|      1|   mouse| microsoft|     39.99|    49.99|\n|      2|   mouse| microsoft|     59.99|    49.99|\n+-------+--------+----------+----------+---------+\n\n```\n:::\n:::\n\n\n## Lag and Lead\n\n::: {#2b4a8256 .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:39.785452Z\",\"start_time\":\"2022-01-26T10:58:39.084502Z\"}' execution_count=76}\n``` {.python .cell-code}\npurchases = spark.createDataFrame([\n    (date(2017, 11, 1), 'mouse'),\n    (date(2017, 11, 2), 'mouse'),\n    (date(2017, 11, 4), 'keyboard'),\n    (date(2017, 11, 6), 'keyboard'),\n    (date(2017, 11, 9), 'keyboard'),\n    (date(2017, 11, 12), 'mouse'),\n    (date(2017, 11, 18), 'keyboard')\n], ['date', 'prod_cat'])\npurchases.show()\n\nwindow = Window.partitionBy('prod_cat').orderBy('date')\n\nprev_purch = fn.lag('date', 1).over(window)\nnext_purch = fn.lead('date', 1).over(window)\n\npurchases\\\n    .withColumn('prev', prev_purch)\\\n    .withColumn('next', next_purch)\\\n    .orderBy('prod_cat', 'date')\\\n    .show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----------+--------+\n|      date|prod_cat|\n+----------+--------+\n|2017-11-01|   mouse|\n|2017-11-02|   mouse|\n|2017-11-04|keyboard|\n|2017-11-06|keyboard|\n|2017-11-09|keyboard|\n|2017-11-12|   mouse|\n|2017-11-18|keyboard|\n+----------+--------+\n\n+----------+--------+----------+----------+\n|      date|prod_cat|      prev|      next|\n+----------+--------+----------+----------+\n|2017-11-04|keyboard|      NULL|2017-11-06|\n|2017-11-06|keyboard|2017-11-04|2017-11-09|\n|2017-11-09|keyboard|2017-11-06|2017-11-18|\n|2017-11-18|keyboard|2017-11-09|      NULL|\n|2017-11-01|   mouse|      NULL|2017-11-02|\n|2017-11-02|   mouse|2017-11-01|2017-11-12|\n|2017-11-12|   mouse|2017-11-02|      NULL|\n+----------+--------+----------+----------+\n\n```\n:::\n:::\n\n\n## Rank, DenseRank and RowNumber\n\n::: {#041affad .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:40.005845Z\",\"start_time\":\"2022-01-26T10:58:39.787433Z\"}' execution_count=77}\n``` {.python .cell-code}\ncontestants = spark.createDataFrame([\n    ('veterans', 'John', 3000),\n    ('veterans', 'Bob', 3200),\n    ('veterans', 'Mary', 4000),\n    ('young', 'Jane', 4000),\n    ('young', 'April', 3100),\n    ('young', 'Alice', 3700),\n    ('young', 'Micheal', 4000),\n], ['category', 'name', 'points'])\n\ncontestants.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------+-------+------+\n|category|   name|points|\n+--------+-------+------+\n|veterans|   John|  3000|\n|veterans|    Bob|  3200|\n|veterans|   Mary|  4000|\n|   young|   Jane|  4000|\n|   young|  April|  3100|\n|   young|  Alice|  3700|\n|   young|Micheal|  4000|\n+--------+-------+------+\n\n```\n:::\n:::\n\n\n::: {#5c6b29db .cell ExecuteTime='{\"end_time\":\"2022-01-26T10:58:40.653650Z\",\"start_time\":\"2022-01-26T10:58:40.009618Z\"}' execution_count=78}\n``` {.python .cell-code}\nwindow = Window.partitionBy('category')\\\n    .orderBy(contestants.points.desc())\n\nrank = fn.rank().over(window)\ndense_rank = fn.dense_rank().over(window)\nrow_number = fn.row_number().over(window)\n\ncontestants\\\n    .withColumn('rank', rank)\\\n    .withColumn('dense_rank', dense_rank)\\\n    .withColumn('row_number', row_number)\\\n    .orderBy('category', fn.col('points').desc())\\\n    .show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------+-------+------+----+----------+----------+\n|category|   name|points|rank|dense_rank|row_number|\n+--------+-------+------+----+----------+----------+\n|veterans|   Mary|  4000|   1|         1|         1|\n|veterans|    Bob|  3200|   2|         2|         2|\n|veterans|   John|  3000|   3|         3|         3|\n|   young|   Jane|  4000|   1|         1|         1|\n|   young|Micheal|  4000|   1|         1|         2|\n|   young|  Alice|  3700|   3|         2|         3|\n|   young|  April|  3100|   4|         3|         4|\n+--------+-------+------+----+----------+----------+\n\n```\n:::\n:::\n\n\n# Connection to a database\n\n::: {#8a45c330 .cell execution_count=79}\n``` {.python .cell-code}\n# df = spark.read \\\n#     .format(\"jdbc\") \\\n#     .option(\"url\", \"jdbc:postgresql://localhost:5432/postgres\") \\\n#     .option(\"dbschema\", \"imdb\")\\\n#     .option(\"dbtable\", \"title_basics\") \\\n#     .option(\"user\", \"postgres\") \\\n#     .option(\"password\", \"postgres\") \\\n#     .option(\"driver\", \"org.postgresql.Driver\") \\\n#     .load()\n\n# df.printSchema()\n```\n:::\n\n\n",
    "supporting": [
      "notebook06_sparksql_files"
    ],
    "filters": [],
    "includes": {}
  }
}