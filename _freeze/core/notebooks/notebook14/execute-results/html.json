{
  "hash": "74e5f4bf490f4be82553ec903f602e29",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Using with `pyspark` for data preprocessing\njupyter: python3\n---\n\n::: {#5a7fb148 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport sys\nimport pyarrow as pa\nimport comet as co\nimport pyarrow.parquet as pq\n```\n:::\n\n\n::: {#4c7240a7 .cell execution_count=2}\n``` {.python .cell-code}\nfrom pyspark.sql import Window\nimport pyspark.sql.functions as func\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import col, lit\n```\n:::\n\n\n::: {#90c140fc .cell execution_count=3}\n``` {.python .cell-code}\nfrom functools import reduce\n```\n:::\n\n\n::: {#005ac98b .cell execution_count=4}\n``` {.python .cell-code}\nos.environ['PYSPARK_PYTHON'] = sys.executable\nos.environ['PYSPARK_DRIVER_PYTHON'] = sys.executable\n```\n:::\n\n\n::: {#98373998 .cell execution_count=5}\n``` {.python .cell-code}\nfrom pyspark.sql import SparkSession\n\nspark = (SparkSession\n    .builder\n    .appName(\"Web data\")         \n    .getOrCreate()\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/04/03 15:11:17 WARN Utils: Your hostname, boucheron-Precision-5480 resolves to a loopback address: 127.0.1.1; using 172.23.32.10 instead (on interface eth0)\n25/04/03 15:11:17 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n25/04/03 15:11:17 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n```\n:::\n:::\n\n\n::: {#bc91eef7 .cell execution_count=6}\n``` {.python .cell-code}\n%timeit\ninput_path = './'\n\ninput_file = os.path.join(input_path, 'webdata.parquet')\n\ndf = spark.read.parquet(input_file)\n```\n:::\n\n\n::: {#1c5fa2ff .cell execution_count=7}\n``` {.python .cell-code}\ndf.printSchema()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nroot\n |-- xid: string (nullable = true)\n |-- action: string (nullable = true)\n |-- date: timestamp (nullable = true)\n |-- website_id: string (nullable = true)\n |-- url: string (nullable = true)\n |-- category_id: float (nullable = true)\n |-- zipcode: string (nullable = true)\n |-- device: string (nullable = true)\n\n```\n:::\n:::\n\n\n::: {#6ab38871 .cell execution_count=8}\n``` {.python .cell-code}\ndf.rdd.getNumPartitions()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n12\n```\n:::\n:::\n\n\n::: {#c39c610d .cell execution_count=9}\n``` {.python .cell-code}\n%timeit\ndfa = pq.read_table(input_file)\n```\n:::\n\n\n::: {#e4b84b9f .cell execution_count=10}\n``` {.python .cell-code}\nprint(dfa.schema)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nxid: string\naction: string\ndate: timestamp[ns]\nwebsite_id: string\nurl: string\ncategory_id: float\nzipcode: string\ndevice: string\n-- schema metadata --\norg.apache.spark.sql.parquet.row.metadata: '{\"type\":\"struct\",\"fields\":[{\"' + 515\n```\n:::\n:::\n\n\n::: {#c9dd843a .cell execution_count=11}\n``` {.python .cell-code}\n( \n    df.select('xid')\n      .distinct()\n      .explain()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Physical Plan ==\nAdaptiveSparkPlan isFinalPlan=false\n+- HashAggregate(keys=[xid#0], functions=[])\n   +- Exchange hashpartitioning(xid#0, 200), ENSURE_REQUIREMENTS, [plan_id=18]\n      +- HashAggregate(keys=[xid#0], functions=[])\n         +- FileScan parquet [xid#0] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1 paths)[file:/home/boucheron/sandbox/IFEBY310/core/notebooks/webdata.parquet], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<xid:string>\n\n\n```\n:::\n:::\n\n\n::: {#65290d28 .cell execution_count=12}\n``` {.python .cell-code}\n# \n( \n    df.select('xid')\n      .distinct()\n      .count()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n473761\n```\n:::\n:::\n\n\n::: {#8408b6f8 .cell execution_count=13}\n``` {.python .cell-code}\nxid_partition = Window.partitionBy('xid')\nn_events = func.count(col('action')).over(xid_partition)\ndf = df.withColumn('n_events', n_events)\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n[Row(xid='0006cea7-1679-4264-bdef-0cd089749ede', action='O', date=datetime.datetime(2016, 12, 26, 13, 41, 8), website_id='51', url='https://www.footlegende.fr/mercato-psg-coutinho-10166', category_id=1002.0, zipcode='34290', device='TAB', n_events=1),\n Row(xid='000893c8-a14b-4f33-858f-210440f37def', action='O', date=datetime.datetime(2016, 12, 23, 16, 18, 37), website_id='56', url='http://blague.dumatin.fr/', category_id=1002.0, zipcode=None, device='DSK', n_events=1)]\n```\n:::\n:::\n\n\n::: {#a35133da .cell execution_count=14}\n``` {.python .cell-code}\n( \n  df\n    .groupBy('xid')\n    .agg(func.count('action'))\n    .head(5)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n[Row(xid='001c4a21-52c6-4890-b6ce-2b9d4ba06a56', count(action)=1),\n Row(xid='0024344b-7ee2-4fcd-a0b4-bec26d8c8b0e', count(action)=4),\n Row(xid='004564e3-87c1-4e16-ad2c-0e96afc3d617', count(action)=1),\n Row(xid='006d807f-91c3-415a-bb5e-6b9f7e6517a1', count(action)=1),\n Row(xid='006e0463-b24c-4996-84ab-d6d0d65a52aa', count(action)=1)]\n```\n:::\n:::\n\n\n::: {#c45a9ae4 .cell execution_count=15}\n``` {.python .cell-code}\ndf = df.repartitionByRange(20, 'xid')\n```\n:::\n\n\n::: {#fd64e34d .cell execution_count=16}\n``` {.python .cell-code}\ndf.persist()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nDataFrame[xid: string, action: string, date: timestamp, website_id: string, url: string, category_id: float, zipcode: string, device: string, n_events: bigint]\n```\n:::\n:::\n\n\n::: {#ac60b6c3 .cell execution_count=17}\n``` {.python .cell-code}\nxid_partition = Window.partitionBy('xid')\n\nmax_date = (\n  func\n    .max(col('date'))\n    .over(xid_partition)\n)\n\nn_days_since_last_event = func.datediff(func.current_date(), max_date)\n\ndf = df.withColumn('n_days_since_last_event',\n                   n_days_since_last_event)\n\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 20:===============================================>        (17 + 3) / 20]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n[Row(xid='00008f69-9f2f-4453-80ec-98b4ae8a3085', action='O', date=datetime.datetime(2017, 1, 26, 17, 8, 30), website_id='3', url='http://www.8chances.com/grille/?from=mr', category_id=1002.0, zipcode='16400', device='DSK', n_events=1, n_days_since_last_event=2989),\n Row(xid='000095cc-9a61-49b5-8ad5-83442daa93d6', action='O', date=datetime.datetime(2017, 1, 25, 21, 43, 12), website_id='74', url='http://www.realite-virtuelle.com/guide-comparatif-casque-realite-virtuelle', category_id=1002.0, zipcode='24500', device='DSK', n_events=2, n_days_since_last_event=2990)]\n```\n:::\n:::\n\n\n::: {#a26565d2 .cell execution_count=18}\n``` {.python .cell-code}\nn_events = func.count(col('action')).over(xid_partition)\n\ndf = df.withColumn('n_events', n_events)\n\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n[Row(xid='00008f69-9f2f-4453-80ec-98b4ae8a3085', action='O', date=datetime.datetime(2017, 1, 26, 17, 8, 30), website_id='3', url='http://www.8chances.com/grille/?from=mr', category_id=1002.0, zipcode='16400', device='DSK', n_events=1, n_days_since_last_event=2989),\n Row(xid='000095cc-9a61-49b5-8ad5-83442daa93d6', action='O', date=datetime.datetime(2017, 1, 25, 21, 43, 12), website_id='74', url='http://www.realite-virtuelle.com/guide-comparatif-casque-realite-virtuelle', category_id=1002.0, zipcode='24500', device='DSK', n_events=2, n_days_since_last_event=2990)]\n```\n:::\n:::\n\n\n::: {#4c250ccc .cell execution_count=19}\n``` {.python .cell-code}\nxid_device_partition = xid_partition.partitionBy('device')\n\nn_events_per_device = (\n    func.count(col('action'))\n        .over(xid_device_partition)\n)\n\ndf = df.withColumn('n_events_per_device', n_events_per_device)\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 33:>                                                         (0 + 1) / 1]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n[Row(xid='00008f69-9f2f-4453-80ec-98b4ae8a3085', action='O', date=datetime.datetime(2017, 1, 26, 17, 8, 30), website_id='3', url='http://www.8chances.com/grille/?from=mr', category_id=1002.0, zipcode='16400', device='DSK', n_events=1, n_days_since_last_event=2989, n_events_per_device=1021837),\n Row(xid='000095cc-9a61-49b5-8ad5-83442daa93d6', action='O', date=datetime.datetime(2017, 1, 25, 21, 43, 12), website_id='74', url='http://www.realite-virtuelle.com/guide-comparatif-casque-realite-virtuelle', category_id=1002.0, zipcode='24500', device='DSK', n_events=2, n_days_since_last_event=2990, n_events_per_device=1021837)]\n```\n:::\n:::\n\n\n::: {#2523531a .cell execution_count=20}\n``` {.python .cell-code}\nrank_device = (\n  func\n    .dense_rank()\n    .over(xid_partition.orderBy('device'))\n)\n\nn_unique_device = (\n    func\n      .last(rank_device)\n      .over(xid_partition)\n)\n\ndf = df.withColumn('n_device', n_unique_device)\n\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 40:======================================>                   (2 + 1) / 3]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n[Row(xid='0006cea7-1679-4264-bdef-0cd089749ede', action='O', date=datetime.datetime(2016, 12, 26, 13, 41, 8), website_id='51', url='https://www.footlegende.fr/mercato-psg-coutinho-10166', category_id=1002.0, zipcode='34290', device='TAB', n_events=1, n_days_since_last_event=3020, n_events_per_device=132013, n_device=1),\n Row(xid='000893c8-a14b-4f33-858f-210440f37def', action='O', date=datetime.datetime(2016, 12, 23, 16, 18, 37), website_id='56', url='http://blague.dumatin.fr/', category_id=1002.0, zipcode=None, device='DSK', n_events=1, n_days_since_last_event=3023, n_events_per_device=1021837, n_device=1)]\n```\n:::\n:::\n\n\n::: {#dcc06792 .cell execution_count=21}\n``` {.python .cell-code}\ndf.printSchema()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nroot\n |-- xid: string (nullable = true)\n |-- action: string (nullable = true)\n |-- date: timestamp (nullable = true)\n |-- website_id: string (nullable = true)\n |-- url: string (nullable = true)\n |-- category_id: float (nullable = true)\n |-- zipcode: string (nullable = true)\n |-- device: string (nullable = true)\n |-- n_events: long (nullable = false)\n |-- n_days_since_last_event: integer (nullable = true)\n |-- n_events_per_device: long (nullable = false)\n |-- n_device: integer (nullable = true)\n\n```\n:::\n:::\n\n\n::: {#922b1470 .cell execution_count=22}\n``` {.python .cell-code}\n(\n  df\n    .where(col('n_device') > 1)\n    .select('xid', \n            'device', \n            'n_events', \n            'n_device', \n            'n_events_per_device')\n    .head(n=8)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n[Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='4c1dc79d-a140-4da9-ae28-540b4503c3b8', device='MOB', n_events=6, n_device=2, n_events_per_device=1564),\n Row(xid='78156cdf-7229-46eb-bb6b-92d384f9a6fa', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837),\n Row(xid='78156cdf-7229-46eb-bb6b-92d384f9a6fa', device='DSK', n_events=6, n_device=2, n_events_per_device=1021837)]\n```\n:::\n:::\n\n\n::: {#994a1338 .cell execution_count=23}\n``` {.python .cell-code}\ndef n_events_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    n_events = func.count(col('action')).over(xid_partition)\n    \n    df = df.withColumn('n_events', n_events)\n\n    return df\n```\n:::\n\n\n::: {#322ea226 .cell execution_count=24}\n``` {.python .cell-code}\ndef my_count_window_transform(df, input_col, output_col, part_col):\n    w = Window.partitionBy(part_col)\n    out_col = func.count(col(input_col)).over(w)\n\n    return df.withColumn(output_col, out_col)\n```\n:::\n\n\n::: {#ef856bbb .cell execution_count=25}\n``` {.python .cell-code}\ndef hour_transformer(df):\n    hour = func.hour(col('date'))\n    df = df.withColumn('hour', hour)\n    return df\n\ndef weekday_transformer(df):\n    weekday = func.date_format(col('date'), 'EEEE')\n    df = df.withColumn('weekday', weekday)\n    return df\n```\n:::\n\n\n::: {#69adbcf8 .cell execution_count=26}\n``` {.python .cell-code}\ndef n_events_per_hour_transformer(df):\n    xid_hour_partition = Window.partitionBy('xid', 'hour')\n    n_events_per_hour = func.count(col('action')).over(xid_hour_partition)\n    df = df.withColumn('n_events_per_hour', n_events_per_hour)\n    return df\n```\n:::\n\n\n::: {#d05dbc89 .cell execution_count=27}\n``` {.python .cell-code}\ndef n_events_per_weekday_transformer(df):\n    xid_weekday_partition = Window.partitionBy('xid', 'weekday')\n    n_events_per_weekday = func.count(col('action')).over(xid_weekday_partition)\n    df = df.withColumn('n_events_per_weekday', n_events_per_weekday)\n    return df\n\ndef n_days_since_last_event_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    max_date = func.max(col('date')).over(xid_partition)\n    n_days_since_last_event = func.datediff(func.current_date(), max_date)\n    df = df.withColumn('n_days_since_last_event',\n                       n_days_since_last_event + lit(0.1))\n    return df\n\ndef n_days_since_last_action_transformer(df):\n    xid_partition_action = Window.partitionBy('xid', 'action')\n    max_date = func.max(col('date')).over(xid_partition_action)\n    n_days_since_last_action = func.datediff(func.current_date(),\n                                                        max_date)\n    df = df.withColumn('n_days_since_last_action',\n                       n_days_since_last_action + lit(0.1))\n    return df\n\ndef n_unique_day_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    dayofyear = func.dayofyear(col('date'))\n    rank_day = func.dense_rank().over(xid_partition.orderBy(dayofyear))\n    n_unique_day = func.last(rank_day).over(xid_partition)\n    df = df.withColumn('n_unique_day', n_unique_day)\n    return df\n\ndef n_unique_hour_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_hour = func.dense_rank().over(xid_partition.orderBy('hour'))\n    n_unique_hour = func.last(rank_hour).over(xid_partition)\n    df = df.withColumn('n_unique_hour', n_unique_hour)\n    return df\n\ndef n_events_per_device_transformer(df):\n    xid_device_partition = Window.partitionBy('xid', 'device')\n    n_events_per_device = func.count(func.col('device')) \\\n        .over(xid_device_partition)\n    df = df.withColumn('n_events_per_device', n_events_per_device)\n    return df\n\ndef n_unique_device_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_device = func.dense_rank().over(xid_partition.orderBy('device'))\n    n_unique_device = func.last(rank_device).over(xid_partition)\n    df = df.withColumn('n_device', n_unique_device)\n    return df\n\ndef n_actions_per_category_id_transformer(df):\n    xid_category_id_partition = Window.partitionBy('xid', 'category_id',\n                                                   'action')\n    n_actions_per_category_id = func.count(func.col('action')) \\\n        .over(xid_category_id_partition)\n    df = df.withColumn('n_actions_per_category_id', n_actions_per_category_id)\n    return df\n\ndef n_unique_category_id_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_category_id = func.dense_rank().over(xid_partition\\\n                                              .orderBy('category_id'))\n    n_unique_category_id = func.last(rank_category_id).over(xid_partition)\n    df = df.withColumn('n_unique_category_id', n_unique_category_id)\n    return df\n\ndef n_events_per_category_id_transformer(df):\n    xid_category_id_partition = Window.partitionBy('xid', 'category_id')\n    n_events_per_category_id = func.count(func.col('action')) \\\n        .over(xid_category_id_partition)\n    df = df.withColumn('n_events_per_category_id', n_events_per_category_id)\n    return df\n\ndef n_events_per_website_id_transformer(df):\n    xid_website_id_partition = Window.partitionBy('xid', 'website_id')\n    n_events_per_website_id = func.count(col('action'))\\\n        .over(xid_website_id_partition)\n    df = df.withColumn('n_events_per_website_id', n_events_per_website_id)\n    return df\n```\n:::\n\n\n",
    "supporting": [
      "notebook14_files"
    ],
    "filters": [],
    "includes": {}
  }
}