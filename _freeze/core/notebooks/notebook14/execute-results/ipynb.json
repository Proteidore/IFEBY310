{
  "hash": "74e5f4bf490f4be82553ec903f602e29",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Using with `pyspark` for data preprocessing\njupyter: python3\n---\n\n::: {#6086db57 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport sys\nimport pyarrow as pa\nimport comet as co\nimport pyarrow.parquet as pq\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">sys</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyarrow</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pa</span>\n<span class=\"ansi-green-fg\">----&gt; 4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">comet</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">co</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyarrow</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">parquet</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pq</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'comet'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7da18a42 .cell execution_count=2}\n``` {.python .cell-code}\nfrom pyspark.sql import Window\nimport pyspark.sql.functions as func\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import col, lit\n```\n:::\n\n\n::: {#d8343376 .cell execution_count=3}\n``` {.python .cell-code}\nfrom functools import reduce\n```\n:::\n\n\n::: {#41a015af .cell execution_count=4}\n``` {.python .cell-code}\nos.environ['PYSPARK_PYTHON'] = sys.executable\nos.environ['PYSPARK_DRIVER_PYTHON'] = sys.executable\n```\n:::\n\n\n::: {#a4ae7d23 .cell execution_count=5}\n``` {.python .cell-code}\nfrom pyspark.sql import SparkSession\n\nspark = (SparkSession\n    .builder\n    .appName(\"Web data\")         \n    .getOrCreate()\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/01/14 22:39:27 WARN Utils: Your hostname, boucheron-Precision-5480 resolves to a loopback address: 127.0.1.1; using 192.168.10.120 instead (on interface wlp0s20f3)\n25/01/14 22:39:27 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n25/01/14 22:39:28 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n```\n:::\n:::\n\n\n::: {#693eb999 .cell execution_count=6}\n``` {.python .cell-code}\n%timeit\ninput_path = './'\n\ninput_file = os.path.join(input_path, 'webdata.parquet')\n\ndf = spark.read.parquet(input_file)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AnalysisException</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> input_path <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">./</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> input_file <span style=\"color:rgb(98,98,98)\">=</span> os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>join(input_path, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">webdata.parquet</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg\">----&gt; 6</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">parquet</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">input_file</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/sql/readwriter.py:544</span>, in <span class=\"ansi-cyan-fg\">DataFrameReader.parquet</span><span class=\"ansi-blue-fg\">(self, *paths, **options)</span>\n<span class=\"ansi-green-fg ansi-bold\">    533</span> int96RebaseMode <span style=\"color:rgb(98,98,98)\">=</span> options<span style=\"color:rgb(98,98,98)\">.</span>get(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">int96RebaseMode</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>)\n<span class=\"ansi-green-fg ansi-bold\">    534</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_set_opts(\n<span class=\"ansi-green-fg ansi-bold\">    535</span>     mergeSchema<span style=\"color:rgb(98,98,98)\">=</span>mergeSchema,\n<span class=\"ansi-green-fg ansi-bold\">    536</span>     pathGlobFilter<span style=\"color:rgb(98,98,98)\">=</span>pathGlobFilter,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    541</span>     int96RebaseMode<span style=\"color:rgb(98,98,98)\">=</span>int96RebaseMode,\n<span class=\"ansi-green-fg ansi-bold\">    542</span> )\n<span class=\"ansi-green-fg\">--&gt; 544</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_df(<span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jreader</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">parquet</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">_to_seq</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_sc</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">paths</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>)\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/py4j/java_gateway.py:1322</span>, in <span class=\"ansi-cyan-fg\">JavaMember.__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1316</span> command <span style=\"color:rgb(98,98,98)\">=</span> proto<span style=\"color:rgb(98,98,98)\">.</span>CALL_COMMAND_NAME <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1317</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>command_header <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1318</span>     args_command <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1319</span>     proto<span style=\"color:rgb(98,98,98)\">.</span>END_COMMAND_PART\n<span class=\"ansi-green-fg ansi-bold\">   1321</span> answer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>gateway_client<span style=\"color:rgb(98,98,98)\">.</span>send_command(command)\n<span class=\"ansi-green-fg\">-&gt; 1322</span> return_value <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_return_value</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">   1323</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">answer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">gateway_client</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">target_id</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">name</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1325</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> temp_arg <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> temp_args:\n<span class=\"ansi-green-fg ansi-bold\">   1326</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">hasattr</span>(temp_arg, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_detach</span><span style=\"color:rgb(175,0,0)\">\"</span>):\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/errors/exceptions/captured.py:185</span>, in <span class=\"ansi-cyan-fg\">capture_sql_exception.&lt;locals&gt;.deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-fg ansi-bold\">    181</span> converted <span style=\"color:rgb(98,98,98)\">=</span> convert_exception(e<span style=\"color:rgb(98,98,98)\">.</span>java_exception)\n<span class=\"ansi-green-fg ansi-bold\">    182</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(converted, UnknownException):\n<span class=\"ansi-green-fg ansi-bold\">    183</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Hide where the exception came from that shows a non-Pythonic</span>\n<span class=\"ansi-green-fg ansi-bold\">    184</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># JVM exception message.</span>\n<span class=\"ansi-green-fg\">--&gt; 185</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> converted <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">    186</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">    187</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span>\n\n<span class=\"ansi-red-fg\">AnalysisException</span>: [PATH_NOT_FOUND] Path does not exist: file:/home/boucheron/Documents/IFEBY310/core/notebooks/webdata.parquet.</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#72d6f521 .cell execution_count=7}\n``` {.python .cell-code}\ndf.printSchema()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>printSchema()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#25bdbafb .cell execution_count=8}\n``` {.python .cell-code}\ndf.rdd.getNumPartitions()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>rdd<span style=\"color:rgb(98,98,98)\">.</span>getNumPartitions()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f48c05e1 .cell execution_count=9}\n``` {.python .cell-code}\n%timeit\ndfa = pq.read_table(input_file)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> get_ipython()<span style=\"color:rgb(98,98,98)\">.</span>run_line_magic(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">timeit</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg\">----&gt; 2</span> dfa <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pq</span><span style=\"color:rgb(98,98,98)\">.</span>read_table(input_file)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pq' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#78ddefc2 .cell execution_count=10}\n``` {.python .cell-code}\nprint(dfa.schema)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">dfa</span><span style=\"color:rgb(98,98,98)\">.</span>schema)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dfa' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c750836c .cell execution_count=11}\n``` {.python .cell-code}\n( \n    df.select('xid')\n      .distinct()\n      .explain()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> ( \n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>       <span style=\"color:rgb(98,98,98)\">.</span>distinct()\n<span class=\"ansi-green-fg ansi-bold\">      4</span>       <span style=\"color:rgb(98,98,98)\">.</span>explain()\n<span class=\"ansi-green-fg ansi-bold\">      5</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1c5b3fff .cell execution_count=12}\n``` {.python .cell-code}\n# \n( \n    df.select('xid')\n      .distinct()\n      .count()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># </span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> ( \n<span class=\"ansi-green-fg\">----&gt; 3</span>     <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>       <span style=\"color:rgb(98,98,98)\">.</span>distinct()\n<span class=\"ansi-green-fg ansi-bold\">      5</span>       <span style=\"color:rgb(98,98,98)\">.</span>count()\n<span class=\"ansi-green-fg ansi-bold\">      6</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c043cba7 .cell execution_count=13}\n``` {.python .cell-code}\nxid_partition = Window.partitionBy('xid')\nn_events = func.count(col('action')).over(xid_partition)\ndf = df.withColumn('n_events', n_events)\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> xid_partition <span style=\"color:rgb(98,98,98)\">=</span> Window<span style=\"color:rgb(98,98,98)\">.</span>partitionBy(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> n_events <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>count(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">action</span><span style=\"color:rgb(175,0,0)\">'</span>))<span style=\"color:rgb(98,98,98)\">.</span>over(xid_partition)\n<span class=\"ansi-green-fg\">----&gt; 3</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_events</span><span style=\"color:rgb(175,0,0)\">'</span>, n_events)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3665c5f7 .cell execution_count=14}\n``` {.python .cell-code}\n( \n  df\n    .groupBy('xid')\n    .agg(func.count('action'))\n    .head(5)\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> ( \n<span class=\"ansi-green-fg\">----&gt; 2</span>   <span class=\"ansi-yellow-bg\">df</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>groupBy(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>agg(func<span style=\"color:rgb(98,98,98)\">.</span>count(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">action</span><span style=\"color:rgb(175,0,0)\">'</span>))\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(98,98,98)\">.</span>head(<span style=\"color:rgb(98,98,98)\">5</span>)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d6bc49f9 .cell execution_count=15}\n``` {.python .cell-code}\ndf = df.repartitionByRange(20, 'xid')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>repartitionByRange(<span style=\"color:rgb(98,98,98)\">20</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#0471b6b9 .cell execution_count=16}\n``` {.python .cell-code}\ndf.persist()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>persist()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5fccda01 .cell execution_count=17}\n``` {.python .cell-code}\nxid_partition = Window.partitionBy('xid')\n\nmax_date = (\n  func\n    .max(col('date'))\n    .over(xid_partition)\n)\n\nn_days_since_last_event = func.datediff(func.current_date(), max_date)\n\ndf = df.withColumn('n_days_since_last_event',\n                   n_days_since_last_event)\n\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 11</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> max_date <span style=\"color:rgb(98,98,98)\">=</span> (\n<span class=\"ansi-green-fg ansi-bold\">      4</span>   func\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(98,98,98)\">.</span>max(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">date</span><span style=\"color:rgb(175,0,0)\">'</span>))\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"color:rgb(98,98,98)\">.</span>over(xid_partition)\n<span class=\"ansi-green-fg ansi-bold\">      7</span> )\n<span class=\"ansi-green-fg ansi-bold\">      9</span> n_days_since_last_event <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>datediff(func<span style=\"color:rgb(98,98,98)\">.</span>current_date(), max_date)\n<span class=\"ansi-green-fg\">---&gt; 11</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_days_since_last_event</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     12</span>                    n_days_since_last_event)\n<span class=\"ansi-green-fg ansi-bold\">     14</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7638dadf .cell execution_count=18}\n``` {.python .cell-code}\nn_events = func.count(col('action')).over(xid_partition)\n\ndf = df.withColumn('n_events', n_events)\n\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> n_events <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>count(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">action</span><span style=\"color:rgb(175,0,0)\">'</span>))<span style=\"color:rgb(98,98,98)\">.</span>over(xid_partition)\n<span class=\"ansi-green-fg\">----&gt; 3</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_events</span><span style=\"color:rgb(175,0,0)\">'</span>, n_events)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#feb26583 .cell execution_count=19}\n``` {.python .cell-code}\nxid_device_partition = xid_partition.partitionBy('device')\n\nn_events_per_device = (\n    func.count(col('action'))\n        .over(xid_device_partition)\n)\n\ndf = df.withColumn('n_events_per_device', n_events_per_device)\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 8</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> xid_device_partition <span style=\"color:rgb(98,98,98)\">=</span> xid_partition<span style=\"color:rgb(98,98,98)\">.</span>partitionBy(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">device</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> n_events_per_device <span style=\"color:rgb(98,98,98)\">=</span> (\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     func<span style=\"color:rgb(98,98,98)\">.</span>count(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">action</span><span style=\"color:rgb(175,0,0)\">'</span>))\n<span class=\"ansi-green-fg ansi-bold\">      5</span>         <span style=\"color:rgb(98,98,98)\">.</span>over(xid_device_partition)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> )\n<span class=\"ansi-green-fg\">----&gt; 8</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_events_per_device</span><span style=\"color:rgb(175,0,0)\">'</span>, n_events_per_device)\n<span class=\"ansi-green-fg ansi-bold\">      9</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2742778b .cell execution_count=20}\n``` {.python .cell-code}\nrank_device = (\n  func\n    .dense_rank()\n    .over(xid_partition.orderBy('device'))\n)\n\nn_unique_device = (\n    func\n      .last(rank_device)\n      .over(xid_partition)\n)\n\ndf = df.withColumn('n_device', n_unique_device)\n\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 13</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> rank_device <span style=\"color:rgb(98,98,98)\">=</span> (\n<span class=\"ansi-green-fg ansi-bold\">      2</span>   func\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>dense_rank()\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>over(xid_partition<span style=\"color:rgb(98,98,98)\">.</span>orderBy(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">device</span><span style=\"color:rgb(175,0,0)\">'</span>))\n<span class=\"ansi-green-fg ansi-bold\">      5</span> )\n<span class=\"ansi-green-fg ansi-bold\">      7</span> n_unique_device <span style=\"color:rgb(98,98,98)\">=</span> (\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     func\n<span class=\"ansi-green-fg ansi-bold\">      9</span>       <span style=\"color:rgb(98,98,98)\">.</span>last(rank_device)\n<span class=\"ansi-green-fg ansi-bold\">     10</span>       <span style=\"color:rgb(98,98,98)\">.</span>over(xid_partition)\n<span class=\"ansi-green-fg ansi-bold\">     11</span> )\n<span class=\"ansi-green-fg\">---&gt; 13</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_device</span><span style=\"color:rgb(175,0,0)\">'</span>, n_unique_device)\n<span class=\"ansi-green-fg ansi-bold\">     15</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c276a1da .cell execution_count=21}\n``` {.python .cell-code}\ndf.printSchema()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>printSchema()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#fecb4ba9 .cell execution_count=22}\n``` {.python .cell-code}\n(\n  df\n    .where(col('n_device') > 1)\n    .select('xid', \n            'device', \n            'n_events', \n            'n_device', \n            'n_events_per_device')\n    .head(n=8)\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>   <span class=\"ansi-yellow-bg\">df</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>where(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_device</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      5</span>             <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">device</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      6</span>             <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_events</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      7</span>             <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_device</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      8</span>             <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_events_per_device</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     <span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">8</span>)\n<span class=\"ansi-green-fg ansi-bold\">     10</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4a838663 .cell execution_count=23}\n``` {.python .cell-code}\ndef n_events_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    n_events = func.count(col('action')).over(xid_partition)\n    \n    df = df.withColumn('n_events', n_events)\n\n    return df\n```\n:::\n\n\n::: {#d42be14f .cell execution_count=24}\n``` {.python .cell-code}\ndef my_count_window_transform(df, input_col, output_col, part_col):\n    w = Window.partitionBy(part_col)\n    out_col = func.count(col(input_col)).over(w)\n\n    return df.withColumn(output_col, out_col)\n```\n:::\n\n\n::: {#df36eb57 .cell execution_count=25}\n``` {.python .cell-code}\ndef hour_transformer(df):\n    hour = func.hour(col('date'))\n    df = df.withColumn('hour', hour)\n    return df\n\ndef weekday_transformer(df):\n    weekday = func.date_format(col('date'), 'EEEE')\n    df = df.withColumn('weekday', weekday)\n    return df\n```\n:::\n\n\n::: {#ccbd187c .cell execution_count=26}\n``` {.python .cell-code}\ndef n_events_per_hour_transformer(df):\n    xid_hour_partition = Window.partitionBy('xid', 'hour')\n    n_events_per_hour = func.count(col('action')).over(xid_hour_partition)\n    df = df.withColumn('n_events_per_hour', n_events_per_hour)\n    return df\n```\n:::\n\n\n::: {#d1b7edb1 .cell execution_count=27}\n``` {.python .cell-code}\ndef n_events_per_weekday_transformer(df):\n    xid_weekday_partition = Window.partitionBy('xid', 'weekday')\n    n_events_per_weekday = func.count(col('action')).over(xid_weekday_partition)\n    df = df.withColumn('n_events_per_weekday', n_events_per_weekday)\n    return df\n\ndef n_days_since_last_event_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    max_date = func.max(col('date')).over(xid_partition)\n    n_days_since_last_event = func.datediff(func.current_date(), max_date)\n    df = df.withColumn('n_days_since_last_event',\n                       n_days_since_last_event + lit(0.1))\n    return df\n\ndef n_days_since_last_action_transformer(df):\n    xid_partition_action = Window.partitionBy('xid', 'action')\n    max_date = func.max(col('date')).over(xid_partition_action)\n    n_days_since_last_action = func.datediff(func.current_date(),\n                                                        max_date)\n    df = df.withColumn('n_days_since_last_action',\n                       n_days_since_last_action + lit(0.1))\n    return df\n\ndef n_unique_day_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    dayofyear = func.dayofyear(col('date'))\n    rank_day = func.dense_rank().over(xid_partition.orderBy(dayofyear))\n    n_unique_day = func.last(rank_day).over(xid_partition)\n    df = df.withColumn('n_unique_day', n_unique_day)\n    return df\n\ndef n_unique_hour_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_hour = func.dense_rank().over(xid_partition.orderBy('hour'))\n    n_unique_hour = func.last(rank_hour).over(xid_partition)\n    df = df.withColumn('n_unique_hour', n_unique_hour)\n    return df\n\ndef n_events_per_device_transformer(df):\n    xid_device_partition = Window.partitionBy('xid', 'device')\n    n_events_per_device = func.count(func.col('device')) \\\n        .over(xid_device_partition)\n    df = df.withColumn('n_events_per_device', n_events_per_device)\n    return df\n\ndef n_unique_device_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_device = func.dense_rank().over(xid_partition.orderBy('device'))\n    n_unique_device = func.last(rank_device).over(xid_partition)\n    df = df.withColumn('n_device', n_unique_device)\n    return df\n\ndef n_actions_per_category_id_transformer(df):\n    xid_category_id_partition = Window.partitionBy('xid', 'category_id',\n                                                   'action')\n    n_actions_per_category_id = func.count(func.col('action')) \\\n        .over(xid_category_id_partition)\n    df = df.withColumn('n_actions_per_category_id', n_actions_per_category_id)\n    return df\n\ndef n_unique_category_id_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_category_id = func.dense_rank().over(xid_partition\\\n                                              .orderBy('category_id'))\n    n_unique_category_id = func.last(rank_category_id).over(xid_partition)\n    df = df.withColumn('n_unique_category_id', n_unique_category_id)\n    return df\n\ndef n_events_per_category_id_transformer(df):\n    xid_category_id_partition = Window.partitionBy('xid', 'category_id')\n    n_events_per_category_id = func.count(func.col('action')) \\\n        .over(xid_category_id_partition)\n    df = df.withColumn('n_events_per_category_id', n_events_per_category_id)\n    return df\n\ndef n_events_per_website_id_transformer(df):\n    xid_website_id_partition = Window.partitionBy('xid', 'website_id')\n    n_events_per_website_id = func.count(col('action'))\\\n        .over(xid_website_id_partition)\n    df = df.withColumn('n_events_per_website_id', n_events_per_website_id)\n    return df\n```\n:::\n\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /usr/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.3\n---\n",
    "supporting": [
      "notebook14_files"
    ],
    "filters": []
  }
}