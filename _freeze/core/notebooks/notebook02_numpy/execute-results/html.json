{
  "hash": "c30da50563487ecd6b02c8c3b1e827e6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Introduction to `numpy`\njupyter: python3\n\nengine: jupyter\n---\n\n\n\n[`NumPy`](https://numpy.org) is the fundamental package for scientific computing with Python. It contains among other things:\n\n- a powerful [N-dimensional array object](https://numpy.org/doc/stable/user/basics.indexing.html)\n- (sophisticated) [broadcasting functions](https://numpy.org/doc/stable/user/basics.broadcasting.html)\n- tools for integrating C/C++ and Fortran code\n- useful [linear algebra](https://numpy.org/doc/stable/reference/routines.linalg.html), [Fourier transform](https://numpy.org/doc/stable/user/basics.indexing.html), and [random generation capabilities](https://numpy.org/doc/stable/reference/random/index.html)\n\nBesides its obvious scientific uses, `NumPy` can also be used as an efficient multi-dimensional container for general data. Arbitrary data-types can be defined. This allows `NumPy` to seamlessly and speedily integrate with a wide variety of databases.\n\nLibrary documentation: <a>http://numpy.org/</a>\n\n\n## The base `numpy.array` object\n\n::: {#cell-setup .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:03:56.772810Z\",\"start_time\":\"2022-01-19T10:03:56.767960Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\n# declare a vector using a list as the argument\nv = np.array([1, 2.0, 3, 4])\nv\n```\n\n::: {#setup .cell-output .cell-output-display execution_count=1}\n```\narray([1., 2., 3., 4.])\n```\n:::\n:::\n\n\n::: {#f7ad7568 .cell execution_count=2}\n``` {.python .cell-code}\nlist([1, 2.0, 3, 4])\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n[1, 2.0, 3, 4]\n```\n:::\n:::\n\n\n::: {#c1afc56a .cell execution_count=3}\n``` {.python .cell-code}\ntype(v)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nnumpy.ndarray\n```\n:::\n:::\n\n\n::: {#d156502a .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:14.635335Z\",\"start_time\":\"2022-01-19T10:04:14.631049Z\"}' execution_count=4}\n``` {.python .cell-code}\nv.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n(4,)\n```\n:::\n:::\n\n\n::: {#3451ffd3 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:21.792284Z\",\"start_time\":\"2022-01-19T10:04:21.788055Z\"}' execution_count=5}\n``` {.python .cell-code}\nv.ndim\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n1\n```\n:::\n:::\n\n\n::: {#17aad113 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:25.288962Z\",\"start_time\":\"2022-01-19T10:04:25.284105Z\"}' execution_count=6}\n``` {.python .cell-code}\nv.dtype is float\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#b403e2a4 .cell execution_count=7}\n``` {.python .cell-code}\nv.dtype \n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\ndtype('float64')\n```\n:::\n:::\n\n\n::: {#73656cab .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:40.960057Z\",\"start_time\":\"2022-01-19T10:04:40.955004Z\"}' execution_count=8}\n``` {.python .cell-code}\nnp.uint8 is int\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"} \n\nUse copilot *explain* to understand the chunks:\n\n>  The np.uint8 is a data type in NumPy, representing an unsigned 8-bit integer, which can store values from 0 to 255. The int type is the built-in integer type in Python, which can represent any integer value without a fixed size limit.\n\n:::\n\n::: {#b3b62e93 .cell execution_count=9}\n``` {.python .cell-code}\nnp.array([2**120, 2**40], dtype=np.int64)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">OverflowError</span>                             Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">array</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">2</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">120</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">2</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">40</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">dtype</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">int64</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-red-fg\">OverflowError</span>: Python int too large to convert to C long</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#906d8a34 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:43.844304Z\",\"start_time\":\"2022-01-19T10:04:43.838964Z\"}' execution_count=10}\n``` {.python .cell-code}\nnp.uint16 is int \n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#1510d154 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:45.206350Z\",\"start_time\":\"2022-01-19T10:04:45.201261Z\"}' execution_count=11}\n``` {.python .cell-code}\nnp.uint32  is int\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#fa8fa875 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:04:48.250324Z\",\"start_time\":\"2022-01-19T10:04:48.244917Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=12}\n``` {.python .cell-code}\nw = np.array([1.3, 2, 3, 4], dtype=np.int64)\nw\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\narray([1, 2, 3, 4])\n```\n:::\n:::\n\n\n::: {#cd94933e .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:05:00.151747Z\",\"start_time\":\"2022-01-19T10:05:00.146141Z\"}' execution_count=13}\n``` {.python .cell-code}\nw.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\ndtype('int64')\n```\n:::\n:::\n\n\n::: {#e12b2d05 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:25.417588Z\",\"start_time\":\"2022-01-19T10:08:25.414352Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=14}\n``` {.python .cell-code}\na = np.arange(100)\n```\n:::\n\n\n::: {#9297cbc4 .cell execution_count=15}\n``` {.python .cell-code}\ntype(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nnumpy.ndarray\n```\n:::\n:::\n\n\n::: {#5236adc4 .cell execution_count=16}\n``` {.python .cell-code}\nnp.array(range(100))\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n```\n:::\n:::\n\n\n::: {#86b8cc21 .cell execution_count=17}\n``` {.python .cell-code}\na\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n```\n:::\n:::\n\n\n::: {#b99a02a9 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:30.650242Z\",\"start_time\":\"2022-01-19T10:08:30.645228Z\"}' execution_count=18}\n``` {.python .cell-code}\na.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\ndtype('int64')\n```\n:::\n:::\n\n\n::: {#36eb9104 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:34.906164Z\",\"start_time\":\"2022-01-19T10:08:34.899997Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=19}\n``` {.python .cell-code}\n-3 * a ** 2\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\narray([     0,     -3,    -12,    -27,    -48,    -75,   -108,   -147,\n         -192,   -243,   -300,   -363,   -432,   -507,   -588,   -675,\n         -768,   -867,   -972,  -1083,  -1200,  -1323,  -1452,  -1587,\n        -1728,  -1875,  -2028,  -2187,  -2352,  -2523,  -2700,  -2883,\n        -3072,  -3267,  -3468,  -3675,  -3888,  -4107,  -4332,  -4563,\n        -4800,  -5043,  -5292,  -5547,  -5808,  -6075,  -6348,  -6627,\n        -6912,  -7203,  -7500,  -7803,  -8112,  -8427,  -8748,  -9075,\n        -9408,  -9747, -10092, -10443, -10800, -11163, -11532, -11907,\n       -12288, -12675, -13068, -13467, -13872, -14283, -14700, -15123,\n       -15552, -15987, -16428, -16875, -17328, -17787, -18252, -18723,\n       -19200, -19683, -20172, -20667, -21168, -21675, -22188, -22707,\n       -23232, -23763, -24300, -24843, -25392, -25947, -26508, -27075,\n       -27648, -28227, -28812, -29403])\n```\n:::\n:::\n\n\n::: {#a48e5ab5 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:37.560386Z\",\"start_time\":\"2022-01-19T10:08:37.557072Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=20}\n``` {.python .cell-code}\na[42] = 13\n```\n:::\n\n\n::: {#53595be3 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:38.581351Z\",\"start_time\":\"2022-01-19T10:08:38.578031Z\"}' execution_count=21}\n``` {.python .cell-code}\na[42] = 1025\n```\n:::\n\n\n::: {#47784f07 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:09:34.115461Z\",\"start_time\":\"2022-01-19T10:09:34.109542Z\"}' execution_count=22}\n``` {.python .cell-code}\nnp.info(np.int16)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int16()\n\nSigned integer type, compatible with C ``short``.\n\n:Character code: ``'h'``\n:Canonical name: `numpy.short`\n:Alias on this platform (Linux x86_64): `numpy.int16`: 16-bit signed integer (``-32_768`` to ``32_767``).\n\n\nMethods:\n\n  all  --  Scalar method identical to the corresponding array attribute.\n  any  --  Scalar method identical to the corresponding array attribute.\n  argmax  --  Scalar method identical to the corresponding array attribute.\n  argmin  --  Scalar method identical to the corresponding array attribute.\n  argsort  --  Scalar method identical to the corresponding array attribute.\n  astype  --  Scalar method identical to the corresponding array attribute.\n  bit_count  --  int16.bit_count() -> int\n  byteswap  --  Scalar method identical to the corresponding array attribute.\n  choose  --  Scalar method identical to the corresponding array attribute.\n  clip  --  Scalar method identical to the corresponding array attribute.\n  compress  --  Scalar method identical to the corresponding array attribute.\n  conj  --  None\n  conjugate  --  Scalar method identical to the corresponding array attribute.\n  copy  --  Scalar method identical to the corresponding array attribute.\n  cumprod  --  Scalar method identical to the corresponding array attribute.\n  cumsum  --  Scalar method identical to the corresponding array attribute.\n  diagonal  --  Scalar method identical to the corresponding array attribute.\n  dump  --  Scalar method identical to the corresponding array attribute.\n  dumps  --  Scalar method identical to the corresponding array attribute.\n  fill  --  Scalar method identical to the corresponding array attribute.\n  flatten  --  Scalar method identical to the corresponding array attribute.\n  getfield  --  Scalar method identical to the corresponding array attribute.\n  is_integer  --  integer.is_integer() -> bool\n  item  --  Scalar method identical to the corresponding array attribute.\n  max  --  Scalar method identical to the corresponding array attribute.\n  mean  --  Scalar method identical to the corresponding array attribute.\n  min  --  Scalar method identical to the corresponding array attribute.\n  nonzero  --  Scalar method identical to the corresponding array attribute.\n  prod  --  Scalar method identical to the corresponding array attribute.\n  put  --  Scalar method identical to the corresponding array attribute.\n  ravel  --  Scalar method identical to the corresponding array attribute.\n  repeat  --  Scalar method identical to the corresponding array attribute.\n  reshape  --  Scalar method identical to the corresponding array attribute.\n  resize  --  Scalar method identical to the corresponding array attribute.\n  round  --  Scalar method identical to the corresponding array attribute.\n  searchsorted  --  Scalar method identical to the corresponding array attribute.\n  setfield  --  Scalar method identical to the corresponding array attribute.\n  setflags  --  Scalar method identical to the corresponding array attribute.\n  sort  --  Scalar method identical to the corresponding array attribute.\n  squeeze  --  Scalar method identical to the corresponding array attribute.\n  std  --  Scalar method identical to the corresponding array attribute.\n  sum  --  Scalar method identical to the corresponding array attribute.\n  swapaxes  --  Scalar method identical to the corresponding array attribute.\n  take  --  Scalar method identical to the corresponding array attribute.\n  to_device  --  None\n  tobytes  --  None\n  tofile  --  Scalar method identical to the corresponding array attribute.\n  tolist  --  Scalar method identical to the corresponding array attribute.\n  tostring  --  Scalar method identical to the corresponding array attribute.\n  trace  --  Scalar method identical to the corresponding array attribute.\n  transpose  --  Scalar method identical to the corresponding array attribute.\n  var  --  Scalar method identical to the corresponding array attribute.\n  view  --  Scalar method identical to the corresponding array attribute.\n```\n:::\n:::\n\n\n::: {#d47cbb08 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:09:20.037776Z\",\"start_time\":\"2022-01-19T10:09:20.031216Z\"}' execution_count=23}\n``` {.python .cell-code}\nnp.int16\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nnumpy.int16\n```\n:::\n:::\n\n\n::: {#3580ceea .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:08:39.686116Z\",\"start_time\":\"2022-01-19T10:08:39.678619Z\"}' execution_count=24}\n``` {.python .cell-code}\ndict(enumerate(a))\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n{0: np.int64(0),\n 1: np.int64(1),\n 2: np.int64(2),\n 3: np.int64(3),\n 4: np.int64(4),\n 5: np.int64(5),\n 6: np.int64(6),\n 7: np.int64(7),\n 8: np.int64(8),\n 9: np.int64(9),\n 10: np.int64(10),\n 11: np.int64(11),\n 12: np.int64(12),\n 13: np.int64(13),\n 14: np.int64(14),\n 15: np.int64(15),\n 16: np.int64(16),\n 17: np.int64(17),\n 18: np.int64(18),\n 19: np.int64(19),\n 20: np.int64(20),\n 21: np.int64(21),\n 22: np.int64(22),\n 23: np.int64(23),\n 24: np.int64(24),\n 25: np.int64(25),\n 26: np.int64(26),\n 27: np.int64(27),\n 28: np.int64(28),\n 29: np.int64(29),\n 30: np.int64(30),\n 31: np.int64(31),\n 32: np.int64(32),\n 33: np.int64(33),\n 34: np.int64(34),\n 35: np.int64(35),\n 36: np.int64(36),\n 37: np.int64(37),\n 38: np.int64(38),\n 39: np.int64(39),\n 40: np.int64(40),\n 41: np.int64(41),\n 42: np.int64(1025),\n 43: np.int64(43),\n 44: np.int64(44),\n 45: np.int64(45),\n 46: np.int64(46),\n 47: np.int64(47),\n 48: np.int64(48),\n 49: np.int64(49),\n 50: np.int64(50),\n 51: np.int64(51),\n 52: np.int64(52),\n 53: np.int64(53),\n 54: np.int64(54),\n 55: np.int64(55),\n 56: np.int64(56),\n 57: np.int64(57),\n 58: np.int64(58),\n 59: np.int64(59),\n 60: np.int64(60),\n 61: np.int64(61),\n 62: np.int64(62),\n 63: np.int64(63),\n 64: np.int64(64),\n 65: np.int64(65),\n 66: np.int64(66),\n 67: np.int64(67),\n 68: np.int64(68),\n 69: np.int64(69),\n 70: np.int64(70),\n 71: np.int64(71),\n 72: np.int64(72),\n 73: np.int64(73),\n 74: np.int64(74),\n 75: np.int64(75),\n 76: np.int64(76),\n 77: np.int64(77),\n 78: np.int64(78),\n 79: np.int64(79),\n 80: np.int64(80),\n 81: np.int64(81),\n 82: np.int64(82),\n 83: np.int64(83),\n 84: np.int64(84),\n 85: np.int64(85),\n 86: np.int64(86),\n 87: np.int64(87),\n 88: np.int64(88),\n 89: np.int64(89),\n 90: np.int64(90),\n 91: np.int64(91),\n 92: np.int64(92),\n 93: np.int64(93),\n 94: np.int64(94),\n 95: np.int64(95),\n 96: np.int64(96),\n 97: np.int64(97),\n 98: np.int64(98),\n 99: np.int64(99)}\n```\n:::\n:::\n\n\n::: {#3526cf77 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:09:47.067438Z\",\"start_time\":\"2022-01-19T10:09:47.061548Z\"}' execution_count=25}\n``` {.python .cell-code}\na + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\narray([   1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,\n         12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,\n         23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,\n         34,   35,   36,   37,   38,   39,   40,   41,   42, 1026,   44,\n         45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,\n         56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,\n         67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,\n         78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,\n         89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,\n        100])\n```\n:::\n:::\n\n\n::: {#d6bcc671 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:02.092179Z\",\"start_time\":\"2022-01-19T10:10:02.086622Z\"}' execution_count=26}\n``` {.python .cell-code}\nb = a + 1\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\narray([   1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,\n         12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,\n         23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,\n         34,   35,   36,   37,   38,   39,   40,   41,   42, 1026,   44,\n         45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,\n         56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,\n         67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,\n         78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,\n         89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,\n        100])\n```\n:::\n:::\n\n\n::: {#cb07b15e .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:12.761835Z\",\"start_time\":\"2022-01-19T10:10:12.756736Z\"}' execution_count=27}\n``` {.python .cell-code}\na is b\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#e57d67a7 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:22.189001Z\",\"start_time\":\"2022-01-19T10:10:22.185209Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=28}\n``` {.python .cell-code}\nf = id(a)\na += 1\nf, id(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n(124744883542928, 124744883542928)\n```\n:::\n:::\n\n\n::: {#5505d4e8 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:23.392681Z\",\"start_time\":\"2022-01-19T10:10:23.387466Z\"}' execution_count=29}\n``` {.python .cell-code}\na\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\narray([   1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,\n         12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,\n         23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,\n         34,   35,   36,   37,   38,   39,   40,   41,   42, 1026,   44,\n         45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,\n         56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,\n         67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,\n         78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,\n         89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,\n        100])\n```\n:::\n:::\n\n\n::: {#a20f241e .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:27.087595Z\",\"start_time\":\"2022-01-19T10:10:27.081763Z\"}' execution_count=30}\n``` {.python .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\narray([   1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,\n         12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,\n         23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,\n         34,   35,   36,   37,   38,   39,   40,   41,   42, 1026,   44,\n         45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,\n         56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,\n         67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,\n         78,   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,\n         89,   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,\n        100])\n```\n:::\n:::\n\n\n::: {.callout-warning}\n\nBeware of the dimensions: a 1D array is not the same as a 2D array with 1 column\n\n::: \n\n::: {#8ae73018 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:10:30.211477Z\",\"start_time\":\"2022-01-19T10:10:30.204724Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=31}\n``` {.python .cell-code}\na1 = np.array([1, 2, 3])\nprint(a1, a1.shape, a1.ndim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3] (3,) 1\n```\n:::\n:::\n\n\n::: {#72d1a28f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:11:39.470253Z\",\"start_time\":\"2022-01-19T10:11:39.465331Z\"}' execution_count=32}\n``` {.python .cell-code}\na2 = np.array([1, 2, 3])\nprint(a2, a2.shape, a2.ndim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3] (3,) 1\n```\n:::\n:::\n\n\n[More on NumPy quickstart](https://numpy.org/devdocs/user/quickstart.html)\n\n::: {.callout-note}\n\nList the attributes and methods of class `numpy.ndarray`. \nYou may use function `dir()` and filter the result using \nmethods for objects of class `string`. \n\n:::\n\n## Matrix multiplication\n\n::: {#de506525 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:11:41.023400Z\",\"start_time\":\"2022-01-19T10:11:41.018032Z\"}' execution_count=33}\n``` {.python .cell-code}\na2.dot(a1) # inner product \n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\nnp.int64(14)\n```\n:::\n:::\n\n\n::: {#7d1ae801 .cell execution_count=34}\n``` {.python .cell-code}\n( \n    np.array([a2])\n        .transpose() # column vector\n        .dot(np.array([a1]))\n) # column vector multiplied by row vector\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\narray([[1, 2, 3],\n       [2, 4, 6],\n       [3, 6, 9]])\n```\n:::\n:::\n\n\n::: {#f9040f63 .cell execution_count=35}\n``` {.python .cell-code}\n(\n    np.array([a2])\n    .transpose()#.shape\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\narray([[1],\n       [2],\n       [3]])\n```\n:::\n:::\n\n\n::: {#676c7405 .cell execution_count=36}\n``` {.python .cell-code}\n(\n    a2.reshape(3,1)  # all explicit\n      .dot(a1.reshape(1, 3))\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\narray([[1, 2, 3],\n       [2, 4, 6],\n       [3, 6, 9]])\n```\n:::\n:::\n\n\n::: {#4eec348e .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:11:55.636179Z\",\"start_time\":\"2022-01-19T10:11:55.630699Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=37}\n``` {.python .cell-code}\n# Declare a 2D array using a nested list as the constructor argument\nM = np.array([[1,2], \n              [3,4], \n              [3.14, -9.17]])\nM\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\narray([[ 1.  ,  2.  ],\n       [ 3.  ,  4.  ],\n       [ 3.14, -9.17]])\n```\n:::\n:::\n\n\n::: {#77121980 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:11:55.792686Z\",\"start_time\":\"2022-01-19T10:11:55.787196Z\"}' execution_count=38}\n``` {.python .cell-code}\nM.shape, M.size\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n((3, 2), 6)\n```\n:::\n:::\n\n\n::: {#5a38e09f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:12:05.624781Z\",\"start_time\":\"2022-01-19T10:12:05.619551Z\"}' execution_count=39}\n``` {.python .cell-code}\nM.ravel(), M.ndim, M.ravel().shape\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n(array([ 1.  ,  2.  ,  3.  ,  4.  ,  3.14, -9.17]), 2, (6,))\n```\n:::\n:::\n\n\n::: {#7c80779a .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:12:32.331344Z\",\"start_time\":\"2022-01-19T10:12:32.325181Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=40}\n``` {.python .cell-code}\n# arguments: start, stop, step\nx = (\n     np.arange(12)\n       .reshape(4, 3)\n)\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11]])\n```\n:::\n:::\n\n\n::: {#801fd7a5 .cell execution_count=41}\n``` {.python .cell-code}\ny = np.arange(3).reshape(3,1)\n\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\narray([[0],\n       [1],\n       [2]])\n```\n:::\n:::\n\n\n::: {#b4109155 .cell execution_count=42}\n``` {.python .cell-code}\nx @ y, x.dot(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n(array([[ 5],\n        [14],\n        [23],\n        [32]]),\n array([[ 5],\n        [14],\n        [23],\n        [32]]))\n```\n:::\n:::\n\n\n::: {.callout-note}\n\n\n:::\n\n## Generating arrays\n\n::: {#2833fb27 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:12:34.268059Z\",\"start_time\":\"2022-01-19T10:12:34.260897Z\"}' execution_count=43}\n``` {.python .cell-code}\nnp.linspace(0, 10, 51)  # meaning of the 3 positional parameters ? \n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\narray([ 0. ,  0.2,  0.4,  0.6,  0.8,  1. ,  1.2,  1.4,  1.6,  1.8,  2. ,\n        2.2,  2.4,  2.6,  2.8,  3. ,  3.2,  3.4,  3.6,  3.8,  4. ,  4.2,\n        4.4,  4.6,  4.8,  5. ,  5.2,  5.4,  5.6,  5.8,  6. ,  6.2,  6.4,\n        6.6,  6.8,  7. ,  7.2,  7.4,  7.6,  7.8,  8. ,  8.2,  8.4,  8.6,\n        8.8,  9. ,  9.2,  9.4,  9.6,  9.8, 10. ])\n```\n:::\n:::\n\n\n::: {#d3fdeda5 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:13:05.893229Z\",\"start_time\":\"2022-01-19T10:13:05.887241Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=44}\n``` {.python .cell-code}\nnp.logspace(0, 10, 11, base=np.e), np.e**(np.arange(11))\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n(array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,\n        5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,\n        2.98095799e+03, 8.10308393e+03, 2.20264658e+04]),\n array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,\n        5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,\n        2.98095799e+03, 8.10308393e+03, 2.20264658e+04]))\n```\n:::\n:::\n\n\n::: {#39ae5bc7 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:14:43.385320Z\",\"start_time\":\"2022-01-19T10:14:43.273674Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=45}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Random standard Gaussian numbers\nfig = plt.figure(figsize=(8, 4))\nwn = np.random.randn(1000)\nbm = wn.cumsum()\n\nplt.plot(bm, lw=3)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-46-output-1.png){width=641 height=337}\n:::\n:::\n\n\n::: {#605ac376 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:14:46.379228Z\",\"start_time\":\"2022-01-19T10:14:46.373157Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=46}\n``` {.python .cell-code}\nnp.diag(np.arange(10))\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\narray([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 3, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 4, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 5, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 6, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 7, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0, 8, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 9]])\n```\n:::\n:::\n\n\n::: {#896cd975 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:15:19.746421Z\",\"start_time\":\"2022-01-19T10:15:19.740184Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=47}\n``` {.python .cell-code}\nzozo = np.zeros((10, 10), dtype=np.float32)\nzozo\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\narray([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32)\n```\n:::\n:::\n\n\n::: {#d9532c3f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:15:25.983891Z\",\"start_time\":\"2022-01-19T10:15:25.979180Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=48}\n``` {.python .cell-code}\nzozo.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n(10, 10)\n```\n:::\n:::\n\n\n::: {#0eea8297 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:15:28.982811Z\",\"start_time\":\"2022-01-19T10:15:28.978770Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=49}\n``` {.python .cell-code}\nprint(M)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 1.    2.  ]\n [ 3.    4.  ]\n [ 3.14 -9.17]]\n```\n:::\n:::\n\n\n::: {#f0df38b2 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:15:29.424077Z\",\"start_time\":\"2022-01-19T10:15:29.418759Z\"}' execution_count=50}\n``` {.python .cell-code}\nM[1, 1]\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\nnp.float64(4.0)\n```\n:::\n:::\n\n\n::: {#045fcaac .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:16:19.133869Z\",\"start_time\":\"2022-01-19T10:16:19.128542Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=51}\n``` {.python .cell-code}\n# assign new value\nM[0, 0] = 7\nM[:, 0] = 42\nM\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\narray([[42.  ,  2.  ],\n       [42.  ,  4.  ],\n       [42.  , -9.17]])\n```\n:::\n:::\n\n\n::: {#41be1e78 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:16:56.907063Z\",\"start_time\":\"2022-01-19T10:16:56.901415Z\"}' execution_count=52}\n``` {.python .cell-code}\nM\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\narray([[42.  ,  2.  ],\n       [42.  ,  4.  ],\n       [42.  , -9.17]])\n```\n:::\n:::\n\n\n::: {#41bf9dd5 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:16:44.838732Z\",\"start_time\":\"2022-01-19T10:16:44.832758Z\"}' execution_count=53}\n``` {.python .cell-code}\n# Warning: the next m is a **view** on M. \n# One again, no copies unless you ask for one!\nm = M[0, :]\nm\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\narray([42.,  2.])\n```\n:::\n:::\n\n\n::: {#91b73b90 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:17:45.614910Z\",\"start_time\":\"2022-01-19T10:17:45.609735Z\"}' execution_count=54}\n``` {.python .cell-code}\nm[:] = 3.14\nM\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\narray([[ 3.14,  3.14],\n       [42.  ,  4.  ],\n       [42.  , -9.17]])\n```\n:::\n:::\n\n\n::: {#470b9044 .cell execution_count=55}\n``` {.python .cell-code}\nm[:] = 7\nM\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\narray([[ 7.  ,  7.  ],\n       [42.  ,  4.  ],\n       [42.  , -9.17]])\n```\n:::\n:::\n\n\n# Slicing\n\n::: {#18682bc6 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:19:44.021962Z\",\"start_time\":\"2022-01-19T10:19:44.015749Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=56}\n``` {.python .cell-code}\n# slicing works just like with anything else (lists, etc.)\nA = np.array([1, 2, 3, 4, 5])\nprint(A)\nprint(A[::-1])\nprint(A[::2])\nprint(A[:-1:2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 4 5]\n[5 4 3 2 1]\n[1 3 5]\n[1 3]\n```\n:::\n:::\n\n\n::: {#d2fb0647 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:20:08.103594Z\",\"start_time\":\"2022-01-19T10:20:08.097276Z\"}' execution_count=57}\n``` {.python .cell-code}\n[[n + m * 10 for n in range(5)] for m in range(5)]\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n[[0, 1, 2, 3, 4],\n [10, 11, 12, 13, 14],\n [20, 21, 22, 23, 24],\n [30, 31, 32, 33, 34],\n [40, 41, 42, 43, 44]]\n```\n:::\n:::\n\n\n::: {#05794731 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:20:28.427508Z\",\"start_time\":\"2022-01-19T10:20:28.422319Z\"}' execution_count=58}\n``` {.python .cell-code}\nA = np.array([[n + m * 10 for n in range(5)] for m in range(5)])\nA\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\narray([[ 0,  1,  2,  3,  4],\n       [10, 11, 12, 13, 14],\n       [20, 21, 22, 23, 24],\n       [30, 31, 32, 33, 34],\n       [40, 41, 42, 43, 44]])\n```\n:::\n:::\n\n\n::: {#98a352d6 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:20:57.347620Z\",\"start_time\":\"2022-01-19T10:20:57.343219Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=59}\n``` {.python .cell-code}\nprint(A[1:4])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[10 11 12 13 14]\n [20 21 22 23 24]\n [30 31 32 33 34]]\n```\n:::\n:::\n\n\n::: {#9d521016 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:21:15.952179Z\",\"start_time\":\"2022-01-19T10:21:15.948641Z\"}' execution_count=60}\n``` {.python .cell-code}\nm = A[:, 1:4]\n```\n:::\n\n\n::: {#290b6fc1 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:21:22.878446Z\",\"start_time\":\"2022-01-19T10:21:22.874600Z\"}' execution_count=61}\n``` {.python .cell-code}\nm[1, 1] = 123\n```\n:::\n\n\n::: {#30612e68 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:21:24.877152Z\",\"start_time\":\"2022-01-19T10:21:24.871364Z\"}' execution_count=62}\n``` {.python .cell-code}\nA\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\narray([[  0,   1,   2,   3,   4],\n       [ 10,  11, 123,  13,  14],\n       [ 20,  21,  22,  23,  24],\n       [ 30,  31,  32,  33,  34],\n       [ 40,  41,  42,  43,  44]])\n```\n:::\n:::\n\n\n::: {#c3a39a29 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:21:35.679054Z\",\"start_time\":\"2022-01-19T10:21:35.674159Z\"}' execution_count=63}\n``` {.python .cell-code}\nA[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\narray([ 10,  11, 123,  13,  14])\n```\n:::\n:::\n\n\n::: {#ca789904 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:21:36.493496Z\",\"start_time\":\"2022-01-19T10:21:36.487589Z\"}' execution_count=64}\n``` {.python .cell-code}\nA[:, 1]\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\narray([ 1, 11, 21, 31, 41])\n```\n:::\n:::\n\n\n::: {#2f24d2b8 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:22:13.690836Z\",\"start_time\":\"2022-01-19T10:22:13.685191Z\"}' execution_count=65}\n``` {.python .cell-code}\nA[:, ::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\narray([[  4,   3,   2,   1,   0],\n       [ 14,  13, 123,  11,  10],\n       [ 24,  23,  22,  21,  20],\n       [ 34,  33,  32,  31,  30],\n       [ 44,  43,  42,  41,  40]])\n```\n:::\n:::\n\n\n::: {#e7009547 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:22:13.893926Z\",\"start_time\":\"2022-01-19T10:22:13.890163Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=66}\n``` {.python .cell-code}\nprint(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[  0   1   2   3   4]\n [ 10  11 123  13  14]\n [ 20  21  22  23  24]\n [ 30  31  32  33  34]\n [ 40  41  42  43  44]]\n```\n:::\n:::\n\n\n::: {#ad62782b .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:22:59.881914Z\",\"start_time\":\"2022-01-19T10:22:59.877820Z\"}' execution_count=67}\n``` {.python .cell-code}\nrow_indices = np.array([1, 2, 4])\nprint(A[row_indices])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 10  11 123  13  14]\n [ 20  21  22  23  24]\n [ 40  41  42  43  44]]\n```\n:::\n:::\n\n\n::: {#f235a2fb .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:23:06.495460Z\",\"start_time\":\"2022-01-19T10:23:06.490235Z\"}' execution_count=68}\n``` {.python .cell-code}\nA[:, row_indices]\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\narray([[  1,   2,   4],\n       [ 11, 123,  14],\n       [ 21,  22,  24],\n       [ 31,  32,  34],\n       [ 41,  42,  44]])\n```\n:::\n:::\n\n\nAnother way is through masking with an array of `bool`s\n\n::: {#a457d0c2 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:23:28.237730Z\",\"start_time\":\"2022-01-19T10:23:28.230508Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=69}\n``` {.python .cell-code}\n# index masking\nB = np.arange(5)\nrow_mask = np.array([True, False, True, False, False])\nprint(B)\nprint(B[row_mask])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0 1 2 3 4]\n[0 2]\n```\n:::\n:::\n\n\n::: {#277f767f .cell execution_count=70}\n``` {.python .cell-code}\nA, A[row_mask] , A[:,row_mask]\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n(array([[  0,   1,   2,   3,   4],\n        [ 10,  11, 123,  13,  14],\n        [ 20,  21,  22,  23,  24],\n        [ 30,  31,  32,  33,  34],\n        [ 40,  41,  42,  43,  44]]),\n array([[ 0,  1,  2,  3,  4],\n        [20, 21, 22, 23, 24]]),\n array([[  0,   2],\n        [ 10, 123],\n        [ 20,  22],\n        [ 30,  32],\n        [ 40,  42]]))\n```\n:::\n:::\n\n\n## Copies\n\nDon't forget that `python` *does not make copies unless told to do so* (same as with any mutable type)\n\nIf you are not careful enough, this typically leads to a *lot of errors* and to being fired !!\n\n::: {#55ab194d .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:23:51.294522Z\",\"start_time\":\"2022-01-19T10:23:51.288358Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=71}\n``` {.python .cell-code}\ny = x = np.arange(6)\nx[2] = 123\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\narray([  0,   1, 123,   3,   4,   5])\n```\n:::\n:::\n\n\n::: {#01abd932 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:24:34.145203Z\",\"start_time\":\"2022-01-19T10:24:34.140801Z\"}' execution_count=72}\n``` {.python .cell-code}\nx is y\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#c8907a4b .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:24:38.815817Z\",\"start_time\":\"2022-01-19T10:24:38.811878Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=73}\n``` {.python .cell-code}\n# A real copy\ny = x.copy()\nx is y \n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#32161d8e .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:24:57.551439Z\",\"start_time\":\"2022-01-19T10:24:57.548073Z\"}' execution_count=74}\n``` {.python .cell-code}\n# Or equivalently (but the one above is better...)\ny = np.copy(x)\n```\n:::\n\n\n::: {#66edc090 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:24:57.733643Z\",\"start_time\":\"2022-01-19T10:24:57.727390Z\"}' execution_count=75}\n``` {.python .cell-code}\nx[0] = -12\nprint(x, y, x is y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[-12   1 123   3   4   5] [  0   1 123   3   4   5] False\n```\n:::\n:::\n\n\nTo put values of x in y (copy values into an **existing** array) use  \n\n::: {#addb8314 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:27:00.707987Z\",\"start_time\":\"2022-01-19T10:27:00.703474Z\"}' execution_count=76}\n``` {.python .cell-code}\nx = np.random.randn(10)\nx, id(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n```\n(array([ 0.7051802 ,  0.94327307,  2.46901156, -0.12143809,  0.05625834,\n        -0.15833808,  0.53928054, -0.61657428, -1.34140357, -0.09147069]),\n 124744847607248)\n```\n:::\n:::\n\n\n::: {#b343eb72 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:27:35.874585Z\",\"start_time\":\"2022-01-19T10:27:35.871235Z\"}' execution_count=77}\n``` {.python .cell-code}\nx.fill(2.78)   # in place. \nx, id(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\n(array([2.78, 2.78, 2.78, 2.78, 2.78, 2.78, 2.78, 2.78, 2.78, 2.78]),\n 124744847607248)\n```\n:::\n:::\n\n\n::: {#1f159b47 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:27:39.785341Z\",\"start_time\":\"2022-01-19T10:27:39.782357Z\"}' execution_count=78}\n``` {.python .cell-code}\nx[:] = 3.14  # x.fill(3.14)  can. be chained ...\nx, id(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\n(array([3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14, 3.14]),\n 124744847607248)\n```\n:::\n:::\n\n\n::: {#2cd6c944 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:29:03.422782Z\",\"start_time\":\"2022-01-19T10:29:03.418965Z\"}' execution_count=79}\n``` {.python .cell-code}\nx[:] = np.random.randn(x.shape[0])\nx, id(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\n(array([-0.86770436,  1.25642568,  1.68268582,  0.58316853, -0.9978834 ,\n        -0.03988888, -0.38628018, -1.16826287,  3.27363921,  1.44559834]),\n 124744847607248)\n```\n:::\n:::\n\n\n::: {#d3060964 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:29:05.933501Z\",\"start_time\":\"2022-01-19T10:29:05.929790Z\"}' execution_count=80}\n``` {.python .cell-code}\ny = np.empty(x.shape)  # how does empty() work ?\ny, id(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=80}\n```\n(array([0.86770436, 1.25642568, 1.68268582, 0.58316853, 0.9978834 ,\n        0.03988888, 0.38628018, 1.16826287, 3.27363921, 1.44559834]),\n 124744847606768)\n```\n:::\n:::\n\n\n::: {#2daa5acd .cell execution_count=81}\n``` {.python .cell-code}\ny = x\ny, id(y), id(x), y is x\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\n(array([-0.86770436,  1.25642568,  1.68268582,  0.58316853, -0.9978834 ,\n        -0.03988888, -0.38628018, -1.16826287,  3.27363921,  1.44559834]),\n 124744847607248,\n 124744847607248,\n True)\n```\n:::\n:::\n\n\n::: {.callout-warning}\n\n### Final warning\n\n:::\n\nIn the next line you copy the values of `x` into an existing array `y` (of same size...)\n\n::: {#ef52416b .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:29:26.993302Z\",\"start_time\":\"2022-01-19T10:29:26.989487Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=82}\n``` {.python .cell-code}\ny = np.zeros(x.shape)\ny[:] = x\ny, y is x, np.all(y==x)\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\n(array([-0.86770436,  1.25642568,  1.68268582,  0.58316853, -0.9978834 ,\n        -0.03988888, -0.38628018, -1.16826287,  3.27363921,  1.44559834]),\n False,\n np.True_)\n```\n:::\n:::\n\n\nWhile in the next line, you are aliasing, you are giving a new name `y` to the object named `x` (you should **never, ever** write something like this)\n\n::: {#159ff0df .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:30:11.677048Z\",\"start_time\":\"2022-01-19T10:30:11.673812Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=83}\n``` {.python .cell-code}\ny = x\ny is x\n```\n\n::: {.cell-output .cell-output-display execution_count=83}\n```\nTrue\n```\n:::\n:::\n\n\n## Miscellanea\n\n### Non-numerical values\n\nA `numpy` array can contain other things than numeric types\n\n::: {#9f3c5c60 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:30:12.402445Z\",\"start_time\":\"2022-01-19T10:30:12.399156Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=84}\n``` {.python .cell-code}\narr = np.array(['Labore', 'neque', 'ipsum', 'ut', 'non', 'quiquia', 'dolore.'])\narr, arr.shape, arr.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=84}\n```\n(array(['Labore', 'neque', 'ipsum', 'ut', 'non', 'quiquia', 'dolore.'],\n       dtype='<U7'),\n (7,),\n dtype('<U7'))\n```\n:::\n:::\n\n\n::: {#71e42375 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:30:14.073657Z\",\"start_time\":\"2022-01-19T10:30:14.062255Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=85}\n``` {.python .cell-code}\n# arr.sum()\n```\n:::\n\n\n::: {#1ccc257b .cell slideshow='{\"slide_type\":\"subslide\"}' execution_count=86}\n``` {.python .cell-code}\n\"_\".join(arr)\n```\n\n::: {.cell-output .cell-output-display execution_count=86}\n```\n'Labore_neque_ipsum_ut_non_quiquia_dolore.'\n```\n:::\n:::\n\n\n::: {#46053590 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:30:46.274448Z\",\"start_time\":\"2022-01-19T10:30:46.269678Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=87}\n``` {.python .cell-code}\narr.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=87}\n```\ndtype('<U7')\n```\n:::\n:::\n\n\n## A matrix is no 2D array in `numpy`\n\nSo far, we have only used `array` or `ndarray` objects\n\nThe is another type: the `matrix` type\n\nIn words: **don't use it** (IMhO) and stick with arrays\n\n::: {#c6a3b2ed .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:31:48.972264Z\",\"start_time\":\"2022-01-19T10:31:48.968244Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=88}\n``` {.python .cell-code}\n# Matrix VS array objects in numpy\nm1 = np.matrix(np.arange(3))\nm2 = np.matrix(np.arange(3))\nm1, m2\n```\n\n::: {.cell-output .cell-output-display execution_count=88}\n```\n(matrix([[0, 1, 2]]), matrix([[0, 1, 2]]))\n```\n:::\n:::\n\n\n::: {#928aebbb .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=89}\n``` {.python .cell-code}\nm1.transpose() @ m2, m1.shape, m1.transpose() * m2\n```\n\n::: {.cell-output .cell-output-display execution_count=89}\n```\n(matrix([[0, 0, 0],\n         [0, 1, 2],\n         [0, 2, 4]]),\n (1, 3),\n matrix([[0, 0, 0],\n         [0, 1, 2],\n         [0, 2, 4]]))\n```\n:::\n:::\n\n\n::: {#4fecb9a2 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:31:50.070823Z\",\"start_time\":\"2022-01-19T10:31:50.067191Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=90}\n``` {.python .cell-code}\na1 = np.arange(3)\na2 = np.arange(3)\na1, a2\n```\n\n::: {.cell-output .cell-output-display execution_count=90}\n```\n(array([0, 1, 2]), array([0, 1, 2]))\n```\n:::\n:::\n\n\n::: {#3d5bbf2a .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:33:12.726005Z\",\"start_time\":\"2022-01-19T10:33:12.719514Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=91}\n``` {.python .cell-code}\nm1 * m2.T, m1.dot(m2.T)\n```\n\n::: {.cell-output .cell-output-display execution_count=91}\n```\n(matrix([[5]]), matrix([[5]]))\n```\n:::\n:::\n\n\n::: {#00cf0bf6 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:33:27.178091Z\",\"start_time\":\"2022-01-19T10:33:27.172613Z\"}' execution_count=92}\n``` {.python .cell-code}\na1 * a2\n```\n\n::: {.cell-output .cell-output-display execution_count=92}\n```\narray([0, 1, 4])\n```\n:::\n:::\n\n\n::: {#86796146 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:33:36.836024Z\",\"start_time\":\"2022-01-19T10:33:36.830383Z\"}' execution_count=93}\n``` {.python .cell-code}\na1.dot(a2)\n```\n\n::: {.cell-output .cell-output-display execution_count=93}\n```\nnp.int64(5)\n```\n:::\n:::\n\n\n::: {#bbac2250 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:33:48.138130Z\",\"start_time\":\"2022-01-19T10:33:48.132664Z\"}' execution_count=94}\n``` {.python .cell-code}\nnp.outer(a1, a2)\n```\n\n::: {.cell-output .cell-output-display execution_count=94}\n```\narray([[0, 0, 0],\n       [0, 1, 2],\n       [0, 2, 4]])\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nVisit <https://numpy.org/doc/stable/reference/arrays.ndarray.html#arrays-ndarray>\n\n:::\n\n## Sparse matrices\n\n::: {#76d624c3 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:37:31.887375Z\",\"start_time\":\"2022-01-19T10:37:31.882051Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=95}\n``` {.python .cell-code}\nfrom scipy.sparse import csc_matrix, csr_matrix, coo_matrix\n```\n:::\n\n\n::: {#eebcf1d7 .cell execution_count=96}\n``` {.python .cell-code}\nprobs = np.full(fill_value=1/4, shape=(4,))\nprobs\n```\n\n::: {.cell-output .cell-output-display execution_count=96}\n```\narray([0.25, 0.25, 0.25, 0.25])\n```\n:::\n:::\n\n\n::: {#03662b87 .cell execution_count=97}\n``` {.python .cell-code}\nX = np.random.multinomial(n=2, pvals=probs, size=4)   # check you understand what is going on \nX\n```\n\n::: {.cell-output .cell-output-display execution_count=97}\n```\narray([[1, 1, 0, 0],\n       [0, 1, 0, 1],\n       [1, 0, 1, 0],\n       [2, 0, 0, 0]])\n```\n:::\n:::\n\n\n::: {#a8c2b628 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:37:48.232516Z\",\"start_time\":\"2022-01-19T10:37:48.228484Z\"}' execution_count=98}\n``` {.python .cell-code}\nprobs\n```\n\n::: {.cell-output .cell-output-display execution_count=98}\n```\narray([0.25, 0.25, 0.25, 0.25])\n```\n:::\n:::\n\n\n::: {#6da94e29 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:37:48.397749Z\",\"start_time\":\"2022-01-19T10:37:48.392611Z\"}' execution_count=99}\n``` {.python .cell-code}\nX_coo = coo_matrix(X)  ## coordinate format\n```\n:::\n\n\n::: {#4798a6ac .cell execution_count=100}\n``` {.python .cell-code}\nprint(X_coo)\nX_coo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<COOrdinate sparse matrix of dtype 'int64'\n\twith 7 stored elements and shape (4, 4)>\n  Coords\tValues\n  (0, 0)\t1\n  (0, 1)\t1\n  (1, 1)\t1\n  (1, 3)\t1\n  (2, 0)\t1\n  (2, 2)\t1\n  (3, 0)\t2\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=100}\n```\n<COOrdinate sparse matrix of dtype 'int64'\n\twith 7 stored elements and shape (4, 4)>\n```\n:::\n:::\n\n\n::: {#92411621 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:38:09.049157Z\",\"start_time\":\"2022-01-19T10:38:09.044598Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=101}\n``` {.python .cell-code}\nX_coo.nnz    # number pf non-zero coordinates \n```\n\n::: {.cell-output .cell-output-display execution_count=101}\n```\n7\n```\n:::\n:::\n\n\n::: {#9c978c90 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:38:14.258127Z\",\"start_time\":\"2022-01-19T10:38:14.251407Z\"}' execution_count=102}\n``` {.python .cell-code}\nprint(X, end='\\n----\\n')\nprint(X_coo.data, end='\\n----\\n')\nprint(X_coo.row, end='\\n----\\n')\nprint(X_coo.col, end='\\n----\\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 1 0 0]\n [0 1 0 1]\n [1 0 1 0]\n [2 0 0 0]]\n----\n[1 1 1 1 1 1 2]\n----\n[0 0 1 1 2 2 3]\n----\n[0 1 1 3 0 2 0]\n----\n```\n:::\n:::\n\n\nThere is also\n\n- `csr_matrix`: sparse rows format \n- `csc_matrix`: sparse columns format\n\nSparse rows is often used for machine learning: sparse features vectors\n\nBut sparse column format useful as well (e.g. coordinate gradient descent)\n\n## Bored with decimals?\n\n::: {#554333e2 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:39:04.467972Z\",\"start_time\":\"2022-01-19T10:39:04.461304Z\"}' execution_count=103}\n``` {.python .cell-code}\nX = np.random.randn(5, 5)\nX\n```\n\n::: {.cell-output .cell-output-display execution_count=103}\n```\narray([[-0.44137257,  0.46133667,  0.46870985, -0.80996438,  1.81169182],\n       [-0.16750922,  1.00550537, -0.71931591,  0.69614907,  1.16394438],\n       [-0.56478591, -0.13405868, -0.20371971, -0.75331918,  1.24866098],\n       [ 1.37930894,  0.23669427, -0.50185993, -1.18236368,  1.36345643],\n       [-0.16817287,  0.41919942,  0.36313962, -1.1334185 , -0.03496181]])\n```\n:::\n:::\n\n\n::: {#854bdb15 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:39:09.241253Z\",\"start_time\":\"2022-01-19T10:39:09.235736Z\"}' execution_count=104}\n``` {.python .cell-code}\n# All number displayed by numpy (in the current kernel) are with 3 decimals max\nnp.set_printoptions(precision=3)\nprint(X)\nnp.set_printoptions(precision=8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[-0.441  0.461  0.469 -0.81   1.812]\n [-0.168  1.006 -0.719  0.696  1.164]\n [-0.565 -0.134 -0.204 -0.753  1.249]\n [ 1.379  0.237 -0.502 -1.182  1.363]\n [-0.168  0.419  0.363 -1.133 -0.035]]\n```\n:::\n:::\n\n\n## Not limited to 2D!\n\n`numpy` arrays can have any number of dimension (hence the name `ndarray`)\n\n::: {#46707abf .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:39:46.037716Z\",\"start_time\":\"2022-01-19T10:39:46.032228Z\"}' execution_count=105}\n``` {.python .cell-code}\nX = np.arange(18).reshape(3, 2, 3)\nX\n```\n\n::: {.cell-output .cell-output-display execution_count=105}\n```\narray([[[ 0,  1,  2],\n        [ 3,  4,  5]],\n\n       [[ 6,  7,  8],\n        [ 9, 10, 11]],\n\n       [[12, 13, 14],\n        [15, 16, 17]]])\n```\n:::\n:::\n\n\n::: {#84e7b414 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:39:46.370909Z\",\"start_time\":\"2022-01-19T10:39:46.366101Z\"}' execution_count=106}\n``` {.python .cell-code}\nX.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=106}\n```\n(3, 2, 3)\n```\n:::\n:::\n\n\n::: {#f9dfaa0a .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:39:51.793204Z\",\"start_time\":\"2022-01-19T10:39:51.787910Z\"}' execution_count=107}\n``` {.python .cell-code}\nX.ndim\n```\n\n::: {.cell-output .cell-output-display execution_count=107}\n```\n3\n```\n:::\n:::\n\n\nVisit <https://numpy.org/doc/stable/reference/arrays.ndarray.html#arrays-ndarray>\n\n# Aggregations and statistics\n\n::: {#54601212 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:40:09.476064Z\",\"start_time\":\"2022-01-19T10:40:09.470504Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=108}\n``` {.python .cell-code}\nA = np.arange(42).reshape(7, 6)\nA\n```\n\n::: {.cell-output .cell-output-display execution_count=108}\n```\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41]])\n```\n:::\n:::\n\n\n::: {#a50df5e4 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:40:15.486454Z\",\"start_time\":\"2022-01-19T10:40:15.480429Z\"}' execution_count=109}\n``` {.python .cell-code}\nA.sum(), 42 * 41 //2\n```\n\n::: {.cell-output .cell-output-display execution_count=109}\n```\n(np.int64(861), 861)\n```\n:::\n:::\n\n\n::: {#a8a19310 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:40:30.552043Z\",\"start_time\":\"2022-01-19T10:40:30.545833Z\"}' execution_count=110}\n``` {.python .cell-code}\nA[:, 3].mean(), np.mean (3 + np.arange(0, 42, 6))\n```\n\n::: {.cell-output .cell-output-display execution_count=110}\n```\n(np.float64(21.0), np.float64(21.0))\n```\n:::\n:::\n\n\n::: {#7207ca58 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:40:35.563769Z\",\"start_time\":\"2022-01-19T10:40:35.558458Z\"}' execution_count=111}\n``` {.python .cell-code}\nA.mean(axis=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=111}\n```\narray([18., 19., 20., 21., 22., 23.])\n```\n:::\n:::\n\n\n::: {#9445caa1 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:41:32.219284Z\",\"start_time\":\"2022-01-19T10:41:32.213546Z\"}' execution_count=112}\n``` {.python .cell-code}\nA.mean(axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=112}\n```\narray([ 2.5,  8.5, 14.5, 20.5, 26.5, 32.5, 38.5])\n```\n:::\n:::\n\n\n::: {#9e84d343 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:41:36.654691Z\",\"start_time\":\"2022-01-19T10:41:36.649712Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=113}\n``` {.python .cell-code}\nA[:,3].std(), A[:,3].var()\n```\n\n::: {.cell-output .cell-output-display execution_count=113}\n```\n(np.float64(12.0), np.float64(144.0))\n```\n:::\n:::\n\n\n::: {#4b5d5755 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:41:41.843358Z\",\"start_time\":\"2022-01-19T10:41:41.837835Z\"}' execution_count=114}\n``` {.python .cell-code}\nA[:,3].min(), A[:,3].max()\n```\n\n::: {.cell-output .cell-output-display execution_count=114}\n```\n(np.int64(3), np.int64(39))\n```\n:::\n:::\n\n\n::: {#44e0241e .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:42:19.023192Z\",\"start_time\":\"2022-01-19T10:42:19.017379Z\"}' execution_count=115}\n``` {.python .cell-code}\nA.cumsum(axis=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=115}\n```\narray([[  0,   1,   2,   3,   4,   5],\n       [  6,   8,  10,  12,  14,  16],\n       [ 18,  21,  24,  27,  30,  33],\n       [ 36,  40,  44,  48,  52,  56],\n       [ 60,  65,  70,  75,  80,  85],\n       [ 90,  96, 102, 108, 114, 120],\n       [126, 133, 140, 147, 154, 161]])\n```\n:::\n:::\n\n\n::: {#21d27d0f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:41:49.658126Z\",\"start_time\":\"2022-01-19T10:41:49.652337Z\"}' execution_count=116}\n``` {.python .cell-code}\nA\n```\n\n::: {.cell-output .cell-output-display execution_count=116}\n```\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41]])\n```\n:::\n:::\n\n\n::: {#2bac5f68 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:42:28.725423Z\",\"start_time\":\"2022-01-19T10:42:28.720388Z\"}' execution_count=117}\n``` {.python .cell-code}\n# sum of diagonal\nA.trace()\n```\n\n::: {.cell-output .cell-output-display execution_count=117}\n```\nnp.int64(105)\n```\n:::\n:::\n\n\n# Linear Algebra\n\n::: {#a8f65c1c .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:28.663538Z\",\"start_time\":\"2022-01-19T10:43:28.659546Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=118}\n``` {.python .cell-code}\nA = np.arange(30).reshape(6, 5)\nv1 = np.arange(0, 5)\nv2 = np.arange(5, 10)\n```\n:::\n\n\n::: {#cb06654f .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:28.871370Z\",\"start_time\":\"2022-01-19T10:43:28.866058Z\"}' execution_count=119}\n``` {.python .cell-code}\nA\n```\n\n::: {.cell-output .cell-output-display execution_count=119}\n```\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14],\n       [15, 16, 17, 18, 19],\n       [20, 21, 22, 23, 24],\n       [25, 26, 27, 28, 29]])\n```\n:::\n:::\n\n\n::: {#1842bd36 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:29.041390Z\",\"start_time\":\"2022-01-19T10:43:29.035397Z\"}' execution_count=120}\n``` {.python .cell-code}\nv1, v2\n```\n\n::: {.cell-output .cell-output-display execution_count=120}\n```\n(array([0, 1, 2, 3, 4]), array([5, 6, 7, 8, 9]))\n```\n:::\n:::\n\n\n::: {#5c4934dd .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:30.302802Z\",\"start_time\":\"2022-01-19T10:43:30.297408Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=121}\n``` {.python .cell-code}\nv1 * v2\n```\n\n::: {.cell-output .cell-output-display execution_count=121}\n```\narray([ 0,  6, 14, 24, 36])\n```\n:::\n:::\n\n\n::: {#9442f586 .cell execution_count=122}\n``` {.python .cell-code}\nv1.dot(v2), np.sum(v1* v2)\n```\n\n::: {.cell-output .cell-output-display execution_count=122}\n```\n(np.int64(80), np.int64(80))\n```\n:::\n:::\n\n\n::: {#47caeb1f .cell execution_count=123}\n``` {.python .cell-code}\nv1.reshape(5,1) @ v2.reshape(1,5)\n```\n\n::: {.cell-output .cell-output-display execution_count=123}\n```\narray([[ 0,  0,  0,  0,  0],\n       [ 5,  6,  7,  8,  9],\n       [10, 12, 14, 16, 18],\n       [15, 18, 21, 24, 27],\n       [20, 24, 28, 32, 36]])\n```\n:::\n:::\n\n\n## Inner products\n\n::: {#335090af .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:39.940939Z\",\"start_time\":\"2022-01-19T10:43:39.935975Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=124}\n``` {.python .cell-code}\n# Inner product between vectors\nprint(v1.dot(v2))\n\n# You can use also (but first solution is better)\nprint(np.dot(v1, v2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n80\n80\n```\n:::\n:::\n\n\n::: {#eeb8f8fd .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:41.034492Z\",\"start_time\":\"2022-01-19T10:43:41.028651Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=125}\n``` {.python .cell-code}\nA, v1\n```\n\n::: {.cell-output .cell-output-display execution_count=125}\n```\n(array([[ 0,  1,  2,  3,  4],\n        [ 5,  6,  7,  8,  9],\n        [10, 11, 12, 13, 14],\n        [15, 16, 17, 18, 19],\n        [20, 21, 22, 23, 24],\n        [25, 26, 27, 28, 29]]),\n array([0, 1, 2, 3, 4]))\n```\n:::\n:::\n\n\n::: {#f83e16ec .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:45.633853Z\",\"start_time\":\"2022-01-19T10:43:45.628678Z\"}' execution_count=126}\n``` {.python .cell-code}\nA.shape, v1.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=126}\n```\n((6, 5), (5,))\n```\n:::\n:::\n\n\n::: {#57baeb6d .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:43:55.770813Z\",\"start_time\":\"2022-01-19T10:43:55.766693Z\"}' execution_count=127}\n``` {.python .cell-code}\n# Matrix-vector inner product\nA.dot(v1)\n```\n\n::: {.cell-output .cell-output-display execution_count=127}\n```\narray([ 30,  80, 130, 180, 230, 280])\n```\n:::\n:::\n\n\n::: {#66abd58a .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:44:01.146695Z\",\"start_time\":\"2022-01-19T10:44:01.138719Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=128}\n``` {.python .cell-code}\n# Transpose\nA.T\n```\n\n::: {.cell-output .cell-output-display execution_count=128}\n```\narray([[ 0,  5, 10, 15, 20, 25],\n       [ 1,  6, 11, 16, 21, 26],\n       [ 2,  7, 12, 17, 22, 27],\n       [ 3,  8, 13, 18, 23, 28],\n       [ 4,  9, 14, 19, 24, 29]])\n```\n:::\n:::\n\n\n::: {#d780f86c .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:44:05.408599Z\",\"start_time\":\"2022-01-19T10:44:05.403379Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=129}\n``` {.python .cell-code}\nprint(v1)\n# Inline operations (same for *=, /=, -=)\nv1 += 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0 1 2 3 4]\n```\n:::\n:::\n\n\n## Linear systems\n\n::: {#296fab38 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:44:47.947222Z\",\"start_time\":\"2022-01-19T10:44:47.942465Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=130}\n``` {.python .cell-code}\nA = np.array([[42,2,3], [4,5,6], [7,8,9]])\nb = np.array([1,2,3])\nprint(A, b, sep=2 * '\\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[42  2  3]\n [ 4  5  6]\n [ 7  8  9]]\n\n[1 2 3]\n```\n:::\n:::\n\n\n::: {#028de088 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:44:48.103750Z\",\"start_time\":\"2022-01-19T10:44:48.096615Z\"}' execution_count=131}\n``` {.python .cell-code}\n# solve a system of linear equations\nx = np.linalg.solve(A, b)\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=131}\n```\narray([2.18366847e-18, 2.31698718e-16, 3.33333333e-01])\n```\n:::\n:::\n\n\n::: {#22781ea8 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:44:49.896958Z\",\"start_time\":\"2022-01-19T10:44:49.890609Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=132}\n``` {.python .cell-code}\nA.dot(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=132}\n```\narray([1., 2., 3.])\n```\n:::\n:::\n\n\n## Eigenvalues and eigenvectors\n\n::: {#96560d54 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:45:14.757150Z\",\"start_time\":\"2022-01-19T10:45:14.750149Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=133}\n``` {.python .cell-code}\nA = np.random.rand(3,3)\nB = np.random.rand(3,3)\n\nevals, evecs = np.linalg.eig(A)\nevals\n```\n\n::: {.cell-output .cell-output-display execution_count=133}\n```\narray([ 1.75855817+0.j        , -0.10722541+0.15741092j,\n       -0.10722541-0.15741092j])\n```\n:::\n:::\n\n\n::: {#8abb59eb .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:45:16.164688Z\",\"start_time\":\"2022-01-19T10:45:16.159112Z\"}' execution_count=134}\n``` {.python .cell-code}\nevecs\n```\n\n::: {.cell-output .cell-output-display execution_count=134}\n```\narray([[ 0.60741581+0.j        , -0.06665789+0.39026991j,\n        -0.06665789-0.39026991j],\n       [ 0.29358129+0.j        , -0.72826341+0.j        ,\n        -0.72826341-0.j        ],\n       [ 0.73814366+0.j        ,  0.50688368-0.23653216j,\n         0.50688368+0.23653216j]])\n```\n:::\n:::\n\n\n## Singular value decomposition (SVD)\n\nDecomposes any matrix $A \\in \\mathbb R^{m \\times n}$ as follows:\n$$\nA = U \\times S \\times V^\\top\n$$\nwhere \n- $U$ and $V$ are orthonormal matrices (meaning that $U^\\top \\times U = I$ and $V^\\top \\times V = I$)\n- $S$ is a diagonal matrix that contains the *singular* values in non-increasing order\n\n::: {#7796e0fe .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:47:54.504658Z\",\"start_time\":\"2022-01-19T10:47:54.500097Z\"}' execution_count=135}\n``` {.python .cell-code}\nprint(A)\nU, S, V = np.linalg.svd(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[0.39227333 0.64313803 0.8685162 ]\n [0.04260169 0.27512767 0.55494685]\n [0.80078049 0.56041242 0.87670635]]\n```\n:::\n:::\n\n\n::: {#85afb45c .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:48:52.598626Z\",\"start_time\":\"2022-01-19T10:48:52.592465Z\"}' execution_count=136}\n``` {.python .cell-code}\nU.dot(np.diag(S)).dot(V)\n```\n\n::: {.cell-output .cell-output-display execution_count=136}\n```\narray([[0.39227333, 0.64313803, 0.8685162 ],\n       [0.04260169, 0.27512767, 0.55494685],\n       [0.80078049, 0.56041242, 0.87670635]])\n```\n:::\n:::\n\n\n::: {#fb7374b1 .cell execution_count=137}\n``` {.python .cell-code}\nA - U @ np.diag(S) @ V\n```\n\n::: {.cell-output .cell-output-display execution_count=137}\n```\narray([[ 3.33066907e-16,  4.44089210e-16,  7.77156117e-16],\n       [-1.38777878e-17, -5.55111512e-17,  2.22044605e-16],\n       [ 2.22044605e-16,  3.33066907e-16,  6.66133815e-16]])\n```\n:::\n:::\n\n\n::: {#44679374 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:49:07.814713Z\",\"start_time\":\"2022-01-19T10:49:07.809269Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=138}\n``` {.python .cell-code}\n# U and V are indeed orthonormal\nnp.set_printoptions(precision=2)\nprint(U.T.dot(U), V.T.dot(V), sep=2 * '\\n')\nnp.set_printoptions(precision=8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 1.00e+00  6.27e-17 -2.59e-16]\n [ 6.27e-17  1.00e+00 -2.57e-17]\n [-2.59e-16 -2.57e-17  1.00e+00]]\n\n[[1.00e+00 1.00e-16 1.03e-16]\n [1.00e-16 1.00e+00 8.87e-17]\n [1.03e-16 8.87e-17 1.00e+00]]\n```\n:::\n:::\n\n\n## Exercice: the racoon SVD\n\n- Load the racoon face picture using `scipy.misc.face()`\n- Visualize the picture\n- Write a function which reshapes the picture into a 2D array, and computes the best rank-r approximation of it (the prototype of the function is `compute_approx(X, r)`\n- Display the different approximations for r between 5 and 100\n\n::: {#1783e639 .cell execution_count=139}\n``` {.python .cell-code}\n!pip3 install pooch\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRequirement already satisfied: pooch in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (1.8.2)\r\nRequirement already satisfied: platformdirs>=2.5.0 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from pooch) (4.3.6)\r\nRequirement already satisfied: packaging>=20.0 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from pooch) (24.2)\r\nRequirement already satisfied: requests>=2.19.0 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from pooch) (2.32.3)\r\nRequirement already satisfied: charset-normalizer<4,>=2 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from requests>=2.19.0->pooch) (3.4.1)\r\nRequirement already satisfied: idna<4,>=2.5 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from requests>=2.19.0->pooch) (3.10)\r\nRequirement already satisfied: urllib3<3,>=1.21.1 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from requests>=2.19.0->pooch) (2.3.0)\r\nRequirement already satisfied: certifi>=2017.4.17 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from requests>=2.19.0->pooch) (2024.12.14)\r\n\r\n[notice] A new release of pip is available: 25.0 -> 25.0.1\r\n[notice] To update, run: pip install --upgrade pip\r\n```\n:::\n:::\n\n\n::: {#424df92c .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:49:33.476362Z\",\"start_time\":\"2022-01-19T10:49:33.198685Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=140}\n``` {.python .cell-code}\nimport numpy as np\nfrom scipy.datasets import face\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nX = face()\n```\n:::\n\n\n::: {#8fee491f .cell execution_count=141}\n``` {.python .cell-code}\ntype(X)\n```\n\n::: {.cell-output .cell-output-display execution_count=141}\n```\nnumpy.ndarray\n```\n:::\n:::\n\n\n::: {#629cbc21 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:49:33.476362Z\",\"start_time\":\"2022-01-19T10:49:33.198685Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=142}\n``` {.python .cell-code}\nplt.imshow(X)\n_ = plt.axis('off')\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-143-output-1.png){width=512 height=389}\n:::\n:::\n\n\n::: {#2ffd21b1 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:53:29.332090Z\",\"start_time\":\"2022-01-19T10:53:28.069519Z\"}' execution_count=143}\n``` {.python .cell-code}\nn_rows, n_cols, n_channels = X.shape\nX_reshaped = X.reshape(n_rows, n_cols * n_channels)\nU, S, V = np.linalg.svd(X_reshaped, full_matrices=False)\n```\n:::\n\n\n::: {#f9a625d9 .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:54:28.825206Z\",\"start_time\":\"2022-01-19T10:54:28.819913Z\"}' execution_count=144}\n``` {.python .cell-code}\nX_reshaped.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=144}\n```\n(768, 3072)\n```\n:::\n:::\n\n\n::: {#11abcb3b .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:53:58.531955Z\",\"start_time\":\"2022-01-19T10:53:58.526383Z\"}' execution_count=145}\n``` {.python .cell-code}\nX.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=145}\n```\n(768, 1024, 3)\n```\n:::\n:::\n\n\n::: {#fc213d1a .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:53:43.697818Z\",\"start_time\":\"2022-01-19T10:53:43.259439Z\"}' execution_count=146}\n``` {.python .cell-code}\nplt.plot(S**2)  ## a kind of screeplot\nplt.yscale(\"log\")\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-147-output-1.png){width=588 height=411}\n:::\n:::\n\n\n::: {#c9654c4c .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:56:57.594009Z\",\"start_time\":\"2022-01-19T10:56:57.588737Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=147}\n``` {.python .cell-code}\ndef compute_approx(X: np.ndarray, r: int):\n    \"\"\"Computes the best rank-r approximation of X using SVD.\n    We expect X to the 3D array corresponding to a color image, that we \n    reduce to a 2D one to apply SVD (no broadcasting).\n    \n    Parameters\n    ----------\n    X : `np.ndarray`, shape=(n_rows, n_cols, 3)\n        The input 3D ndarray\n    \n    r : `int`\n        The desired rank\n        \n    Return\n    ------\n    output : `np.ndarray`, shape=(n_rows, n_cols, 3)\n        The best rank-r approximation of X\n    \"\"\"\n    n_rows, n_cols, n_channels = X.shape\n    # Reshape X to a 2D array\n    X_reshape = X.reshape(n_rows, n_cols * n_channels)\n    # Compute SVD\n    U, S, V = np.linalg.svd(X_reshape, full_matrices=False)\n    # Keep only the top r first singular values\n    S[r:] = 0\n    # Compute the approximation\n    X_reshape_r = U.dot(np.diag(S)).dot(V)\n    # Put it between 0 and 255 again and cast to integer type\n    return X_reshape_r.clip(min=0, max=255).astype('int')\\\n        .reshape(n_rows, n_cols, n_channels)\n```\n:::\n\n\n::: {#68e3cd2b .cell ExecuteTime='{\"end_time\":\"2022-01-19T10:57:57.381214Z\",\"start_time\":\"2022-01-19T10:57:52.533636Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=148}\n``` {.python .cell-code}\nranks = [100, 70, 50, 30, 10, 5]\nn_ranks = len(ranks)\nfor i, r in enumerate(ranks):\n    X_r = compute_approx(X, r)\n    # plt.subplot(n_ranks, 1, i + 1)\n    plt.figure(figsize=(5, 5))\n    plt.imshow(X_r)\n    _ = plt.axis('off')\n    # plt.title(f'Rank {r} approximation of the racoon' % r, fontsize=16)\n    plt.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-149-output-1.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-149-output-2.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-149-output-3.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-149-output-4.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-149-output-5.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-149-output-6.png){width=470 height=358}\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Variations\n\nIn the code above, we recompute the SVD of `X` for every element in list `rank`.    \nIn the next chunk, we compute the SVD once, and define a *generator* to generate the low rank approximations of matrix `X`. We take advantage of the fact that the SVD defines \nan orthonormal basis for the space of matrices. In this adapted orthonormal basis \nthe optimal  low rank approximations of $X$ have  a sparse expansion.\n\n:::\n\n::: {#acfe9a41 .cell execution_count=149}\n``` {.python .cell-code}\ndef gen_rank_k_approx(X):\n    \"\"\"Generator for low rank \n    approximation of a matrix X using truncated SVD.\n\n    Args:\n        X (numpy.ndarray): a numerical matrix\n\n    Yields:\n        (int,numpy.ndarray): rank k and best rank-k approximation of X using truncated SVD(according to Eckart-Young theorem).\n    \"\"\"  \n    U, S, V = np.linalg.svd(X, full_matrices=False)\n    r = 0\n    Y = np.zeros_like(X, dtype='float64')\n    while (r<len(S)):\n      Y = Y + S[r] * (U[:,r,np.newaxis] @ V[r,:, np.newaxis].T)\n      r += 1\n      yield r, Y\n```\n:::\n\n\n::: {#2c58a3f4 .cell execution_count=150}\n``` {.python .cell-code}\ng = gen_rank_k_approx(X_reshaped) \n```\n:::\n\n\n::: {#4f45d914 .cell execution_count=151}\n``` {.python .cell-code}\nfor i in range(100):\n    _, Xr = next(g)\n    if i % 10 ==0:  \n      plt.figure(figsize=(5, 5))\n      plt.imshow(\n          Xr\n          .clip(min=0, max=255)\n          .astype('int')\n          .reshape(n_rows, n_cols, n_channels)\n      )\n      _ = plt.axis('off')\n      plt.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-152-output-1.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-152-output-2.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-152-output-3.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-152-output-4.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-152-output-5.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-152-output-6.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-152-output-7.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-152-output-8.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-152-output-9.png){width=470 height=358}\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook02_numpy_files/figure-html/cell-152-output-10.png){width=470 height=358}\n:::\n:::\n\n\nVisit <https://numpy.org/numpy-tutorials/content/tutorial-svd.html>\n\n",
    "supporting": [
      "notebook02_numpy_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}