{
  "hash": "5b1292cdbd363e64816be1fda4cf11d5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Diving deeer\njupyter: python3\n---\n\n::: {#19f71772 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport sys\n\nos.environ['PYSPARK_PYTHON'] = sys.executable\nos.environ['PYSPARK_DRIVER_PYTHON'] = sys.executable\n```\n:::\n\n\n::: {#fac24242 .cell execution_count=2}\n``` {.python .cell-code}\nfrom pyspark import SparkConf, SparkContext\nfrom pyspark.sql import SparkSession\n\nconf = SparkConf().setAppName(\"Spark SQL Course\")\nsc = SparkContext(conf=conf)  # no need for Spark 3...\n\nspark = (SparkSession\n    .builder\n    .appName(\"Spark SQL Course\")\n    .getOrCreate()\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/01/14 22:39:11 WARN Utils: Your hostname, boucheron-Precision-5480 resolves to a loopback address: 127.0.1.1; using 192.168.10.120 instead (on interface wlp0s20f3)\n25/01/14 22:39:11 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n25/01/14 22:39:12 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n```\n:::\n:::\n\n\n::: {#e9662275 .cell execution_count=3}\n``` {.python .cell-code}\nsc = spark._sc\n```\n:::\n\n\n::: {#47654b49 .cell execution_count=4}\n``` {.python .cell-code}\nrdd = sc.parallelize([(\"a\", 1), (\"b\", 1), (\"a\", 1)])\n```\n:::\n\n\n::: {#abc99799 .cell execution_count=5}\n``` {.python .cell-code}\nrdd.reduceByKey(lambda a, b: a + b).collect()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[Stage 0:>                                                        (0 + 20) / 20]\r\r[Stage 0:================================================>        (17 + 3) / 20]\r\r                                                                                \r\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n[('b', 1), ('a', 2)]\n```\n:::\n:::\n\n\n::: {#2279a5c1 .cell execution_count=6}\n``` {.python .cell-code}\nimport requests, zipfile, io\nfrom pathlib import Path\n\npath = Path('webdata.parquet')\nif not path.exists():\n    url = \"https://stephanegaiffas.github.io/big_data_course/data/webdata.parquet.zip\"\n    r = requests.get(url)\n    z = zipfile.ZipFile(io.BytesIO(r.content))\n    z.extractall(path='./')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">BadZipFile</span>                                Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 8</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> url <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">https://stephanegaiffas.github.io/big_data_course/data/webdata.parquet.zip</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> r <span style=\"color:rgb(98,98,98)\">=</span> requests<span style=\"color:rgb(98,98,98)\">.</span>get(url)\n<span class=\"ansi-green-fg\">----&gt; 8</span> z <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">zipfile</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">ZipFile</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">io</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">BytesIO</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">r</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">content</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      9</span> z<span style=\"color:rgb(98,98,98)\">.</span>extractall(path<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">./</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.12/zipfile/__init__.py:1349</span>, in <span class=\"ansi-cyan-fg\">ZipFile.__init__</span><span class=\"ansi-blue-fg\">(self, file, mode, compression, allowZip64, compresslevel, strict_timestamps, metadata_encoding)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1347</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1348</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> mode <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">r</span><span style=\"color:rgb(175,0,0)\">'</span>:\n<span class=\"ansi-green-fg\">-&gt; 1349</span>         <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_RealGetContents</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1350</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> mode <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> (<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">w</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">x</span><span style=\"color:rgb(175,0,0)\">'</span>):\n<span class=\"ansi-green-fg ansi-bold\">   1351</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># set the modified flag so central directory gets written</span>\n<span class=\"ansi-green-fg ansi-bold\">   1352</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># even if no files are added to the archive</span>\n<span class=\"ansi-green-fg ansi-bold\">   1353</span>         <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_didModify <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.12/zipfile/__init__.py:1416</span>, in <span class=\"ansi-cyan-fg\">ZipFile._RealGetContents</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1414</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> BadZipFile(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">File is not a zip file</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">   1415</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> endrec:\n<span class=\"ansi-green-fg\">-&gt; 1416</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> BadZipFile(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">File is not a zip file</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">   1417</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>debug <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">1</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1418</span>     <span style=\"color:rgb(0,135,0)\">print</span>(endrec)\n\n<span class=\"ansi-red-fg\">BadZipFile</span>: File is not a zip file</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#422df301 .cell execution_count=7}\n``` {.python .cell-code}\ninput_path = './'\n\ninput_file = os.path.join(input_path, 'webdata.parquet')\ndf = spark.read.parquet(input_file)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AnalysisException</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> input_path <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">./</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> input_file <span style=\"color:rgb(98,98,98)\">=</span> os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>join(input_path, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">webdata.parquet</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg\">----&gt; 4</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">parquet</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">input_file</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/sql/readwriter.py:544</span>, in <span class=\"ansi-cyan-fg\">DataFrameReader.parquet</span><span class=\"ansi-blue-fg\">(self, *paths, **options)</span>\n<span class=\"ansi-green-fg ansi-bold\">    533</span> int96RebaseMode <span style=\"color:rgb(98,98,98)\">=</span> options<span style=\"color:rgb(98,98,98)\">.</span>get(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">int96RebaseMode</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>)\n<span class=\"ansi-green-fg ansi-bold\">    534</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_set_opts(\n<span class=\"ansi-green-fg ansi-bold\">    535</span>     mergeSchema<span style=\"color:rgb(98,98,98)\">=</span>mergeSchema,\n<span class=\"ansi-green-fg ansi-bold\">    536</span>     pathGlobFilter<span style=\"color:rgb(98,98,98)\">=</span>pathGlobFilter,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    541</span>     int96RebaseMode<span style=\"color:rgb(98,98,98)\">=</span>int96RebaseMode,\n<span class=\"ansi-green-fg ansi-bold\">    542</span> )\n<span class=\"ansi-green-fg\">--&gt; 544</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_df(<span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jreader</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">parquet</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">_to_seq</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_sc</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">paths</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>)\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/py4j/java_gateway.py:1322</span>, in <span class=\"ansi-cyan-fg\">JavaMember.__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1316</span> command <span style=\"color:rgb(98,98,98)\">=</span> proto<span style=\"color:rgb(98,98,98)\">.</span>CALL_COMMAND_NAME <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1317</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>command_header <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1318</span>     args_command <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1319</span>     proto<span style=\"color:rgb(98,98,98)\">.</span>END_COMMAND_PART\n<span class=\"ansi-green-fg ansi-bold\">   1321</span> answer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>gateway_client<span style=\"color:rgb(98,98,98)\">.</span>send_command(command)\n<span class=\"ansi-green-fg\">-&gt; 1322</span> return_value <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_return_value</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">   1323</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">answer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">gateway_client</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">target_id</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">name</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1325</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> temp_arg <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> temp_args:\n<span class=\"ansi-green-fg ansi-bold\">   1326</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">hasattr</span>(temp_arg, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_detach</span><span style=\"color:rgb(175,0,0)\">\"</span>):\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/errors/exceptions/captured.py:185</span>, in <span class=\"ansi-cyan-fg\">capture_sql_exception.&lt;locals&gt;.deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-fg ansi-bold\">    181</span> converted <span style=\"color:rgb(98,98,98)\">=</span> convert_exception(e<span style=\"color:rgb(98,98,98)\">.</span>java_exception)\n<span class=\"ansi-green-fg ansi-bold\">    182</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(converted, UnknownException):\n<span class=\"ansi-green-fg ansi-bold\">    183</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Hide where the exception came from that shows a non-Pythonic</span>\n<span class=\"ansi-green-fg ansi-bold\">    184</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># JVM exception message.</span>\n<span class=\"ansi-green-fg\">--&gt; 185</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> converted <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">    186</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">    187</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span>\n\n<span class=\"ansi-red-fg\">AnalysisException</span>: [PATH_NOT_FOUND] Path does not exist: file:/home/boucheron/Documents/IFEBY310/core/notebooks/webdata.parquet.</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#557fba07 .cell execution_count=8}\n``` {.python .cell-code}\ndf.head(6)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>head(<span style=\"color:rgb(98,98,98)\">6</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#75ec418b .cell execution_count=9}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>describe()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#680f94c6 .cell execution_count=10}\n``` {.python .cell-code}\ndf.count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n# Basic statistics\n\nFirst we need to import some things\n\n::: {#14ddb7b1 .cell execution_count=11}\n``` {.python .cell-code}\nfrom pyspark.sql import Window\nimport pyspark.sql.functions as func\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import col, lit\n```\n:::\n\n\n## Compute the total number of unique users\n\n::: {#5abe3117 .cell execution_count=12}\n``` {.python .cell-code}\ndf.select('xid').distinct().count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>distinct()<span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Construct a column containing the total number of actions per user\n\n::: {#04f4b0c9 .cell execution_count=13}\n``` {.python .cell-code}\nxid_partition = Window.partitionBy('xid')\nn_events = func.count(col('action')).over(xid_partition)\ndf = df.withColumn('n_events', n_events)\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> xid_partition <span style=\"color:rgb(98,98,98)\">=</span> Window<span style=\"color:rgb(98,98,98)\">.</span>partitionBy(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> n_events <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>count(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">action</span><span style=\"color:rgb(175,0,0)\">'</span>))<span style=\"color:rgb(98,98,98)\">.</span>over(xid_partition)\n<span class=\"ansi-green-fg\">----&gt; 3</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_events</span><span style=\"color:rgb(175,0,0)\">'</span>, n_events)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1b81e761 .cell execution_count=14}\n``` {.python .cell-code}\ndf.groupBy('xid').agg(func.count('action')).head(5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>groupBy(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>agg(func<span style=\"color:rgb(98,98,98)\">.</span>count(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">action</span><span style=\"color:rgb(175,0,0)\">'</span>))<span style=\"color:rgb(98,98,98)\">.</span>head(<span style=\"color:rgb(98,98,98)\">5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Construct a column containing the number of days since the last action of the user\n\n::: {#d3e5deec .cell execution_count=15}\n``` {.python .cell-code}\nxid_partition = Window.partitionBy('xid')\nmax_date = func.max(col('date')).over(xid_partition)\nn_days_since_last_event = func.datediff(func.current_date(), max_date)\ndf = df.withColumn('n_days_since_last_event',\n                   n_days_since_last_event)\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> max_date <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>max(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">date</span><span style=\"color:rgb(175,0,0)\">'</span>))<span style=\"color:rgb(98,98,98)\">.</span>over(xid_partition)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> n_days_since_last_event <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>datediff(func<span style=\"color:rgb(98,98,98)\">.</span>current_date(), max_date)\n<span class=\"ansi-green-fg\">----&gt; 4</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_days_since_last_event</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">      5</span>                    n_days_since_last_event)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Construct a column containing the number of actions of each user for each modality of device\n\n::: {#120dcf36 .cell execution_count=16}\n``` {.python .cell-code}\nxid_device_partition = Window.partitionBy('xid', 'device')\nn_events_per_device = func.count(col('action')).over(xid_device_partition)\ndf = df.withColumn('n_events_per_device', n_events_per_device)\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> xid_device_partition <span style=\"color:rgb(98,98,98)\">=</span> Window<span style=\"color:rgb(98,98,98)\">.</span>partitionBy(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">device</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> n_events_per_device <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>count(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">action</span><span style=\"color:rgb(175,0,0)\">'</span>))<span style=\"color:rgb(98,98,98)\">.</span>over(xid_device_partition)\n<span class=\"ansi-green-fg\">----&gt; 3</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_events_per_device</span><span style=\"color:rgb(175,0,0)\">'</span>, n_events_per_device)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Number of device per user: some mental gymnastics\n\n::: {#7e1b45f2 .cell execution_count=17}\n``` {.python .cell-code}\nxid_partition = Window.partitionBy('xid')\nrank_device = func.dense_rank().over(xid_partition.orderBy('device'))\nn_unique_device = func.last(rank_device).over(xid_partition)\ndf = df.withColumn('n_device', n_unique_device)\ndf.head(n=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> rank_device <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>dense_rank()<span style=\"color:rgb(98,98,98)\">.</span>over(xid_partition<span style=\"color:rgb(98,98,98)\">.</span>orderBy(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">device</span><span style=\"color:rgb(175,0,0)\">'</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> n_unique_device <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>last(rank_device)<span style=\"color:rgb(98,98,98)\">.</span>over(xid_partition)\n<span class=\"ansi-green-fg\">----&gt; 4</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_device</span><span style=\"color:rgb(175,0,0)\">'</span>, n_unique_device)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#89b87a27 .cell execution_count=18}\n``` {.python .cell-code}\ndf\\\n    .where(col('n_device') > 1)\\\n    .select('xid', 'device', 'n_events',  'n_device', 'n_events_per_device')\\\n    .head(n=8)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span>\\\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"color:rgb(98,98,98)\">.</span>where(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_device</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">1</span>)\\\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">device</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_events</span><span style=\"color:rgb(175,0,0)\">'</span>,  <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_device</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_events_per_device</span><span style=\"color:rgb(175,0,0)\">'</span>)\\\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">8</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n# Let's select the correct users and build a training dataset\n\nWe construct a ETL (Extract Transform Load) process on this data using the `pyspark.sql` API.\n\n## Extraction\n\nExtraction is easy here, it's just about reading the data\n\n::: {#a3460143 .cell execution_count=19}\n``` {.python .cell-code}\ndf = spark.read.parquet(input_file)\ndf.head(n=3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AnalysisException</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">parquet</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">input_file</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>)\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/sql/readwriter.py:544</span>, in <span class=\"ansi-cyan-fg\">DataFrameReader.parquet</span><span class=\"ansi-blue-fg\">(self, *paths, **options)</span>\n<span class=\"ansi-green-fg ansi-bold\">    533</span> int96RebaseMode <span style=\"color:rgb(98,98,98)\">=</span> options<span style=\"color:rgb(98,98,98)\">.</span>get(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">int96RebaseMode</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>)\n<span class=\"ansi-green-fg ansi-bold\">    534</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_set_opts(\n<span class=\"ansi-green-fg ansi-bold\">    535</span>     mergeSchema<span style=\"color:rgb(98,98,98)\">=</span>mergeSchema,\n<span class=\"ansi-green-fg ansi-bold\">    536</span>     pathGlobFilter<span style=\"color:rgb(98,98,98)\">=</span>pathGlobFilter,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    541</span>     int96RebaseMode<span style=\"color:rgb(98,98,98)\">=</span>int96RebaseMode,\n<span class=\"ansi-green-fg ansi-bold\">    542</span> )\n<span class=\"ansi-green-fg\">--&gt; 544</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_df(<span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jreader</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">parquet</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">_to_seq</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_sc</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">paths</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>)\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/py4j/java_gateway.py:1322</span>, in <span class=\"ansi-cyan-fg\">JavaMember.__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1316</span> command <span style=\"color:rgb(98,98,98)\">=</span> proto<span style=\"color:rgb(98,98,98)\">.</span>CALL_COMMAND_NAME <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1317</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>command_header <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1318</span>     args_command <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1319</span>     proto<span style=\"color:rgb(98,98,98)\">.</span>END_COMMAND_PART\n<span class=\"ansi-green-fg ansi-bold\">   1321</span> answer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>gateway_client<span style=\"color:rgb(98,98,98)\">.</span>send_command(command)\n<span class=\"ansi-green-fg\">-&gt; 1322</span> return_value <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_return_value</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">   1323</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">answer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">gateway_client</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">target_id</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">name</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1325</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> temp_arg <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> temp_args:\n<span class=\"ansi-green-fg ansi-bold\">   1326</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">hasattr</span>(temp_arg, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_detach</span><span style=\"color:rgb(175,0,0)\">\"</span>):\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/errors/exceptions/captured.py:185</span>, in <span class=\"ansi-cyan-fg\">capture_sql_exception.&lt;locals&gt;.deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-fg ansi-bold\">    181</span> converted <span style=\"color:rgb(98,98,98)\">=</span> convert_exception(e<span style=\"color:rgb(98,98,98)\">.</span>java_exception)\n<span class=\"ansi-green-fg ansi-bold\">    182</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(converted, UnknownException):\n<span class=\"ansi-green-fg ansi-bold\">    183</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Hide where the exception came from that shows a non-Pythonic</span>\n<span class=\"ansi-green-fg ansi-bold\">    184</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># JVM exception message.</span>\n<span class=\"ansi-green-fg\">--&gt; 185</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> converted <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">    186</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">    187</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span>\n\n<span class=\"ansi-red-fg\">AnalysisException</span>: [PATH_NOT_FOUND] Path does not exist: file:/home/boucheron/Documents/IFEBY310/core/notebooks/webdata.parquet.</pre>\n```\n:::\n\n:::\n:::\n\n\n## Transformation of the data\n\nAt this step we compute a lot of extra things from the data. The aim is to build features that describe users.\n\n::: {#3bf930fd .cell execution_count=20}\n``` {.python .cell-code}\ndef n_events_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    n_events = func.count(col('action')).over(xid_partition)\n    df = df.withColumn('n_events', n_events)\n    return df\n\ndef n_events_per_action_transformer(df):\n    xid_action_partition = Window.partitionBy('xid', 'action')\n    n_events_per_action = func.count(col('action')).over(xid_action_partition)\n    df = df.withColumn('n_events_per_action', n_events_per_action)\n    return df\n\ndef hour_transformer(df):\n    hour = func.hour(col('date'))\n    df = df.withColumn('hour', hour)\n    return df\n\ndef weekday_transformer(df):\n    weekday = func.date_format(col('date'), 'EEEE')\n    df = df.withColumn('weekday', weekday)\n    return df\n\ndef n_events_per_hour_transformer(df):\n    xid_hour_partition = Window.partitionBy('xid', 'hour')\n    n_events_per_hour = func.count(col('action')).over(xid_hour_partition)\n    df = df.withColumn('n_events_per_hour', n_events_per_hour)\n    return df\n\ndef n_events_per_weekday_transformer(df):\n    xid_weekday_partition = Window.partitionBy('xid', 'weekday')\n    n_events_per_weekday = func.count(col('action')).over(xid_weekday_partition)\n    df = df.withColumn('n_events_per_weekday', n_events_per_weekday)\n    return df\n\ndef n_days_since_last_event_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    max_date = func.max(col('date')).over(xid_partition)\n    n_days_since_last_event = func.datediff(func.current_date(), max_date)\n    df = df.withColumn('n_days_since_last_event',\n                       n_days_since_last_event + lit(0.1))\n    return df\n\ndef n_days_since_last_action_transformer(df):\n    xid_partition_action = Window.partitionBy('xid', 'action')\n    max_date = func.max(col('date')).over(xid_partition_action)\n    n_days_since_last_action = func.datediff(func.current_date(),\n                                                        max_date)\n    df = df.withColumn('n_days_since_last_action',\n                       n_days_since_last_action + lit(0.1))\n    return df\n\ndef n_unique_day_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    dayofyear = func.dayofyear(col('date'))\n    rank_day = func.dense_rank().over(xid_partition.orderBy(dayofyear))\n    n_unique_day = func.last(rank_day).over(xid_partition)\n    df = df.withColumn('n_unique_day', n_unique_day)\n    return df\n\ndef n_unique_hour_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_hour = func.dense_rank().over(xid_partition.orderBy('hour'))\n    n_unique_hour = func.last(rank_hour).over(xid_partition)\n    df = df.withColumn('n_unique_hour', n_unique_hour)\n    return df\n\ndef n_events_per_device_transformer(df):\n    xid_device_partition = Window.partitionBy('xid', 'device')\n    n_events_per_device = func.count(func.col('device')) \\\n        .over(xid_device_partition)\n    df = df.withColumn('n_events_per_device', n_events_per_device)\n    return df\n\ndef n_unique_device_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_device = func.dense_rank().over(xid_partition.orderBy('device'))\n    n_unique_device = func.last(rank_device).over(xid_partition)\n    df = df.withColumn('n_device', n_unique_device)\n    return df\n\ndef n_actions_per_category_id_transformer(df):\n    xid_category_id_partition = Window.partitionBy('xid', 'category_id',\n                                                   'action')\n    n_actions_per_category_id = func.count(func.col('action')) \\\n        .over(xid_category_id_partition)\n    df = df.withColumn('n_actions_per_category_id', n_actions_per_category_id)\n    return df\n\ndef n_unique_category_id_transformer(df):\n    xid_partition = Window.partitionBy('xid')\n    rank_category_id = func.dense_rank().over(xid_partition\\\n                                              .orderBy('category_id'))\n    n_unique_category_id = func.last(rank_category_id).over(xid_partition)\n    df = df.withColumn('n_unique_category_id', n_unique_category_id)\n    return df\n\ndef n_events_per_category_id_transformer(df):\n    xid_category_id_partition = Window.partitionBy('xid', 'category_id')\n    n_events_per_category_id = func.count(func.col('action')) \\\n        .over(xid_category_id_partition)\n    df = df.withColumn('n_events_per_category_id', n_events_per_category_id)\n    return df\n\ndef n_events_per_website_id_transformer(df):\n    xid_website_id_partition = Window.partitionBy('xid', 'website_id')\n    n_events_per_website_id = func.count(col('action'))\\\n        .over(xid_website_id_partition)\n    df = df.withColumn('n_events_per_website_id', n_events_per_website_id)\n    return df\n```\n:::\n\n\n::: {#d73c2cff .cell execution_count=21}\n``` {.python .cell-code}\ntransformers = [\n    hour_transformer,\n    weekday_transformer,\n    n_events_per_hour_transformer,\n    n_events_per_weekday_transformer,\n    n_days_since_last_event_transformer,\n    n_days_since_last_action_transformer,\n    n_unique_day_transformer,\n    n_unique_hour_transformer,\n    n_events_per_device_transformer,\n    n_unique_device_transformer,\n    n_actions_per_category_id_transformer,\n    n_events_per_category_id_transformer,\n    n_events_per_website_id_transformer,\n]\n\nfor transformer in transformers:\n    df = transformer(df)\n\ndf.head(n=1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 18</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> transformers <span style=\"color:rgb(98,98,98)\">=</span> [\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     hour_transformer,\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     weekday_transformer,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span>     n_events_per_website_id_transformer,\n<span class=\"ansi-green-fg ansi-bold\">     15</span> ]\n<span class=\"ansi-green-fg ansi-bold\">     17</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> transformer <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> transformers:\n<span class=\"ansi-green-fg\">---&gt; 18</span>     df <span style=\"color:rgb(98,98,98)\">=</span> transformer(<span class=\"ansi-yellow-bg\">df</span>)\n<span class=\"ansi-green-fg ansi-bold\">     20</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6ad2b443 .cell execution_count=22}\n``` {.python .cell-code}\nsorted(df.columns)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">sorted</span>(<span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>columns)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Load step\n\nHere, we use all the previous computations (saved in the columns of the dataframe) \nto compute aggregated informations about each user.\n\n::: {#6f100b19 .cell execution_count=23}\n``` {.python .cell-code}\ndef n_events_per_hour_loader(df):\n    csr = df\\\n        .select('xid', 'hour', 'n_events_per_hour')\\\n        .withColumnRenamed('n_events_per_hour', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_hour#'), col('hour'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('hour')\n    return csr\n\ndef n_events_per_website_id_loader(df):\n    csr = df.select('xid', 'website_id', 'n_events_per_website_id')\\\n        .withColumnRenamed('n_events_per_hour', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_website_id#'),\n                               col('website_id'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('website_id')\n    return csr\n\ndef n_events_per_hour_loader(df):\n    csr = df\\\n        .select('xid', 'hour', 'n_events_per_hour')\\\n        .withColumnRenamed('n_events_per_hour', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_hour#'), col('hour'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('hour')\n    return csr\n\ndef n_events_per_weekday_loader(df):\n    csr = df\\\n        .select('xid', 'weekday', 'n_events_per_weekday')\\\n        .withColumnRenamed('n_events_per_weekday', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_weekday#'), col('weekday'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('weekday')\n    return csr\n\ndef n_days_since_last_event_loader(df):\n    csr = df.select('xid',  'n_days_since_last_event')\\\n        .withColumnRenamed('n_days_since_last_event#', 'value')\\\n        .distinct()\n    feature_name = lit('n_days_since_last_event')\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\n    return csr\n\ndef n_days_since_last_action_loader(df):\n    csr = df.select('xid', 'action', 'n_days_since_last_action')\\\n        .withColumnRenamed('n_days_since_last_action', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_days_since_last_action#'), col('action'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('action')\n    return csr\n\ndef n_unique_day_loader(df):\n    csr = df.select('xid', 'n_unique_day')\\\n        .withColumnRenamed('n_unique_day', 'value')\\\n        .distinct()\n    feature_name = lit('n_unique_day')\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\n    return csr\n\ndef n_unique_hour_loader(df):\n    csr = df.select('xid', 'n_unique_hour')\\\n        .withColumnRenamed('n_unique_hour', 'value')\\\n        .distinct()\n    feature_name = lit('n_unique_hour')\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\n    return csr\n\ndef n_events_per_device_loader(df):\n    csr = df\\\n        .select('xid', 'device', 'n_events_per_device')\\\n        .withColumnRenamed('n_events_per_device', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_device#'), col('device'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('device')\n    return csr\n\ndef n_unique_device_loader(df):\n    csr = df.select('xid', 'n_device')\\\n        .withColumnRenamed('n_device', 'value')\\\n        .distinct()\n    feature_name = lit('n_device')\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\n    return csr\n\ndef n_events_per_category_id_loader(df):\n    csr = df.select('xid', 'category_id', 'n_events_per_category_id')\\\n        .withColumnRenamed('n_events_per_category_id', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_category_id#'),\n                               col('category_id'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('category_id')\n    return csr\n\ndef n_actions_per_category_id_loader(df):\n    csr = df.select('xid', 'category_id', 'action', 'n_actions_per_category_id')\\\n        .withColumnRenamed('n_actions_per_category_id', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_actions_per_category_id#'),\n                               col('action'), lit('#'), \n                               col('category_id'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('category_id')\\\n        .drop('action')\n    return csr\n\ndef n_events_per_website_id_loader(df):\n    csr = df.select('xid', 'website_id', 'n_events_per_website_id')\\\n        .withColumnRenamed('n_events_per_website_id', 'value')\\\n        .distinct()\n    feature_name = func.concat(lit('n_events_per_website_id#'),\n                               col('website_id'))\n    csr = csr\\\n        .withColumn('feature_name', feature_name)\\\n        .drop('website_id')\n    return csr\n```\n:::\n\n\n::: {#da5a4171 .cell execution_count=24}\n``` {.python .cell-code}\nfrom functools import reduce\n\nloaders = [\n    n_events_per_hour_loader,\n    n_events_per_website_id_loader,\n    n_events_per_hour_loader,\n    n_events_per_weekday_loader,\n    n_days_since_last_event_loader,\n    n_days_since_last_action_loader,\n    n_unique_day_loader,\n    n_unique_hour_loader,\n    n_events_per_device_loader,\n    n_unique_device_loader,\n    n_events_per_category_id_loader,\n    n_actions_per_category_id_loader,\n    n_events_per_website_id_loader,\n]\n\ndef union(df, other):\n    return df.union(other)\n\ncsr = reduce(\n    lambda df1, df2: df1.union(df2),\n    [loader(df) for loader in loaders]\n)\n\ncsr.head(n=3)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 24</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">union</span>(df, other):\n<span class=\"ansi-green-fg ansi-bold\">     20</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> df<span style=\"color:rgb(98,98,98)\">.</span>union(other)\n<span class=\"ansi-green-fg ansi-bold\">     22</span> csr <span style=\"color:rgb(98,98,98)\">=</span> reduce(\n<span class=\"ansi-green-fg ansi-bold\">     23</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">lambda</span> df1, df2: df1<span style=\"color:rgb(98,98,98)\">.</span>union(df2),\n<span class=\"ansi-green-fg\">---&gt; 24</span>     [loader(<span class=\"ansi-yellow-bg\">df</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> loader <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> loaders]\n<span class=\"ansi-green-fg ansi-bold\">     25</span> )\n<span class=\"ansi-green-fg ansi-bold\">     27</span> csr<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#00a782d6 .cell execution_count=25}\n``` {.python .cell-code}\ncsr.columns\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">csr</span><span style=\"color:rgb(98,98,98)\">.</span>columns\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'csr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e9dc8a09 .cell execution_count=26}\n``` {.python .cell-code}\ncsr.count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[26], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">csr</span><span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'csr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1dc6b4f0 .cell execution_count=27}\n``` {.python .cell-code}\n# Replace features names and xid by a unique number\nfeature_name_partition = Window().orderBy('feature_name')\nxid_partition = Window().orderBy('xid')\n\ncol_idx = func.dense_rank().over(feature_name_partition)\nrow_idx = func.dense_rank().over(xid_partition)\n\ncsr = csr.withColumn('col', col_idx)\\\n    .withColumn('row', row_idx)\n\ncsr = csr.na.drop('any')\n\ncsr.head(n=5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[27], line 8</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> col_idx <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>dense_rank()<span style=\"color:rgb(98,98,98)\">.</span>over(feature_name_partition)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> row_idx <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>dense_rank()<span style=\"color:rgb(98,98,98)\">.</span>over(xid_partition)\n<span class=\"ansi-green-fg\">----&gt; 8</span> csr <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">csr</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">col</span><span style=\"color:rgb(175,0,0)\">'</span>, col_idx)\\\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     <span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">row</span><span style=\"color:rgb(175,0,0)\">'</span>, row_idx)\n<span class=\"ansi-green-fg ansi-bold\">     11</span> csr <span style=\"color:rgb(98,98,98)\">=</span> csr<span style=\"color:rgb(98,98,98)\">.</span>na<span style=\"color:rgb(98,98,98)\">.</span>drop(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">any</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">     13</span> csr<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'csr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#bffdfc97 .cell execution_count=28}\n``` {.python .cell-code}\n# Let's save the result of our hard work into a new parquet file\noutput_path = './'\noutput_file = os.path.join(output_path, 'csr.parquet')\ncsr.write.parquet(output_file, mode='overwrite')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[28], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> output_path <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">./</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> output_file <span style=\"color:rgb(98,98,98)\">=</span> os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>join(output_path, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">csr.parquet</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg\">----&gt; 4</span> <span class=\"ansi-yellow-bg\">csr</span><span style=\"color:rgb(98,98,98)\">.</span>write<span style=\"color:rgb(98,98,98)\">.</span>parquet(output_file, mode<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">overwrite</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'csr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n# Preparation of the training dataset\n\n::: {#ca43f744 .cell execution_count=29}\n``` {.python .cell-code}\ncsr_path = './'\ncsr_file = os.path.join(csr_path, 'csr.parquet')\n\ndf = spark.read.parquet(csr_file)\ndf.head(n=5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AnalysisException</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[29], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> csr_path <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">./</span><span style=\"color:rgb(175,0,0)\">'</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> csr_file <span style=\"color:rgb(98,98,98)\">=</span> os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>join(csr_path, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">csr.parquet</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg\">----&gt; 4</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">parquet</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">csr_file</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>)\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/sql/readwriter.py:544</span>, in <span class=\"ansi-cyan-fg\">DataFrameReader.parquet</span><span class=\"ansi-blue-fg\">(self, *paths, **options)</span>\n<span class=\"ansi-green-fg ansi-bold\">    533</span> int96RebaseMode <span style=\"color:rgb(98,98,98)\">=</span> options<span style=\"color:rgb(98,98,98)\">.</span>get(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">int96RebaseMode</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>)\n<span class=\"ansi-green-fg ansi-bold\">    534</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_set_opts(\n<span class=\"ansi-green-fg ansi-bold\">    535</span>     mergeSchema<span style=\"color:rgb(98,98,98)\">=</span>mergeSchema,\n<span class=\"ansi-green-fg ansi-bold\">    536</span>     pathGlobFilter<span style=\"color:rgb(98,98,98)\">=</span>pathGlobFilter,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    541</span>     int96RebaseMode<span style=\"color:rgb(98,98,98)\">=</span>int96RebaseMode,\n<span class=\"ansi-green-fg ansi-bold\">    542</span> )\n<span class=\"ansi-green-fg\">--&gt; 544</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_df(<span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_jreader</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">parquet</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">_to_seq</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_spark</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_sc</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">paths</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>)\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/py4j/java_gateway.py:1322</span>, in <span class=\"ansi-cyan-fg\">JavaMember.__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1316</span> command <span style=\"color:rgb(98,98,98)\">=</span> proto<span style=\"color:rgb(98,98,98)\">.</span>CALL_COMMAND_NAME <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1317</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>command_header <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1318</span>     args_command <span style=\"color:rgb(98,98,98)\">+</span>\\\n<span class=\"ansi-green-fg ansi-bold\">   1319</span>     proto<span style=\"color:rgb(98,98,98)\">.</span>END_COMMAND_PART\n<span class=\"ansi-green-fg ansi-bold\">   1321</span> answer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>gateway_client<span style=\"color:rgb(98,98,98)\">.</span>send_command(command)\n<span class=\"ansi-green-fg\">-&gt; 1322</span> return_value <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">get_return_value</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">   1323</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">answer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">gateway_client</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">target_id</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">name</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1325</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> temp_arg <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> temp_args:\n<span class=\"ansi-green-fg ansi-bold\">   1326</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">hasattr</span>(temp_arg, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">_detach</span><span style=\"color:rgb(175,0,0)\">\"</span>):\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/errors/exceptions/captured.py:185</span>, in <span class=\"ansi-cyan-fg\">capture_sql_exception.&lt;locals&gt;.deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-fg ansi-bold\">    181</span> converted <span style=\"color:rgb(98,98,98)\">=</span> convert_exception(e<span style=\"color:rgb(98,98,98)\">.</span>java_exception)\n<span class=\"ansi-green-fg ansi-bold\">    182</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(converted, UnknownException):\n<span class=\"ansi-green-fg ansi-bold\">    183</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Hide where the exception came from that shows a non-Pythonic</span>\n<span class=\"ansi-green-fg ansi-bold\">    184</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># JVM exception message.</span>\n<span class=\"ansi-green-fg\">--&gt; 185</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> converted <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">    186</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">    187</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span>\n\n<span class=\"ansi-red-fg\">AnalysisException</span>: [PATH_NOT_FOUND] Path does not exist: file:/home/boucheron/Documents/IFEBY310/core/notebooks/csr.parquet.</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7ddceaf8 .cell execution_count=30}\n``` {.python .cell-code}\ndf.count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[30], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ddfe66a5 .cell execution_count=31}\n``` {.python .cell-code}\n# What are the features related to campaign_id 1204 ?\nfeatures_names = \\\n    df.select('feature_name')\\\n    .distinct()\\\n    .toPandas()['feature_name']\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[31], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># What are the features related to campaign_id 1204 ?</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> features_names <span style=\"color:rgb(98,98,98)\">=</span> \\\n<span class=\"ansi-green-fg\">----&gt; 3</span>     <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">feature_name</span><span style=\"color:rgb(175,0,0)\">'</span>)\\\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>distinct()\\\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(98,98,98)\">.</span>toPandas()[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">feature_name</span><span style=\"color:rgb(175,0,0)\">'</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5279c65d .cell execution_count=32}\n``` {.python .cell-code}\nfeatures_names\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[32], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">features_names</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'features_names' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#28a634f8 .cell execution_count=33}\n``` {.python .cell-code}\n[feature_name for feature_name in features_names if '1204' in feature_name]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[33], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> [feature_name <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> feature_name <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">features_names</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">1204</span><span style=\"color:rgb(175,0,0)\">'</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> feature_name]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'features_names' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6a41d741 .cell execution_count=34}\n``` {.python .cell-code}\n# Look for the xid that have at least one exposure to campaign 1204\nkeep = func.when(\n    (col('feature_name') == 'n_actions_per_category_id#C#1204.0') |\n    (col('feature_name') == 'n_actions_per_category_id#O#1204.0'),\n    1).otherwise(0)\ndf = df.withColumn('keep', keep)\n\ndf.where(col('keep') > 0).count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[34], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Look for the xid that have at least one exposure to campaign 1204</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> keep <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>when(\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     (col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">feature_name</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_actions_per_category_id#C#1204.0</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"color:rgb(98,98,98)\">|</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     (col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">feature_name</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_actions_per_category_id#O#1204.0</span><span style=\"color:rgb(175,0,0)\">'</span>),\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(98,98,98)\">1</span>)<span style=\"color:rgb(98,98,98)\">.</span>otherwise(<span style=\"color:rgb(98,98,98)\">0</span>)\n<span class=\"ansi-green-fg\">----&gt; 6</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">keep</span><span style=\"color:rgb(175,0,0)\">'</span>, keep)\n<span class=\"ansi-green-fg ansi-bold\">      8</span> df<span style=\"color:rgb(98,98,98)\">.</span>where(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">keep</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">0</span>)<span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d7850e61 .cell execution_count=35}\n``` {.python .cell-code}\n# Sum of the keeps :)\nxid_partition = Window.partitionBy('xid')\nsum_keep = func.sum(col('keep')).over(xid_partition)\ndf = df.withColumn('sum_keep', sum_keep)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[35], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> xid_partition <span style=\"color:rgb(98,98,98)\">=</span> Window<span style=\"color:rgb(98,98,98)\">.</span>partitionBy(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> sum_keep <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>sum(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">keep</span><span style=\"color:rgb(175,0,0)\">'</span>))<span style=\"color:rgb(98,98,98)\">.</span>over(xid_partition)\n<span class=\"ansi-green-fg\">----&gt; 4</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sum_keep</span><span style=\"color:rgb(175,0,0)\">'</span>, sum_keep)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#512e222f .cell execution_count=36}\n``` {.python .cell-code}\n# Let's keep the xid exposed to 1204\ndf = df.where(col('sum_keep') > 0)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[36], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Let's keep the xid exposed to 1204</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>where(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sum_keep</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">0</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#faa0e351 .cell execution_count=37}\n``` {.python .cell-code}\ndf.count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[37], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3ba897e4 .cell execution_count=38}\n``` {.python .cell-code}\ndf.select('xid').distinct().count()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[38], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xid</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>distinct()<span style=\"color:rgb(98,98,98)\">.</span>count()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b81aa2a4 .cell execution_count=39}\n``` {.python .cell-code}\nrow_partition = Window().orderBy('row')\ncol_partition = Window().orderBy('col')\nrow_new = func.dense_rank().over(row_partition)\ncol_new = func.dense_rank().over(col_partition)\ndf = df.withColumn('row_new', row_new)\ndf = df.withColumn('col_new', col_new)\ncsr_data = df.select('row_new', 'col_new', 'value').toPandas()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[39], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> row_new <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>dense_rank()<span style=\"color:rgb(98,98,98)\">.</span>over(row_partition)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> col_new <span style=\"color:rgb(98,98,98)\">=</span> func<span style=\"color:rgb(98,98,98)\">.</span>dense_rank()<span style=\"color:rgb(98,98,98)\">.</span>over(col_partition)\n<span class=\"ansi-green-fg\">----&gt; 5</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">row_new</span><span style=\"color:rgb(175,0,0)\">'</span>, row_new)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> df <span style=\"color:rgb(98,98,98)\">=</span> df<span style=\"color:rgb(98,98,98)\">.</span>withColumn(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">col_new</span><span style=\"color:rgb(175,0,0)\">'</span>, col_new)\n<span class=\"ansi-green-fg ansi-bold\">      7</span> csr_data <span style=\"color:rgb(98,98,98)\">=</span> df<span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">row_new</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">col_new</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">value</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>toPandas()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#614955b4 .cell execution_count=40}\n``` {.python .cell-code}\ncsr_data.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[40], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">csr_data</span><span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'csr_data' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#958569ad .cell execution_count=41}\n``` {.python .cell-code}\nfeatures_names = df.select('feature_name', 'col_new').distinct()\nfeatures_names.where(col('feature_name') == 'n_actions_per_category_id#C#1204.0').head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[41], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> features_names <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>select(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">feature_name</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">col_new</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>distinct()\n<span class=\"ansi-green-fg ansi-bold\">      2</span> features_names<span style=\"color:rgb(98,98,98)\">.</span>where(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">feature_name</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_actions_per_category_id#C#1204.0</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#27b09051 .cell execution_count=42}\n``` {.python .cell-code}\nfeatures_names.where(col('feature_name') == 'n_actions_per_category_id#O#1204.0').head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[42], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">features_names</span><span style=\"color:rgb(98,98,98)\">.</span>where(col(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">feature_name</span><span style=\"color:rgb(175,0,0)\">'</span>) <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">n_actions_per_category_id#O#1204.0</span><span style=\"color:rgb(175,0,0)\">'</span>)<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'features_names' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#57931246 .cell execution_count=43}\n``` {.python .cell-code}\nfrom scipy.sparse import csr_matrix\nimport numpy as np\n\nrows = csr_data['row_new'].values - 1\ncols = csr_data['col_new'].values - 1\nvals = csr_data['value'].values\n\nX_csr = csr_matrix((vals, (rows, cols)))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[43], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">scipy</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">sparse</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> csr_matrix\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span>\n<span class=\"ansi-green-fg\">----&gt; 4</span> rows <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">csr_data</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">row_new</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>values <span style=\"color:rgb(98,98,98)\">-</span> <span style=\"color:rgb(98,98,98)\">1</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> cols <span style=\"color:rgb(98,98,98)\">=</span> csr_data[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">col_new</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>values <span style=\"color:rgb(98,98,98)\">-</span> <span style=\"color:rgb(98,98,98)\">1</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> vals <span style=\"color:rgb(98,98,98)\">=</span> csr_data[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">value</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>values\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'csr_data' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#98c7c7d0 .cell execution_count=44}\n``` {.python .cell-code}\nX_csr.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[44], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">X_csr</span><span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X_csr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#07d357dc .cell execution_count=45}\n``` {.python .cell-code}\nX_csr.shape, X_csr.nnz\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[45], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">X_csr</span><span style=\"color:rgb(98,98,98)\">.</span>shape, X_csr<span style=\"color:rgb(98,98,98)\">.</span>nnz\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X_csr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4fa3789c .cell execution_count=46}\n``` {.python .cell-code}\nX_csr.nnz / (152347 * 92)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[46], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">X_csr</span><span style=\"color:rgb(98,98,98)\">.</span>nnz <span style=\"color:rgb(98,98,98)\">/</span> (<span style=\"color:rgb(98,98,98)\">152347</span> <span style=\"color:rgb(98,98,98)\">*</span> <span style=\"color:rgb(98,98,98)\">92</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X_csr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#777d8aa7 .cell execution_count=47}\n``` {.python .cell-code}\n# The label vector. Let's make it dense, flat and binary\ny = np.array(X_csr[:, 1].todense()).ravel()\ny = np.array(y > 0, dtype=np.int64)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[47], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The label vector. Let's make it dense, flat and binary</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> y <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>array(<span class=\"ansi-yellow-bg\">X_csr</span>[:, <span style=\"color:rgb(98,98,98)\">1</span>]<span style=\"color:rgb(98,98,98)\">.</span>todense())<span style=\"color:rgb(98,98,98)\">.</span>ravel()\n<span class=\"ansi-green-fg ansi-bold\">      3</span> y <span style=\"color:rgb(98,98,98)\">=</span> np<span style=\"color:rgb(98,98,98)\">.</span>array(y <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">0</span>, dtype<span style=\"color:rgb(98,98,98)\">=</span>np<span style=\"color:rgb(98,98,98)\">.</span>int64)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X_csr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#857616db .cell execution_count=48}\n``` {.python .cell-code}\nX_csr.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[48], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">X_csr</span><span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X_csr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#977ddb41 .cell execution_count=49}\n``` {.python .cell-code}\n# We remove the second and fourth column. \n# It actually contain the label we'll want to predict.\nkept_cols = list(range(92))\nkept_cols.pop(1)\nkept_cols.pop(2)\nX = X_csr[:, kept_cols]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[49], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> kept_cols<span style=\"color:rgb(98,98,98)\">.</span>pop(<span style=\"color:rgb(98,98,98)\">1</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> kept_cols<span style=\"color:rgb(98,98,98)\">.</span>pop(<span style=\"color:rgb(98,98,98)\">2</span>)\n<span class=\"ansi-green-fg\">----&gt; 6</span> X <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">X_csr</span>[:, kept_cols]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X_csr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7d5b178b .cell execution_count=50}\n``` {.python .cell-code}\nX_csr.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[50], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">X_csr</span><span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X_csr' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Finally !!\n\nWow ! That was a lot of work. Now we have a features matrix $X$ and a vector of labels $y$.\n\n::: {#81b881c5 .cell execution_count=51}\n``` {.python .cell-code}\nX.indices\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[51], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">X</span><span style=\"color:rgb(98,98,98)\">.</span>indices\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e4b36c6b .cell execution_count=52}\n``` {.python .cell-code}\nX.indptr\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[52], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">X</span><span style=\"color:rgb(98,98,98)\">.</span>indptr\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2e586a5f .cell execution_count=53}\n``` {.python .cell-code}\nX.shape, X.nnz\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[53], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">X</span><span style=\"color:rgb(98,98,98)\">.</span>shape, X<span style=\"color:rgb(98,98,98)\">.</span>nnz\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'X' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9bd8755b .cell execution_count=54}\n``` {.python .cell-code}\ny.shape, y.sum()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[54], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">y</span><span style=\"color:rgb(98,98,98)\">.</span>shape, y<span style=\"color:rgb(98,98,98)\">.</span>sum()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'y' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n# Some learning for this data\n\n::: {#47055adc .cell execution_count=55}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import MaxAbsScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Normalize the features\nX = MaxAbsScaler().fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.3)\n\nclf = LogisticRegression(\n    penalty='l2',\n    C=1e3,\n    solver='lbfgs',\n    class_weight='balanced'\n)\nclf.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[55], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">sklearn</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">preprocessing</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> MaxAbsScaler\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">sklearn</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">model_selection</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> train_test_split\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">sklearn</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">linear_model</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> LogisticRegression\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'sklearn'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#98b563ae .cell execution_count=56}\n``` {.python .cell-code}\nfeatures_names = features_names.toPandas()['feature_name']\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[56], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> features_names <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">features_names</span><span style=\"color:rgb(98,98,98)\">.</span>toPandas()[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">feature_name</span><span style=\"color:rgb(175,0,0)\">'</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'features_names' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d46cc65e .cell execution_count=57}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.figure(figsize=(16, 5))\nplt.stem(clf.coef_[0], use_line_collection=True)\nplt.title('Logistic regression coefficients', fontsize=18)\n# We change the fontsize of minor ticks label\n_ = plt.xticks(np.arange(clf.coef_[0].shape[0]), features_names, \n           rotation='vertical', fontsize=8)\n_ = plt.yticks(fontsize=14)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[57], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> get_ipython()<span style=\"color:rgb(98,98,98)\">.</span>run_line_magic(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">matplotlib</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">inline</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> plt<span style=\"color:rgb(98,98,98)\">.</span>figure(figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">16</span>, <span style=\"color:rgb(98,98,98)\">5</span>))\n<span class=\"ansi-green-fg\">----&gt; 5</span> plt<span style=\"color:rgb(98,98,98)\">.</span>stem(<span class=\"ansi-yellow-bg\">clf</span><span style=\"color:rgb(98,98,98)\">.</span>coef_[<span style=\"color:rgb(98,98,98)\">0</span>], use_line_collection<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> plt<span style=\"color:rgb(98,98,98)\">.</span>title(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Logistic regression coefficients</span><span style=\"color:rgb(175,0,0)\">'</span>, fontsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">18</span>)\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># We change the fontsize of minor ticks label</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'clf' is not defined</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 1536x480 with 0 Axes>\n```\n:::\n:::\n\n\n::: {#4ad284e3 .cell execution_count=58}\n``` {.python .cell-code}\nfrom sklearn.metrics import precision_recall_curve, f1_score\n\nprecision, recall, _ = precision_recall_curve(y_test, clf.predict_proba(X_test)[:, 1])\n    \nplt.figure(figsize=(8, 6))\nplt.plot(recall, precision, label='LR (F1=%.2f)' % f1_score(y_test, clf.predict(X_test)), lw=2)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('Recall', fontsize=16)\nplt.ylabel('Precision', fontsize=16)\nplt.title('Precision/recall curve', fontsize=18)\nplt.legend(loc=\"upper right\", fontsize=14)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[58], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">sklearn</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">metrics</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> precision_recall_curve, f1_score\n<span class=\"ansi-green-fg ansi-bold\">      3</span> precision, recall, _ <span style=\"color:rgb(98,98,98)\">=</span> precision_recall_curve(y_test, clf<span style=\"color:rgb(98,98,98)\">.</span>predict_proba(X_test)[:, <span style=\"color:rgb(98,98,98)\">1</span>])\n<span class=\"ansi-green-fg ansi-bold\">      5</span> plt<span style=\"color:rgb(98,98,98)\">.</span>figure(figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">8</span>, <span style=\"color:rgb(98,98,98)\">6</span>))\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'sklearn'</pre>\n```\n:::\n\n:::\n:::\n\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /usr/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.3\n---\n",
    "supporting": [
      "notebook11_dive_files"
    ],
    "filters": []
  }
}