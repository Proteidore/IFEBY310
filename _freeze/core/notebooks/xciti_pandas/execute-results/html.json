{
  "hash": "3964822393e1dd0c67cb6251c5a11b78",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Imports\njupyter: python3\n---\n\n::: {#e4b0401a .cell execution_count=2}\n``` {.python .cell-code}\nimport glob\n\nimport os\nimport sys\nimport re \nimport shutils\nimport logging \n\nimport pandas as pd\nimport numpy as np\n\n\n\nimport datetime\n\n# from functools import reduce\nimport itertools\n\nimport zipfile\nfrom zipfile import ZipFile\nfrom tqdm import tqdm\n\nimport pyarrow as pa\nimport comet    as co\nimport pyarrow.parquet as pq\nimport pyarrow.dataset as ds\n\n\nimport dask\n\nos.environ['PYSPARK_PYTHON'] = sys.executable\nos.environ['PYSPARK_DRIVER_PYTHON'] = sys.executable\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">sys</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">re</span> \n<span class=\"ansi-green-fg\">----&gt; 6</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">shutils</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">logging</span> \n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pd</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'shutils'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#73992f35 .cell execution_count=3}\n``` {.python .cell-code}\nfrom dask.distributed import Client\n\nclient = Client(n_workers=20, threads_per_worker=2, memory_limit=\"2GB\")\nclient\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/dask/distributed.py:13</span>\n<span class=\"ansi-green-fg ansi-bold\">     12</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">---&gt; 13</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">distributed</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"color:rgb(98,98,98)\">*</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ImportError</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> e:\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'distributed'\n\nThe above exception was the direct cause of the following exception:\n\n<span class=\"ansi-red-fg\">ImportError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">dask</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">distributed</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Client\n<span class=\"ansi-green-fg ansi-bold\">      3</span> client <span style=\"color:rgb(98,98,98)\">=</span> Client(n_workers<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">20</span>, threads_per_worker<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>, memory_limit<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">2GB</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      4</span> client\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/dask/distributed.py:16</span>\n<span class=\"ansi-green-fg ansi-bold\">     14</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ImportError</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> e:\n<span class=\"ansi-green-fg ansi-bold\">     15</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> e<span style=\"color:rgb(98,98,98)\">.</span>msg <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">No module named </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">distributed</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg\">---&gt; 16</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ImportError</span>(_import_error_message) <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">e</span>\n<span class=\"ansi-green-fg ansi-bold\">     17</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg ansi-bold\">     18</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span>\n\n<span class=\"ansi-red-fg\">ImportError</span>: dask.distributed is not installed.\n\nPlease either conda or pip install distributed:\n\n  conda install dask distributed             # either conda install\n  python -m pip install \"dask[distributed]\" --upgrade    # or pip install</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#415498e6 .cell execution_count=4}\n``` {.python .cell-code}\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(filename='example.log', encoding='utf-8', level=logging.DEBUG)\nlogger.debug('This message should go to the log file')\nlogger.info('So should this')\nlogger.warning('And this, too')\nlogger.error('And non-ASCII stuff, too, like Øresund and Malmö')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> logger <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">logging</span><span style=\"color:rgb(98,98,98)\">.</span>getLogger(<span style=\"color:rgb(0,0,135)\">__name__</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> logging<span style=\"color:rgb(98,98,98)\">.</span>basicConfig(filename<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">example.log</span><span style=\"color:rgb(175,0,0)\">'</span>, encoding<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">utf-8</span><span style=\"color:rgb(175,0,0)\">'</span>, level<span style=\"color:rgb(98,98,98)\">=</span>logging<span style=\"color:rgb(98,98,98)\">.</span>DEBUG)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> logger<span style=\"color:rgb(98,98,98)\">.</span>debug(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">This message should go to the log file</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'logging' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Paths\n\nDownloaded zip archives are in `data_dir`\n\nExtracted csv files are in `extract_dir`\n\nParquet files are in `parquet_dir`\n\n::: {#3a92103d .cell execution_count=5}\n``` {.python .cell-code}\ndata_dir = '../data'\nos.path.exists(data_dir)\n\nextract_dir = os.path.join(data_dir, 'xcitibike')\nif not os.path.exists(extract_dir):\n    os.mkdir(extract_dir)\n\nparquet_dir = os.path.join(data_dir, 'pq_citibike')\nif not os.path.exists(parquet_dir):\n    os.mkdir(parquet_dir)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">FileNotFoundError</span>                         Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> extract_dir <span style=\"color:rgb(98,98,98)\">=</span> os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>join(data_dir, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">xcitibike</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>exists(extract_dir):\n<span class=\"ansi-green-fg\">----&gt; 6</span>     <span class=\"ansi-yellow-bg\">os</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">mkdir</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">extract_dir</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> parquet_dir <span style=\"color:rgb(98,98,98)\">=</span> os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>join(data_dir, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">pq_citibike</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      9</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>exists(parquet_dir):\n\n<span class=\"ansi-red-fg\">FileNotFoundError</span>: [Errno 2] No such file or directory: '../data/xcitibike'</pre>\n```\n:::\n\n:::\n:::\n\n\n## Extracting archives\n\nZip archive files contain directory trees where the `csv` files are to be found.\n\n::: {#0d005394 .cell execution_count=6}\n``` {.python .cell-code}\ncitibike_archives_paths = sorted(glob.glob(data_dir + '/*-citibike-tripdata.zip'))\n```\n:::\n\n\nTODO: \n- parallelize part of the extraction process \n- one thread per element in `citibike_archives_paths`\n- should be doable with dask\n\n::: {#029b96b8 .cell execution_count=7}\n``` {.python .cell-code}\nfor ar_path in tqdm(citibike_archives_paths):\n    myzip = ZipFile(ar_path)\n    to_extract = [elt  for elt in myzip.namelist() if (elt.endswith(\".csv\") and not (elt.startswith('__MACOSX')))]\n    myzip.extractall(path=extract_dir,\n                     members=to_extract)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> ar_path <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">tqdm</span>(citibike_archives_paths):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     myzip <span style=\"color:rgb(98,98,98)\">=</span> ZipFile(ar_path)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     to_extract <span style=\"color:rgb(98,98,98)\">=</span> [elt  <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> elt <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> myzip<span style=\"color:rgb(98,98,98)\">.</span>namelist() <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> (elt<span style=\"color:rgb(98,98,98)\">.</span>endswith(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">.csv</span><span style=\"color:rgb(175,0,0)\">\"</span>) <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> (elt<span style=\"color:rgb(98,98,98)\">.</span>startswith(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">__MACOSX</span><span style=\"color:rgb(175,0,0)\">'</span>)))]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tqdm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Collecting headers\n\nThe extracted `csv` files do not share the same schema and the same datetime encoding format.\n\nWalking through the `csv` files in `extract_dir`, allows to gather the three different column naming patterns.\n\nTODO: \n- Save the schemata with inferred types in a `json` file. Different typing patterns may correspond to the same column naming pattern\n- For each `csv` file spot the column naming pattern, the datetime encoding format\n\n::: {#f1d75f35 .cell execution_count=8}\n``` {.python .cell-code}\n# schemata_names = set()\n\n# for (root, dirs ,files) in os.walk(extract_dir, topdown=True):\n#    if dirs:\n#        continue\n#    for fn in files:\n#        if fn.endswith('.csv'):\n#            with open(os.path.join(root, fn), 'r') as fd:\n#                schemata_names.add(fd.readline())\n\n# schemata_names = [s.replace('\\n', '').split(',') for s in schemata_names]\n```\n:::\n\n\n::: {#54b53521 .cell execution_count=9}\n``` {.python .cell-code}\nschemata_names = [\n    ['ride_id',\n  'rideable_type',\n  'started_at',\n  'ended_at',\n  'start_station_name',\n  'start_station_id',\n  'end_station_name',\n  'end_station_id',\n  'start_lat',\n  'start_lng',\n  'end_lat',\n  'end_lng',\n  'member_casual'],\n ['tripduration',\n  'starttime',\n  'stoptime',\n  'start station id',\n  'start station name',\n  'start station latitude',\n  'start station longitude',\n  'end station id',\n  'end station name',\n  'end station latitude',\n  'end station longitude',\n  'bikeid',\n  'usertype',\n  'birth year',\n  'gender'],\n ['Trip Duration',\n  'Start Time',\n  'Stop Time',\n  'Start Station ID',\n  'Start Station Name',\n  'Start Station Latitude',\n  'Start Station Longitude',\n  'End Station ID',\n  'End Station Name',\n  'End Station Latitude',\n  'End Station Longitude',\n  'Bike ID',\n  'User Type',\n  'Birth Year',\n  'Gender']\n]\n```\n:::\n\n\nFor each `csv` file, find the column naming pattern, build a dictionary  with this information.\n\nTODO: \n- should done during the first walk.\n\n::: {#83be246f .cell execution_count=10}\n``` {.python .cell-code}\nschemata_numbers = {}\n\nfor (root, dirs ,files) in os.walk(extract_dir, topdown=True):\n    if dirs:\n        continue\n    for fn in files:\n        if fn.endswith('.csv'):        \n            with open(os.path.join(root, fn), 'r') as fd:\n                col_names = fd.readline().replace('\\n', '').split(',')\n                schemata_numbers[fn] = schemata_names.index(col_names)\n```\n:::\n\n\n## Building renaming dictionaries\n\n### From `0` \n\nNothing to do\n\n### From `1`\n\nUse \n```\n{\n 'tripduration': 'trip_duration',\n 'starttime': 'started_at',\n 'stoptime': 'ended_at',\n 'bikeid': 'bike_id',\n 'usertype': 'user_type',\n 'start station latitude': 'start_lat',\n 'start station longitude': 'start_lng',\n 'end station latitude': 'end_lat',\n 'end station longitude': 'end_lng'\n}\n```\nand replace ` ` with '_'.\n\n\n### From `2`\n\n```\n{\n 'Trip Duration': 'trip_duration',\n  'Start Time': 'started_at',\n  'Stop Time': 'ended_at',\n  'Start Station Latitude': 'start_lat',\n  'Start Station Longitude': 'start_lng',\n  'End Station Latitude': 'end_lat',\n  'End Station Longitude': 'end_lng'    \n}\n\n```\nand replace ` ` with '_', use `lower()`.\n\n::: {#32cd3ffd .cell execution_count=11}\n``` {.python .cell-code}\ndicts_rename = {\n    1: {\n 'tripduration': 'trip_duration',\n 'starttime': 'started_at',\n 'stoptime': 'ended_at',\n 'bikeid': 'bike_id',\n 'usertype': 'user_type',\n 'start station latitude': 'start_lat',\n 'start station longitude': 'start_lng',\n 'end station latitude': 'end_lat',\n 'end station longitude': 'end_lng'\n} ,\n  2:  {\n 'Trip Duration': 'trip_duration',\n  'Start Time': 'started_at',\n  'Stop Time': 'ended_at',\n  'Start Station Latitude': 'start_lat',\n  'Start Station Longitude': 'start_lng',\n  'End Station Latitude': 'end_lat',\n  'End Station Longitude': 'end_lng'    \n}\n}\n```\n:::\n\n\nAnother problem. \n\n`start_station_id`, `end_station_id` is not consistently formatted.\n\n## Building a parquet replica\n\nTODO:\n    - explain why `engine='pyarrow'` is useful when using `pd.read_csv()`\n    - clean up the renaming schemes\n\nDatetime hand-made parsing for non ISO compliant `csv` file \n\n::: {#2021c5bb .cell execution_count=12}\n``` {.python .cell-code}\ndef my_parse(s):\n    \"\"\"datetime parsing for non-ISO enco\n\n    Args:\n        s (str): a datetime encoding string '%m/%d/%Y H:M[:S]'\n\n    Returns:\n        datetime: a datetime object without timezone\n    \"\"\"\n    rem = re.compile(r\"(\\d+)/(\\d+)/(\\d+) (\\d+)?(:\\d+)?(:\\d+)?\")\n\n    matches = rem.search(s).groups()\n    month, day, year, hours, mins, secs = [int(x.replace(':','')) if x else 0 for x in matches]\n\n    zdt = datetime.datetime(year, month, day, hours, mins, secs)\n    return zdt\n```\n:::\n\n\nTODO: \n- parallelize this \n\n::: {#2ea55b2f .cell execution_count=13}\n``` {.python .cell-code}\ndef csv2pq(root, dirs, files):\n    if dirs:\n        return\n\n    for fn in files:\n        if not fn.endswith('.csv'):  \n            continue\n\n        df = pd.read_csv(\n                    os.path.join(root, fn),\n                    engine = 'pyarrow'\n            )\n                    \n        if 1==schemata_numbers[fn]: \n            df = ( \n                df\n                    .rename(columns=dicts_rename[1])\n                    .rename(mapper= lambda s : s.replace(' ', '_'), axis='columns')\n            )                \n        elif 2==schemata_numbers[fn]:\n            df = ( \n                df\n                    .rename(columns=dicts_rename[2])\n                    .rename(mapper= lambda s : s.lower().replace(' ', '_'), axis='columns')\n            )\n\n        if (str(df.dtypes.loc['ended_at'])=='object'):\n            # Format is either '%m/%d/%Y %H:%M:%S'or '%m/%d/%Y %H:%M'\n            try:\n                df['ended_at'] = pd.to_datetime(df.ended_at, format='%m/%d/%Y %H:%M:%S')\n                df['started_at'] = pd.to_datetime(df.started_at, format='%m/%d/%Y %H:%M:%S')\n            except ValueError:\n                df['ended_at'] = pd.to_datetime(df.ended_at, format='%m/%d/%Y %H:%M')\n                df['started_at'] = pd.to_datetime(df.started_at, format='%m/%d/%Y %H:%M')\n            except:\n                df['ended_at'] = df.ended_at.map(my_parse)\n                df['started_at'] = df.started_at.map(my_parse)\n\n\n        # if df.start_station_id.dtype != np.dtype('O'):\n\n        df['start_station_id'] = df.start_station_id.astype(np.dtype('O'))  \n        df['end_station_id'] = df.end_station_id.astype(np.dtype('O')) \n            \n        df['start_year'] = df.started_at.dt.year\n        df['start_month'] = df.started_at.dt.month  \n        \n        table = pa.Table.from_pandas(df)\n\n        logger.info('writing: ' + fn)\n\n        pq.write_to_dataset(\n                table,\n                parquet_dir,\n                partition_cols=[\"start_year\", \"start_month\"],\n        )    \n\n    return root \n```\n:::\n\n\n::: {#4a5024dd .cell execution_count=14}\n``` {.python .cell-code}\ntodo = dask.delayed([dask.delayed(csv2pq)(root, dirs ,files)\n    for (root, dirs ,files) in os.walk(extract_dir, topdown=True)\n ])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> todo <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">dask</span><span style=\"color:rgb(98,98,98)\">.</span>delayed([dask<span style=\"color:rgb(98,98,98)\">.</span>delayed(csv2pq)(root, dirs ,files)\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> (root, dirs ,files) <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> os<span style=\"color:rgb(98,98,98)\">.</span>walk(extract_dir, topdown<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span>  ])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dask' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d71ccd2b .cell execution_count=15}\n``` {.python .cell-code}\nfoo = todo.compute()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[14], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> foo <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">todo</span><span style=\"color:rgb(98,98,98)\">.</span>compute()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'todo' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f72f710c .cell execution_count=16}\n``` {.python .cell-code}\n[x  for x in foo if x]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> [x  <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> x <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">foo</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> x]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'foo' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b77d6b3a .cell execution_count=17}\n``` {.python .cell-code}\nlist(schemata_numbers.keys())\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n[]\n```\n:::\n:::\n\n\n::: {#b9ae1d89 .cell execution_count=18}\n``` {.python .cell-code}\nfor (root, dirs ,files) in tqdm(os.walk(extract_dir, topdown=True)):\n    if dirs:\n        continue\n    for fn in files:\n        if not fn.endswith('.csv'):  \n            continue\n\n        df = pd.read_csv(\n                os.path.join(root, fn),\n                engine = 'pyarrow'\n        )\n                \n        if 1==schemata_numbers[fn]: \n            df = ( \n                df\n                  .rename(columns=dicts_rename[1])\n                  .rename(mapper= lambda s : s.replace(' ', '_'), axis='columns')\n            )                \n        elif 2==schemata_numbers[fn]:\n            df = ( \n                df\n                  .rename(columns=dicts_rename[2])\n                  .rename(mapper= lambda s : s.lower().replace(' ', '_'), axis='columns')\n            )\n        \n        if (str(df.dtypes.loc['ended_at'])=='object'):\n            # Format is either '%m/%d/%Y %H:%M:%S'or '%m/%d/%Y %H:%M'\n            try:\n                df['ended_at'] = pd.to_datetime(df.ended_at, format='%m/%d/%Y %H:%M:%S')\n                df['started_at'] = pd.to_datetime(df.started_at, format='%m/%d/%Y %H:%M:%S')\n            except ValueError:\n                df['ended_at'] = pd.to_datetime(df.ended_at, format='%m/%d/%Y %H:%M')\n                df['started_at'] = pd.to_datetime(df.started_at, format='%m/%d/%Y %H:%M')\n            except:\n                df['ended_at'] = df.ended_at.map(my_parse)\n                df['started_at'] = df.started_at.map(my_parse) \n\n        \n\n        if df.start_station_id.dtype != np.dtype('O'):\n            df['start_station_id'] = df.start_station_id.astype(np.dtype('O'))  \n            df['end_station_id'] = df.end_station_id.astype(np.dtype('O')) \n         \n        df['start_year'] = df.started_at.dt.year\n        df['start_month'] = df.started_at.dt.month  \n      \n        table = pa.Table.from_pandas(df)\n\n        pa.schema(table)\n\n        pq.write_to_dataset(\n             table,\n             parquet_dir,\n             partition_cols=[\"start_year\", \"start_month\"],\n        )\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> (root, dirs ,files) <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">tqdm</span>(os<span style=\"color:rgb(98,98,98)\">.</span>walk(extract_dir, topdown<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> dirs:\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">continue</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tqdm' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#71298b4e .cell execution_count=19}\n``` {.python .cell-code}\ndf.start_station_id.astype(np.dtype('O'))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>start_station_id<span style=\"color:rgb(98,98,98)\">.</span>astype(np<span style=\"color:rgb(98,98,98)\">.</span>dtype(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">O</span><span style=\"color:rgb(175,0,0)\">'</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## TODOs\n\n### Handling schema evolution\n\nSchema changed between 2021 January and 2021 February\n\n| Old Column   | New Column |  Action |\n|:-------------|:-------------------------|:-----------------------------------------------------------|\n|                |   `ride_id`            |  Primary key ?                                             |\n|                |   `ride_type`          |  `docked_bike`                                     |\n| `tripduration` |                        |  In seconds, can be recovered from `started_at`/`ended_at` | \n| `starttime`    |   `started_at`         |  No need for microseconds before 2021 January              |                                          \n| `stoptime`     |   `ended_at`           |  No need for microseconds before 2021 January              |\n| `start station id` | `start_station_id` |  Order mismatch, code mismatch. Before : int. After:       |\n| `start station name` |  `start_station_name` |    Check consistency                                  |\n| `start station latitude` |  `start_lat`      |    Check consistency                                  |\n| `start station longitude`|  `start_lng`      |    Check consistency                                  |\n\n| Old Column   | New Column |  Action |\n|:-------------|:-------------------------|:-----------------------------------------------------------|\n| `end station id`         |  `end_station_id`|     Check consistency                                  |\n| `end station name`       |  `end_station_name` |  Check consistency                                  |\n| `end station latitude`   |  `end_lat`       |     Check consistency                                  |\n| `end station longitude`  |  `end_lng`       |     Check consistency                                  |\n| `bikeid`                 |                  |                                                        |\n| `usertype`               |                  |    `Subscriber`/`Customer`                             |\n| `birth year`             |                  |                                                        |\n| `gender`                 |                  |      0, 1                                                  |\n|                          | `member_casual`  |   `casual`/`member`                                    |\n\n        \n\n- reading side: just read `start_time`, `end_time`, `start_station_id`, `end_station_id`,\n- `start_at` and `end_at` must be translated to `start_time`, `end_time`\n- `trip_duration`, `user_type`, `bike_id`, `member_casual`\n\n- Prepare for a dimension table for stations\n    - `id`\n    - `name`\n    - `lat`\n    - `lon`\n    - `more`\n \n### Select from the colum names\n\nCan we read directly as a pyarrow table ? Yes, but Pandas is convenient for datetime manipulations, and possibly for renaming\n\n### Usage `pyarrow.unify_schemas`\n\n\n### Parsing dates \n\nFor some files, timestamps are not in ISO format. \n\nFrom 2014-09-01 till 2016-09-.., `started_at`  and `ended_at` do  not abide ISO format, but `%m/%d/%Y %H:%M:%S`.\n\nTry to use `pd.to_datetime()`. If failure, use regular expression to parse the putative date column. Handle the optional field that way.\n\nBetter ask forgiveness than permission.\n\n::: {#0948190d .cell execution_count=20}\n``` {.python .cell-code}\nroot, dirs, fn = next(os.walk(os.path.join(parquet_dir, 'start_year=2013', 'start_month=9')))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[19], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> root, dirs, fn <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(os<span style=\"color:rgb(98,98,98)\">.</span>walk(os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>join(<span class=\"ansi-yellow-bg\">parquet_dir</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">start_year=2013</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">start_month=9</span><span style=\"color:rgb(175,0,0)\">'</span>)))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'parquet_dir' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#07dc08aa .cell execution_count=21}\n``` {.python .cell-code}\nspam = pq.read_metadata(os.path.join(root, fn[0]))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> spam <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pq</span><span style=\"color:rgb(98,98,98)\">.</span>read_metadata(os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>join(root, fn[<span style=\"color:rgb(98,98,98)\">0</span>]))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pq' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5e10fb12 .cell execution_count=22}\n``` {.python .cell-code}\nfrom  dask import dataframe as dd\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages/dask/dataframe/__init__.py:49: FutureWarning:\n\n\nDask dataframe query planning is disabled because dask-expr is not installed.\n\nYou can install it with `pip install dask[dataframe]` or `conda install dask`.\nThis will raise in a future version.\n\n\n```\n:::\n:::\n\n\n::: {#4bd20d0e .cell execution_count=23}\n``` {.python .cell-code}\nspam = dd.read_parquet(os.path.join(parquet_dir, 'start_year=2023' ))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> spam <span style=\"color:rgb(98,98,98)\">=</span> dd<span style=\"color:rgb(98,98,98)\">.</span>read_parquet(os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>join(<span class=\"ansi-yellow-bg\">parquet_dir</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">start_year=2023</span><span style=\"color:rgb(175,0,0)\">'</span> ))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'parquet_dir' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4582f48e .cell execution_count=24}\n``` {.python .cell-code}\nspam.dtypes\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[23], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">spam</span><span style=\"color:rgb(98,98,98)\">.</span>dtypes\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'spam' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4918e318 .cell execution_count=25}\n``` {.python .cell-code}\nfoo_path = os.path.join(parquet_dir, 'start_year=2023', 'start_month=1')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> foo_path <span style=\"color:rgb(98,98,98)\">=</span> os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>join(<span class=\"ansi-yellow-bg\">parquet_dir</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">start_year=2023</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">start_month=1</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'parquet_dir' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#983170f5 .cell execution_count=26}\n``` {.python .cell-code}\nroot, dirs, fn = next(os.walk(foo_path))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> root, dirs, fn <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">next</span>(os<span style=\"color:rgb(98,98,98)\">.</span>walk(<span class=\"ansi-yellow-bg\">foo_path</span>))\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'foo_path' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c2903a72 .cell execution_count=27}\n``` {.python .cell-code}\nparquet_file = pq.ParquetFile(os.path.join(root, fn[0]))\nschema = parquet_file.schema\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[26], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> parquet_file <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pq</span><span style=\"color:rgb(98,98,98)\">.</span>ParquetFile(os<span style=\"color:rgb(98,98,98)\">.</span>path<span style=\"color:rgb(98,98,98)\">.</span>join(root, fn[<span style=\"color:rgb(98,98,98)\">0</span>]))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> schema <span style=\"color:rgb(98,98,98)\">=</span> parquet_file<span style=\"color:rgb(98,98,98)\">.</span>schema\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pq' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7f33a185 .cell execution_count=28}\n``` {.python .cell-code}\nschema\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[27], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">schema</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'schema' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "xciti_pandas_files"
    ],
    "filters": [],
    "includes": {}
  }
}