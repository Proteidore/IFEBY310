{
  "hash": "7d9ea3ae0707cd91bc77ff17d2bcbc26",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Introduction to `pandas`\njupyter: python3\n---\n\n\n\nThe `pandas` library (https://pandas.pydata.org) is one of the most used tool at the disposal of people working with data in `python` today.\n\n- It allows to **crunch data** easily\n- It mainly provides a `DataFrame` object (a **table of data**) with a huge set of functionalities\n\n\n## Why ?\n\nThrough `pandas`, you get acquainted with your data by **analyzing** it \n\n- What's the average, median, max, or min of each column?\n- Does column A correlate with column B?\n- What does the distribution of data in column C look like?\n\n## Why  (con't) ?\n\nyou get acquainted with your data by **cleaning** and  **transforming** it \n\n- Removing missing values, filter rows or columns using some criteria\n- Store the cleaned, transformed data back into virtually any format or database\n- Data visualization (when combined `matplotlib` or `seaborn` or others)\n\n## Where ?\n\n`pandas` is a central component of the `python` \"stack\" for data science\n\n- `pandas` is built on top of `numpy`\n- often used in conjunction with other libraries\n- a `DataFrame` is often fed to plotting functions or machine learning algorithms (such as `scikit-learn`)\n- Well-interfaced with `jupyter`, leading to a nice interactive environment for data exploration and modeling\n\n## Core components of pandas\n\nThe two primary components of pandas are the `Series` and `DataFrame`.\n\n- A `Series` is essentially a column\n\n- A `DataFrame` is a multi-dimensional table made up of a collection of `Series` with equal length\n\n## Creating a `DataFrame` from scratch\n\n::: {#0ac0b823 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:07:08.634333Z\",\"start_time\":\"2022-01-19T11:07:08.201274Z\"}' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\nfruits = {\n    \"apples\": [3, 2, 0, 1],\n    \"oranges\": [0, 3, 7, 2]\n}\n\ndf_fruits = pd.DataFrame(fruits)\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#77351a97 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:08:05.535463Z\",\"start_time\":\"2022-01-19T11:08:05.530187Z\"}' execution_count=2}\n``` {.python .cell-code}\ntype(df_fruits)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {#230e5395 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:08:12.680877Z\",\"start_time\":\"2022-01-19T11:08:12.674128Z\"}' execution_count=3}\n``` {.python .cell-code}\ndf_fruits[\"apples\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n0    3\n1    2\n2    0\n3    1\nName: apples, dtype: int64\n```\n:::\n:::\n\n\n::: {#9b995839 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:08:40.517193Z\",\"start_time\":\"2022-01-19T11:08:40.511875Z\"}' execution_count=4}\n``` {.python .cell-code}\ntype(df_fruits[\"apples\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\npandas.core.series.Series\n```\n:::\n:::\n\n\n## Indexing\n\n- By default, a `DataFrame` uses a contiguous index\n- But what if we want to say **who** buys the fruits ?\n\n::: {#85af5eb3 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:08:51.018797Z\",\"start_time\":\"2022-01-19T11:08:51.009897Z\"}' execution_count=5}\n``` {.python .cell-code}\ndf_fruits = pd.DataFrame(fruits, index=[\"Daniel\", \"Sean\", \"Pierce\", \"Roger\"])\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `.loc` versus `.iloc`\n\n- `.loc` **loc**ates by name\n- `.iloc` **loc**ates by numerical **i**ndex\n\n::: {#ec8f7881 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:11:43.050618Z\",\"start_time\":\"2022-01-19T11:11:43.042623Z\"}' execution_count=6}\n``` {.python .cell-code}\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#d5cffcb7 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:12:17.606988Z\",\"start_time\":\"2022-01-19T11:12:17.599866Z\"}' execution_count=7}\n``` {.python .cell-code}\n# What's in Sean's basket ?\ndf_fruits.loc['Sean']\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\napples     2\noranges    3\nName: Sean, dtype: int64\n```\n:::\n:::\n\n\n::: {#d3656804 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:12:31.777154Z\",\"start_time\":\"2022-01-19T11:12:31.771307Z\"}' execution_count=8}\n``` {.python .cell-code}\n# Who has oranges ?\ndf_fruits.loc[:, 'oranges']\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nDaniel    0\nSean      3\nPierce    7\nRoger     2\nName: oranges, dtype: int64\n```\n:::\n:::\n\n\n::: {#cb175dde .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:13:12.355217Z\",\"start_time\":\"2022-01-19T11:13:12.350177Z\"}' execution_count=9}\n``` {.python .cell-code}\n# How many apples in Pierce's basket ?\ndf_fruits.loc['Pierce', 'apples']\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nnp.int64(0)\n```\n:::\n:::\n\n\n::: {#1d2406b3 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:13:18.688274Z\",\"start_time\":\"2022-01-19T11:13:18.676461Z\"}' execution_count=10}\n``` {.python .cell-code}\ndf_f®ruits\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg\">  Cell </span><span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-red-fg\">    df_f®ruits</span>\n        ^\n<span class=\"ansi-red-fg\">SyntaxError</span><span class=\"ansi-red-fg\">:</span> invalid character '®' (U+00AE)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8901f1c6 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:13:20.548872Z\",\"start_time\":\"2022-01-19T11:13:20.542442Z\"}' execution_count=11}\n``` {.python .cell-code}\ndf_fruits.iloc[2, 1]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nnp.int64(7)\n```\n:::\n:::\n\n\n## Main attributes and methods of a `DataFrame`\n\nA `DataFrame` has many **attributes**\n\n::: {#249ab778 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:13:38.902805Z\",\"start_time\":\"2022-01-19T11:13:38.896985Z\"}' execution_count=12}\n``` {.python .cell-code}\ndf_fruits.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nIndex(['apples', 'oranges'], dtype='object')\n```\n:::\n:::\n\n\n::: {#7b8e1d77 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:14:23.322276Z\",\"start_time\":\"2022-01-19T11:14:23.316645Z\"}' execution_count=13}\n``` {.python .cell-code}\ndf_fruits.index\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nIndex(['Daniel', 'Sean', 'Pierce', 'Roger'], dtype='object')\n```\n:::\n:::\n\n\n::: {#16f17312 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:14:32.512895Z\",\"start_time\":\"2022-01-19T11:14:32.506454Z\"}' execution_count=14}\n``` {.python .cell-code}\ndf_fruits.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\napples     int64\noranges    int64\ndtype: object\n```\n:::\n:::\n\n\nA `DataFrame` has many **methods**\n\n::: {#5ba4df9a .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:17:20.721882Z\",\"start_time\":\"2022-01-19T11:17:20.708707Z\"}' execution_count=15}\n``` {.python .cell-code}\ndf_fruits.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 4 entries, Daniel to Roger\nData columns (total 2 columns):\n #   Column   Non-Null Count  Dtype\n---  ------   --------------  -----\n 0   apples   4 non-null      int64\n 1   oranges  4 non-null      int64\ndtypes: int64(2)\nmemory usage: 268.0+ bytes\n```\n:::\n:::\n\n\n::: {#d3e83c94 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:15:35.080217Z\",\"start_time\":\"2022-01-19T11:15:35.062875Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=16}\n``` {.python .cell-code}\ndf_fruits.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4.000000</td>\n      <td>4.00000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.500000</td>\n      <td>3.00000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.290994</td>\n      <td>2.94392</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.750000</td>\n      <td>1.50000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.500000</td>\n      <td>2.50000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.250000</td>\n      <td>4.00000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.000000</td>\n      <td>7.00000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Missing values\n\nWhat if we don't know how many apples are in Sean's basket ?\n\n::: {#8fccf050 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:15:57.731545Z\",\"start_time\":\"2022-01-19T11:15:57.721720Z\"}' execution_count=17}\n``` {.python .cell-code}\ndf_fruits.loc['Sean', 'apples'] = None\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#4ebcd5be .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:16:40.181235Z\",\"start_time\":\"2022-01-19T11:16:40.163184Z\"}' execution_count=18}\n``` {.python .cell-code}\ndf_fruits.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3.000000</td>\n      <td>4.00000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.333333</td>\n      <td>3.00000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.527525</td>\n      <td>2.94392</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.500000</td>\n      <td>1.50000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000</td>\n      <td>2.50000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.000000</td>\n      <td>4.00000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.000000</td>\n      <td>7.00000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote that `count` is **3** for apples now, since we have 1 missing value among the 4\n\n## Adding a column\n\nOoooops, we forgot about the bananas !\n\n::: {#aa721f49 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:17:38.191383Z\",\"start_time\":\"2022-01-19T11:17:38.181663Z\"}' execution_count=19}\n``` {.python .cell-code}\ndf_fruits[\"bananas\"] = [0, 2, 1, 6]\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Adding a column with the date\n\nAnd we forgot the dates !\n\n::: {#a02f9f91 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:17:45.450938Z\",\"start_time\":\"2022-01-19T11:17:45.439619Z\"}' execution_count=20}\n``` {.python .cell-code}\ndf_fruits['time'] = [\n    \"2020/10/08 12:13\", \"2020/10/07 11:37\", \n    \"2020/10/10 14:07\", \"2020/10/09 10:51\"\n]\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2020/10/08 12:13</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2020/10/07 11:37</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2020/10/10 14:07</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2020/10/09 10:51</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#16812236 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:18:04.481768Z\",\"start_time\":\"2022-01-19T11:18:04.475480Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=21}\n``` {.python .cell-code}\ndf_fruits.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\napples     float64\noranges      int64\nbananas      int64\ntime        object\ndtype: object\n```\n:::\n:::\n\n\n::: {#85f7a848 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:18:19.387128Z\",\"start_time\":\"2022-01-19T11:18:19.381754Z\"}' execution_count=22}\n``` {.python .cell-code}\ntype(df_fruits.loc[\"Roger\", \"time\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nstr\n```\n:::\n:::\n\n\nIt's not a date but a string (`str`) ! So we convert this column to something called `datetime`\n\n::: {#16acdad7 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:19:11.306595Z\",\"start_time\":\"2022-01-19T11:19:11.293662Z\"}' execution_count=23}\n``` {.python .cell-code}\ndf_fruits[\"time\"] = pd.to_datetime(df_fruits[\"time\"])\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2020-10-08 12:13:00</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2020-10-07 11:37:00</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#f884e811 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:19:41.683741Z\",\"start_time\":\"2022-01-19T11:19:41.677507Z\"}' execution_count=24}\n``` {.python .cell-code}\ndf_fruits.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\napples            float64\noranges             int64\nbananas             int64\ntime       datetime64[ns]\ndtype: object\n```\n:::\n:::\n\n\nWhat if we want to keep only the baskets after (including) October, 9th ?\n\n::: {#07badb52 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:19:51.787589Z\",\"start_time\":\"2022-01-19T11:19:51.775535Z\"}' execution_count=25}\n``` {.python .cell-code}\ndf_fruits.loc[df_fruits[\"time\"] >= pd.Timestamp(\"2020/10/09\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Slices and subsets of rows or columns\n\n::: {#4259c255 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:20:30.215178Z\",\"start_time\":\"2022-01-19T11:20:30.205482Z\"}' execution_count=26}\n``` {.python .cell-code}\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2020-10-08 12:13:00</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2020-10-07 11:37:00</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#418e7037 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:20:32.076067Z\",\"start_time\":\"2022-01-19T11:20:32.066100Z\"}' execution_count=27}\n``` {.python .cell-code}\ndf_fruits.loc[:, \"oranges\":\"time\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>0</td>\n      <td>0</td>\n      <td>2020-10-08 12:13:00</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>3</td>\n      <td>2</td>\n      <td>2020-10-07 11:37:00</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>7</td>\n      <td>1</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>2</td>\n      <td>6</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#9185aa75 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:20:46.504725Z\",\"start_time\":\"2022-01-19T11:20:46.494468Z\"}' execution_count=28}\n``` {.python .cell-code}\ndf_fruits.loc[\"Daniel\":\"Sean\", \"apples\":\"bananas\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#5857d303 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:21:08.463797Z\",\"start_time\":\"2022-01-19T11:21:08.452887Z\"}' execution_count=29}\n``` {.python .cell-code}\ndf_fruits[[\"apples\", \"time\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>2020-10-08 12:13:00</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>2020-10-07 11:37:00</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Write our data to a CSV file\n\nWhat if we want to write the file ?\n\n::: {#240e69e5 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:22:26.287324Z\",\"start_time\":\"2022-01-19T11:22:26.277669Z\"}' execution_count=30}\n``` {.python .cell-code}\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2020-10-08 12:13:00</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2020-10-07 11:37:00</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#f97d8f89 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:22:28.613982Z\",\"start_time\":\"2022-01-19T11:22:28.602540Z\"}' execution_count=31}\n``` {.python .cell-code}\ndf_fruits.to_csv(\"fruits.csv\")\n```\n:::\n\n\n::: {#289a8e72 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:22:41.309341Z\",\"start_time\":\"2022-01-19T11:22:40.971618Z\"}' execution_count=32}\n``` {.python .cell-code}\n# Use !dir on windows\n!ls -alh | grep fru\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-rw-rw-r-- 1 boucheron boucheron  163 janv. 14 22:37 fruits.csv\r\n```\n:::\n:::\n\n\n::: {#6e969c20 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:23:12.183964Z\",\"start_time\":\"2022-01-19T11:23:11.859384Z\"}' execution_count=33}\n``` {.python .cell-code}\n!head -n 5 fruits.csv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n,apples,oranges,bananas,time\r\nDaniel,3.0,0,0,2020-10-08 12:13:00\r\nSean,,3,2,2020-10-07 11:37:00\r\nPierce,0.0,7,1,2020-10-10 14:07:00\r\nRoger,1.0,2,6,2020-10-09 10:51:00\r\n```\n:::\n:::\n\n\n## Reading data and working with it\n\nLet's read the file `tips.csv`. It is a `CSV` file (**C**omma **S**eparated **V**alues).\n\nIt contains data about a restaurant: the bill, tip and some informations about the customers.\n\n::: {#856ab1ad .cell slideshow='{\"slide_type\":\"skip\"}' execution_count=34}\n``` {.python .cell-code}\n!ls\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n970101f4-6bc5-4932-ad58-30477664f5ed  notebook04_pandas_spark.qmd\r\nchecking_parquet_citibike.ipynb       notebook05_sparkrdd.qmd\r\nchecking_parquet_citibike.qmd\t      notebook06_sparksql.qmd\r\nfruits.csv\t\t\t      notebook07_json-format.qmd\r\n_metadata.yml\t\t\t      notebook08_webdata-II.qmd\r\nmiserables.txt\t\t\t      notebook-0.ipynb\r\nmiserable_word_counts.pkl\t      notebook-0.qmd\r\nnotebook01_python.ipynb\t\t      notebook10_graphx.qmd\r\nnotebook01_python.qmd\t\t      notebook11_dive.qmd\r\nnotebook02_numpy.ipynb\t\t      notebook14.qmd\r\nnotebook02_numpy.qmd\t\t      notebookxx_pg_pandas_spark.qmd\r\nnotebook03_pandas.qmd\t\t      xcitibike_spark.qmd\r\nnotebook03_pandas.quarto_ipynb\t      xciti_pandas.qmd\r\n```\n:::\n:::\n\n\n::: {#ea98a270 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:24:03.254808Z\",\"start_time\":\"2022-01-19T11:24:03.193606Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=35}\n``` {.python .cell-code}\nimport requests\nimport os\n\n# The path containing your notebook\npath_data = './'\n# The name of the file\nfilename = 'tips.csv'\n\nif os.path.exists(os.path.join(path_data, filename)):\n    print('The file %s already exists.' % os.path.join(path_data, filename))\nelse:\n    url = 'http://stephanegaiffas.github.io/big_data_course/data/tips.csv'\n    r = requests.get(url)\n    with open(os.path.join(path_data, filename), 'wb') as f:\n        f.write(r.content)\n    print('Downloaded file %s.' % os.path.join(path_data, filename))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDownloaded file ./tips.csv.\n```\n:::\n:::\n\n\n::: {#702786f4 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:25:11.872794Z\",\"start_time\":\"2022-01-19T11:25:11.854234Z\"}' execution_count=36}\n``` {.python .cell-code}\ndf = pd.read_csv(\"tips.csv\")\n\n# `.head()` shows the first rows of the dataframe\ndf.head(n=10)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ParserError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[36], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pd</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_csv</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">tips.csv</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># `.head()` shows the first rows of the dataframe</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> df<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">10</span>)\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1026</span>, in <span class=\"ansi-cyan-fg\">read_csv</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1013</span> kwds_defaults <span style=\"color:rgb(98,98,98)\">=</span> _refine_defaults_read(\n<span class=\"ansi-green-fg ansi-bold\">   1014</span>     dialect,\n<span class=\"ansi-green-fg ansi-bold\">   1015</span>     delimiter,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1022</span>     dtype_backend<span style=\"color:rgb(98,98,98)\">=</span>dtype_backend,\n<span class=\"ansi-green-fg ansi-bold\">   1023</span> )\n<span class=\"ansi-green-fg ansi-bold\">   1024</span> kwds<span style=\"color:rgb(98,98,98)\">.</span>update(kwds_defaults)\n<span class=\"ansi-green-fg\">-&gt; 1026</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">_read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filepath_or_buffer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:626</span>, in <span class=\"ansi-cyan-fg\">_read</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">    623</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> parser\n<span class=\"ansi-green-fg ansi-bold\">    625</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> parser:\n<span class=\"ansi-green-fg\">--&gt; 626</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">parser</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">nrows</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1923</span>, in <span class=\"ansi-cyan-fg\">TextFileReader.read</span><span class=\"ansi-blue-fg\">(self, nrows)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1916</span> nrows <span style=\"color:rgb(98,98,98)\">=</span> validate_integer(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">nrows</span><span style=\"color:rgb(175,0,0)\">\"</span>, nrows)\n<span class=\"ansi-green-fg ansi-bold\">   1917</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1918</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># error: \"ParserBase\" has no attribute \"read\"</span>\n<span class=\"ansi-green-fg ansi-bold\">   1919</span>     (\n<span class=\"ansi-green-fg ansi-bold\">   1920</span>         index,\n<span class=\"ansi-green-fg ansi-bold\">   1921</span>         columns,\n<span class=\"ansi-green-fg ansi-bold\">   1922</span>         col_dict,\n<span class=\"ansi-green-fg\">-&gt; 1923</span>     ) <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_engine</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">  </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># type: ignore[attr-defined]</span>\n<span class=\"ansi-green-fg ansi-bold\">   1924</span> <span class=\"ansi-yellow-bg\">        </span><span class=\"ansi-yellow-bg\">nrows</span>\n<span class=\"ansi-green-fg ansi-bold\">   1925</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1926</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">Exception</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1927</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>close()\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/c_parser_wrapper.py:234</span>, in <span class=\"ansi-cyan-fg\">CParserWrapper.read</span><span class=\"ansi-blue-fg\">(self, nrows)</span>\n<span class=\"ansi-green-fg ansi-bold\">    232</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg ansi-bold\">    233</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>low_memory:\n<span class=\"ansi-green-fg\">--&gt; 234</span>         chunks <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_reader</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_low_memory</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">nrows</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># destructive to chunks</span>\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         data <span style=\"color:rgb(98,98,98)\">=</span> _concatenate_chunks(chunks)\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:838</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader.read_low_memory</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:905</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._read_rows</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:874</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._tokenize_rows</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:891</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._check_tokenize_status</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:2061</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.raise_parser_error</span><span class=\"ansi-blue-fg\">()</span>\n\n<span class=\"ansi-red-fg\">ParserError</span>: Error tokenizing data. C error: Expected 1 fields in line 11, saw 4\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f7c11297 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:25:14.135464Z\",\"start_time\":\"2022-01-19T11:25:14.120703Z\"}' execution_count=37}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[37], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>info()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#455cdab8 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:25:55.860622Z\",\"start_time\":\"2022-01-19T11:25:55.855132Z\"}' execution_count=38}\n``` {.python .cell-code}\ndf.loc[42, \"day\"]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[38], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>loc[<span style=\"color:rgb(98,98,98)\">42</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5c8d2ff4 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:26:04.074000Z\",\"start_time\":\"2022-01-19T11:26:04.068748Z\"}' execution_count=39}\n``` {.python .cell-code}\ntype(df.loc[42, \"day\"])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[39], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">type</span>(<span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>loc[<span style=\"color:rgb(98,98,98)\">42</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nBy default, columns that are non-numerical contain strings (`str` type)\n\n## The `category` type\n\nAn important type in `pandas` is `category` for variables that are **non-numerical**\n\n**Pro tip.** It's always a good idea to tell `pandas` which columns should be imported as **categorical**\n\nSo, let's read again the file specifying some `dtype`s to the `read_csv` function\n\n::: {#ad564b65 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:27:43.266029Z\",\"start_time\":\"2022-01-19T11:27:43.254997Z\"}' execution_count=40}\n``` {.python .cell-code}\ndtypes = {\n    \"sex\": \"category\",\n    \"smoker\": \"category\",\n    \"day\": \"category\",\n    \"time\": \"category\"\n} \n\ndf = pd.read_csv(\"tips.csv\", dtype=dtypes)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ParserError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[40], line 8</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> dtypes <span style=\"color:rgb(98,98,98)\">=</span> {\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">sex</span><span style=\"color:rgb(175,0,0)\">\"</span>: <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">category</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">smoker</span><span style=\"color:rgb(175,0,0)\">\"</span>: <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">category</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>: <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">category</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>: <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">category</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> } \n<span class=\"ansi-green-fg\">----&gt; 8</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pd</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_csv</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">tips.csv</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">dtype</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">dtypes</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1026</span>, in <span class=\"ansi-cyan-fg\">read_csv</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1013</span> kwds_defaults <span style=\"color:rgb(98,98,98)\">=</span> _refine_defaults_read(\n<span class=\"ansi-green-fg ansi-bold\">   1014</span>     dialect,\n<span class=\"ansi-green-fg ansi-bold\">   1015</span>     delimiter,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1022</span>     dtype_backend<span style=\"color:rgb(98,98,98)\">=</span>dtype_backend,\n<span class=\"ansi-green-fg ansi-bold\">   1023</span> )\n<span class=\"ansi-green-fg ansi-bold\">   1024</span> kwds<span style=\"color:rgb(98,98,98)\">.</span>update(kwds_defaults)\n<span class=\"ansi-green-fg\">-&gt; 1026</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">_read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filepath_or_buffer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:626</span>, in <span class=\"ansi-cyan-fg\">_read</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">    623</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> parser\n<span class=\"ansi-green-fg ansi-bold\">    625</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> parser:\n<span class=\"ansi-green-fg\">--&gt; 626</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">parser</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">nrows</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1923</span>, in <span class=\"ansi-cyan-fg\">TextFileReader.read</span><span class=\"ansi-blue-fg\">(self, nrows)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1916</span> nrows <span style=\"color:rgb(98,98,98)\">=</span> validate_integer(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">nrows</span><span style=\"color:rgb(175,0,0)\">\"</span>, nrows)\n<span class=\"ansi-green-fg ansi-bold\">   1917</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1918</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># error: \"ParserBase\" has no attribute \"read\"</span>\n<span class=\"ansi-green-fg ansi-bold\">   1919</span>     (\n<span class=\"ansi-green-fg ansi-bold\">   1920</span>         index,\n<span class=\"ansi-green-fg ansi-bold\">   1921</span>         columns,\n<span class=\"ansi-green-fg ansi-bold\">   1922</span>         col_dict,\n<span class=\"ansi-green-fg\">-&gt; 1923</span>     ) <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_engine</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">  </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># type: ignore[attr-defined]</span>\n<span class=\"ansi-green-fg ansi-bold\">   1924</span> <span class=\"ansi-yellow-bg\">        </span><span class=\"ansi-yellow-bg\">nrows</span>\n<span class=\"ansi-green-fg ansi-bold\">   1925</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1926</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">Exception</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1927</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>close()\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/c_parser_wrapper.py:234</span>, in <span class=\"ansi-cyan-fg\">CParserWrapper.read</span><span class=\"ansi-blue-fg\">(self, nrows)</span>\n<span class=\"ansi-green-fg ansi-bold\">    232</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg ansi-bold\">    233</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>low_memory:\n<span class=\"ansi-green-fg\">--&gt; 234</span>         chunks <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_reader</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_low_memory</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">nrows</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># destructive to chunks</span>\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         data <span style=\"color:rgb(98,98,98)\">=</span> _concatenate_chunks(chunks)\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:838</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader.read_low_memory</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:905</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._read_rows</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:874</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._tokenize_rows</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:891</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._check_tokenize_status</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:2061</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.raise_parser_error</span><span class=\"ansi-blue-fg\">()</span>\n\n<span class=\"ansi-red-fg\">ParserError</span>: Error tokenizing data. C error: Expected 1 fields in line 11, saw 4\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#31c63772 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:27:43.397120Z\",\"start_time\":\"2022-01-19T11:27:43.390806Z\"}' execution_count=41}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[41], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>dtypes\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Computing statistics\n\n::: {#7226ca9e .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:28:48.597833Z\",\"start_time\":\"2022-01-19T11:28:48.572605Z\"}' execution_count=42}\n``` {.python .cell-code}\n# The describe method only shows statistics for the numerical columns by default\ndf.describe()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[42], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The describe method only shows statistics for the numerical columns by default</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>describe()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b4281be4 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:28:52.927812Z\",\"start_time\":\"2022-01-19T11:28:52.861560Z\"}' execution_count=43}\n``` {.python .cell-code}\n# We use the include=\"all\" option to see everything\ndf.describe(include=\"all\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[43], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># We use the include=\"all\" option to see everything</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>describe(include<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">all</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9abc0064 .cell ExecuteTime='{\"end_time\":\"2022-01-19T11:30:32.769008Z\",\"start_time\":\"2022-01-19T11:30:32.758201Z\"}' execution_count=44}\n``` {.python .cell-code}\n# Correlation between the numerical columns\ndf.corr(numeric_only = True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[44], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Correlation between the numerical columns</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>corr(numeric_only <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f37e8103 .cell execution_count=45}\n``` {.python .cell-code}\n?df.corr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nObject `df.corr` not found.\n```\n:::\n:::\n\n\n# Data visualization with `matplotlib` and `seaborn`\n\nLet's show how we can use `matplotlib` and `seaborn` to visualize data contained in a `pandas` dataframe\n\n::: {#8eac00d1 .cell ExecuteTime='{\"end_time\":\"2022-01-26T07:51:56.942207Z\",\"start_time\":\"2022-01-26T07:51:55.697821Z\"}' execution_count=46}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[46], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">matplotlib</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pyplot</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">plt</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">seaborn</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">sns</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'seaborn'</pre>\n```\n:::\n\n:::\n:::\n\n\n## How do the tip depends on the total bill ?\n\n::: {#c4b1b895 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:19.482039Z\",\"start_time\":\"2021-01-15T09:51:19.072820Z\"}' execution_count=47}\n``` {.python .cell-code}\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[47], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">sns</span><span style=\"color:rgb(98,98,98)\">.</span>jointplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>, y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sns' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## When do customers go to this restaurant ?\n\n::: {#f6ee1e0a .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:19.607955Z\",\"start_time\":\"2021-01-15T09:51:19.484391Z\"}' execution_count=48}\n``` {.python .cell-code}\nsns.countplot(x='day', hue=\"time\", data=df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[48], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">sns</span><span style=\"color:rgb(98,98,98)\">.</span>countplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">'</span>, hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sns' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## When do customers spend the most ?\n\n::: {#002e199c .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:19.809624Z\",\"start_time\":\"2021-01-15T09:51:19.609684Z\"}' execution_count=49}\n``` {.python .cell-code}\nplt.figure(figsize=(7, 5))\nsns.boxplot(x='day', y='total_bill', hue='time', data=df)\nplt.legend(loc=\"upper left\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[49], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> plt<span style=\"color:rgb(98,98,98)\">.</span>figure(figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">7</span>, <span style=\"color:rgb(98,98,98)\">5</span>))\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">sns</span><span style=\"color:rgb(98,98,98)\">.</span>boxplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">'</span>, y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">'</span>, hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">'</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> plt<span style=\"color:rgb(98,98,98)\">.</span>legend(loc<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">upper left</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sns' is not defined</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n::: {#f3bd8fa5 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:20.023200Z\",\"start_time\":\"2021-01-15T09:51:19.812067Z\"}' execution_count=50}\n``` {.python .cell-code}\nplt.figure(figsize=(7, 5))\nsns.violinplot(x='day', y='total_bill', hue='time', split=True, data=df)\nplt.legend(loc=\"upper left\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[50], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> plt<span style=\"color:rgb(98,98,98)\">.</span>figure(figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">7</span>, <span style=\"color:rgb(98,98,98)\">5</span>))\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">sns</span><span style=\"color:rgb(98,98,98)\">.</span>violinplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">'</span>, y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">'</span>, hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">'</span>, split<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> plt<span style=\"color:rgb(98,98,98)\">.</span>legend(loc<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">upper left</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sns' is not defined</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n## Who spends the most ?\n\n::: {#fa95879c .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:20.225167Z\",\"start_time\":\"2021-01-15T09:51:20.025918Z\"}' execution_count=51}\n``` {.python .cell-code}\nsns.boxplot(x='sex', y='total_bill', hue='smoker', data=df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[51], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">sns</span><span style=\"color:rgb(98,98,98)\">.</span>boxplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sex</span><span style=\"color:rgb(175,0,0)\">'</span>, y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">'</span>, hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">smoker</span><span style=\"color:rgb(175,0,0)\">'</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sns' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## When should waiters want to work ?\n\n::: {#6818769e .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:20.442940Z\",\"start_time\":\"2021-01-15T09:51:20.227565Z\"}' execution_count=52}\n``` {.python .cell-code}\nsns.boxplot(x='day', y='tip', hue='time', data=df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[52], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">sns</span><span style=\"color:rgb(98,98,98)\">.</span>boxplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">'</span>, y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">'</span>, hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">'</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sns' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4dfdd4be .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:20.689849Z\",\"start_time\":\"2021-01-15T09:51:20.444898Z\"}' execution_count=53}\n``` {.python .cell-code}\nsns.violinplot(x='day', y='tip', hue='time', data=df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[53], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">sns</span><span style=\"color:rgb(98,98,98)\">.</span>violinplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">'</span>, y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">'</span>, hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">'</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sns' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n# Data processing with `pandas`\n\nLet us read again the `tips.csv` file\n\n::: {#8f7a3207 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:20.710132Z\",\"start_time\":\"2021-01-15T09:51:20.692036Z\"}' execution_count=54}\n``` {.python .cell-code}\nimport pandas as pd\n\ndtypes = {\n    \"sex\": \"category\",\n    \"smoker\": \"category\",\n    \"day\": \"category\",\n    \"time\": \"category\"\n} \n\ndf = pd.read_csv(\"tips.csv\", dtype=dtypes)\ndf.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ParserError</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[54], line 10</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pd</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> dtypes <span style=\"color:rgb(98,98,98)\">=</span> {\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">sex</span><span style=\"color:rgb(175,0,0)\">\"</span>: <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">category</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">smoker</span><span style=\"color:rgb(175,0,0)\">\"</span>: <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">category</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>: <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">category</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>: <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">category</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> } \n<span class=\"ansi-green-fg\">---&gt; 10</span> df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pd</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_csv</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">tips.csv</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">dtype</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">dtypes</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     11</span> df<span style=\"color:rgb(98,98,98)\">.</span>head()\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1026</span>, in <span class=\"ansi-cyan-fg\">read_csv</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1013</span> kwds_defaults <span style=\"color:rgb(98,98,98)\">=</span> _refine_defaults_read(\n<span class=\"ansi-green-fg ansi-bold\">   1014</span>     dialect,\n<span class=\"ansi-green-fg ansi-bold\">   1015</span>     delimiter,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1022</span>     dtype_backend<span style=\"color:rgb(98,98,98)\">=</span>dtype_backend,\n<span class=\"ansi-green-fg ansi-bold\">   1023</span> )\n<span class=\"ansi-green-fg ansi-bold\">   1024</span> kwds<span style=\"color:rgb(98,98,98)\">.</span>update(kwds_defaults)\n<span class=\"ansi-green-fg\">-&gt; 1026</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">_read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filepath_or_buffer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:626</span>, in <span class=\"ansi-cyan-fg\">_read</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">    623</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> parser\n<span class=\"ansi-green-fg ansi-bold\">    625</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> parser:\n<span class=\"ansi-green-fg\">--&gt; 626</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">parser</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">nrows</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1923</span>, in <span class=\"ansi-cyan-fg\">TextFileReader.read</span><span class=\"ansi-blue-fg\">(self, nrows)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1916</span> nrows <span style=\"color:rgb(98,98,98)\">=</span> validate_integer(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">nrows</span><span style=\"color:rgb(175,0,0)\">\"</span>, nrows)\n<span class=\"ansi-green-fg ansi-bold\">   1917</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1918</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># error: \"ParserBase\" has no attribute \"read\"</span>\n<span class=\"ansi-green-fg ansi-bold\">   1919</span>     (\n<span class=\"ansi-green-fg ansi-bold\">   1920</span>         index,\n<span class=\"ansi-green-fg ansi-bold\">   1921</span>         columns,\n<span class=\"ansi-green-fg ansi-bold\">   1922</span>         col_dict,\n<span class=\"ansi-green-fg\">-&gt; 1923</span>     ) <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_engine</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">  </span><span style=\"font-style:italic;color:rgb(95,135,135)\" class=\"ansi-yellow-bg\"># type: ignore[attr-defined]</span>\n<span class=\"ansi-green-fg ansi-bold\">   1924</span> <span class=\"ansi-yellow-bg\">        </span><span class=\"ansi-yellow-bg\">nrows</span>\n<span class=\"ansi-green-fg ansi-bold\">   1925</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1926</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">Exception</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1927</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>close()\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/c_parser_wrapper.py:234</span>, in <span class=\"ansi-cyan-fg\">CParserWrapper.read</span><span class=\"ansi-blue-fg\">(self, nrows)</span>\n<span class=\"ansi-green-fg ansi-bold\">    232</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg ansi-bold\">    233</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>low_memory:\n<span class=\"ansi-green-fg\">--&gt; 234</span>         chunks <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_reader</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_low_memory</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">nrows</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    235</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># destructive to chunks</span>\n<span class=\"ansi-green-fg ansi-bold\">    236</span>         data <span style=\"color:rgb(98,98,98)\">=</span> _concatenate_chunks(chunks)\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:838</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader.read_low_memory</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:905</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._read_rows</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:874</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._tokenize_rows</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:891</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._check_tokenize_status</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:2061</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.raise_parser_error</span><span class=\"ansi-blue-fg\">()</span>\n\n<span class=\"ansi-red-fg\">ParserError</span>: Error tokenizing data. C error: Expected 1 fields in line 11, saw 4\n</pre>\n```\n:::\n\n:::\n:::\n\n\n## Computations using `pandas` : broadcasting\n\nLet's add a column that contains the tip percentage\n\n::: {#7f2f1c6a .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:20.725863Z\",\"start_time\":\"2021-01-15T09:51:20.712207Z\"}' execution_count=55}\n``` {.python .cell-code}\ndf[\"tip_percentage\"] = df[\"tip\"] / df[\"total_bill\"]\ndf.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[55], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">/</span> df[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> df<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe computation\n```python\ndf[\"tip\"] / df[\"total_bill\"]\n```\nuses a **broadcast** rule.\n\n- We can multiply, add, subtract, etc. together `numpy` arrays, `Series` or `pandas` dataframes when the computation **makes sense** in view of their respective **shape**\n\nThis principle is called **broadcast** or **broadcasting**.\n\n::: {#c2084d5e .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:20.732473Z\",\"start_time\":\"2021-01-15T09:51:20.727786Z\"}' execution_count=56}\n``` {.python .cell-code}\ndf[\"tip\"].shape, df[\"total_bill\"].shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[56], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>]<span style=\"color:rgb(98,98,98)\">.</span>shape, df[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>]<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe `tip` and `total_bill`columns have the same `shape`, so broadcasting performs **pairwise division**.\n\nThis corresponds to the following \"hand-crafted\" approach with a `for` loop:\n\n::: {#ec6a170e .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:20.839274Z\",\"start_time\":\"2021-01-15T09:51:20.734938Z\"}' execution_count=57}\n``` {.python .cell-code}\nfor i in range(df.shape[0]):\n    df.loc[i, \"tip_percentage\"] = df.loc[i, \"tip\"] / df.loc[i, \"total_bill\"]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[57], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(<span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>shape[<span style=\"color:rgb(98,98,98)\">0</span>]):\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     df<span style=\"color:rgb(98,98,98)\">.</span>loc[i, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> df<span style=\"color:rgb(98,98,98)\">.</span>loc[i, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">/</span> df<span style=\"color:rgb(98,98,98)\">.</span>loc[i, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nBut using such a loop is: \n\n- much longer to write\n- prone to mistakes\n- ugly \n- and **excruciatingly slower** :(\n\n**NEVER** use `Python` for-loops for numerical computations !\n\n::: {#4313fa67 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:25.284758Z\",\"start_time\":\"2021-01-15T09:51:20.841712Z\"}' execution_count=58}\n``` {.python .cell-code}\n%%timeit -n 10\nfor i in range(df.shape[0]):\n    df.loc[i, \"tip_percentage\"] = df.loc[i, \"tip\"] / df.loc[i, \"total_bill\"]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[58], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">get_ipython</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">run_cell_magic</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">timeit</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">-n 10</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">for i in range(df.shape[0]):</span><span style=\"font-weight:bold;color:rgb(175,95,0)\" class=\"ansi-yellow-bg\">\\n</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">    df.loc[i, </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">tip_percentage</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">] = df.loc[i, </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">tip</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">] / df.loc[i, </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">total_bill</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">]</span><span style=\"font-weight:bold;color:rgb(175,95,0)\" class=\"ansi-yellow-bg\">\\n</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/IPython/core/interactiveshell.py:2541</span>, in <span class=\"ansi-cyan-fg\">InteractiveShell.run_cell_magic</span><span class=\"ansi-blue-fg\">(self, magic_name, line, cell)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2539</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>builtin_trap:\n<span class=\"ansi-green-fg ansi-bold\">   2540</span>     args <span style=\"color:rgb(98,98,98)\">=</span> (magic_arg_s, cell)\n<span class=\"ansi-green-fg\">-&gt; 2541</span>     result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">fn</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">args</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2543</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The code below prevents the output from being displayed</span>\n<span class=\"ansi-green-fg ansi-bold\">   2544</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when using magics with decorator @output_can_be_silenced</span>\n<span class=\"ansi-green-fg ansi-bold\">   2545</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when the last Python token in the expression is a ';'.</span>\n<span class=\"ansi-green-fg ansi-bold\">   2546</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(fn, magic<span style=\"color:rgb(98,98,98)\">.</span>MAGIC_OUTPUT_CAN_BE_SILENCED, <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/IPython/core/magics/execution.py:1199</span>, in <span class=\"ansi-cyan-fg\">ExecutionMagics.timeit</span><span class=\"ansi-blue-fg\">(self, line, cell, local_ns)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1196</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> time_number <span style=\"color:rgb(98,98,98)\">&gt;</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.2</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1197</span>             <span style=\"font-weight:bold;color:rgb(0,135,0)\">break</span>\n<span class=\"ansi-green-fg\">-&gt; 1199</span> all_runs <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">timer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">repeat</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">repeat</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">number</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1200</span> best <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">min</span>(all_runs) <span style=\"color:rgb(98,98,98)\">/</span> number\n<span class=\"ansi-green-fg ansi-bold\">   1201</span> worst <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">max</span>(all_runs) <span style=\"color:rgb(98,98,98)\">/</span> number\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.12/timeit.py:208</span>, in <span class=\"ansi-cyan-fg\">Timer.repeat</span><span class=\"ansi-blue-fg\">(self, repeat, number)</span>\n<span class=\"ansi-green-fg ansi-bold\">    206</span> r <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">    207</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(repeat):\n<span class=\"ansi-green-fg\">--&gt; 208</span>     t <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">timeit</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">number</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    209</span>     r<span style=\"color:rgb(98,98,98)\">.</span>append(t)\n<span class=\"ansi-green-fg ansi-bold\">    210</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> r\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/IPython/core/magics/execution.py:173</span>, in <span class=\"ansi-cyan-fg\">Timer.timeit</span><span class=\"ansi-blue-fg\">(self, number)</span>\n<span class=\"ansi-green-fg ansi-bold\">    171</span> gc<span style=\"color:rgb(98,98,98)\">.</span>disable()\n<span class=\"ansi-green-fg ansi-bold\">    172</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">--&gt; 173</span>     timing <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">inner</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">it</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">timer</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    174</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">finally</span>:\n<span class=\"ansi-green-fg ansi-bold\">    175</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> gcold:\n\nFile <span class=\"ansi-green-fg\">&lt;magic-timeit&gt;:1</span>, in <span class=\"ansi-cyan-fg\">inner</span><span class=\"ansi-blue-fg\">(_it, _timer)</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7fe5365c .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:25.332780Z\",\"start_time\":\"2021-01-15T09:51:25.286877Z\"}' execution_count=59}\n``` {.python .cell-code}\n%%timeit -n 10\ndf[\"tip_percentage\"] = df[\"tip\"] / df[\"total_bill\"]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[59], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">get_ipython</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">run_cell_magic</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">timeit</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">-n 10</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">df[</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">tip_percentage</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">] = df[</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">tip</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">] / df[</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">total_bill</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">]</span><span style=\"font-weight:bold;color:rgb(175,95,0)\" class=\"ansi-yellow-bg\">\\n</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/IPython/core/interactiveshell.py:2541</span>, in <span class=\"ansi-cyan-fg\">InteractiveShell.run_cell_magic</span><span class=\"ansi-blue-fg\">(self, magic_name, line, cell)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2539</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>builtin_trap:\n<span class=\"ansi-green-fg ansi-bold\">   2540</span>     args <span style=\"color:rgb(98,98,98)\">=</span> (magic_arg_s, cell)\n<span class=\"ansi-green-fg\">-&gt; 2541</span>     result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">fn</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">args</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2543</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The code below prevents the output from being displayed</span>\n<span class=\"ansi-green-fg ansi-bold\">   2544</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when using magics with decorator @output_can_be_silenced</span>\n<span class=\"ansi-green-fg ansi-bold\">   2545</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when the last Python token in the expression is a ';'.</span>\n<span class=\"ansi-green-fg ansi-bold\">   2546</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(fn, magic<span style=\"color:rgb(98,98,98)\">.</span>MAGIC_OUTPUT_CAN_BE_SILENCED, <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/IPython/core/magics/execution.py:1199</span>, in <span class=\"ansi-cyan-fg\">ExecutionMagics.timeit</span><span class=\"ansi-blue-fg\">(self, line, cell, local_ns)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1196</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> time_number <span style=\"color:rgb(98,98,98)\">&gt;</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.2</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1197</span>             <span style=\"font-weight:bold;color:rgb(0,135,0)\">break</span>\n<span class=\"ansi-green-fg\">-&gt; 1199</span> all_runs <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">timer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">repeat</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">repeat</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">number</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1200</span> best <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">min</span>(all_runs) <span style=\"color:rgb(98,98,98)\">/</span> number\n<span class=\"ansi-green-fg ansi-bold\">   1201</span> worst <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">max</span>(all_runs) <span style=\"color:rgb(98,98,98)\">/</span> number\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.12/timeit.py:208</span>, in <span class=\"ansi-cyan-fg\">Timer.repeat</span><span class=\"ansi-blue-fg\">(self, repeat, number)</span>\n<span class=\"ansi-green-fg ansi-bold\">    206</span> r <span style=\"color:rgb(98,98,98)\">=</span> []\n<span class=\"ansi-green-fg ansi-bold\">    207</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">range</span>(repeat):\n<span class=\"ansi-green-fg\">--&gt; 208</span>     t <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">timeit</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">number</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    209</span>     r<span style=\"color:rgb(98,98,98)\">.</span>append(t)\n<span class=\"ansi-green-fg ansi-bold\">    210</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> r\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/IPython/core/magics/execution.py:173</span>, in <span class=\"ansi-cyan-fg\">Timer.timeit</span><span class=\"ansi-blue-fg\">(self, number)</span>\n<span class=\"ansi-green-fg ansi-bold\">    171</span> gc<span style=\"color:rgb(98,98,98)\">.</span>disable()\n<span class=\"ansi-green-fg ansi-bold\">    172</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">--&gt; 173</span>     timing <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">inner</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">it</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">timer</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    174</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">finally</span>:\n<span class=\"ansi-green-fg ansi-bold\">    175</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> gcold:\n\nFile <span class=\"ansi-green-fg\">&lt;magic-timeit&gt;:1</span>, in <span class=\"ansi-cyan-fg\">inner</span><span class=\"ansi-blue-fg\">(_it, _timer)</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe `for` loop is $\\approx$ **200 times slower** ! (even worse on larger data)\n\n### Pitfall. Changing values in a `DataFrame`\n\nWhen you want to change a value in a `DataFrame`, never use\n```python\ndf[\"tip_percentage\"].loc[i] = 42\n```\nbut use\n```python\ndf.loc[i, \"tip_percentage\"] = 42\n```\nnamely, use a **single** `loc` or `iloc` statement. The first version **might not work**: it might modify a copy of the column and not the dataframe itself !\n\nAnother example of broadcasting is:\n\n::: {#1837fe5d .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:25.345631Z\",\"start_time\":\"2021-01-15T09:51:25.335148Z\"}' execution_count=60}\n``` {.python .cell-code}\n(100 * df[[\"tip_percentage\"]]).head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[60], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> (<span style=\"color:rgb(98,98,98)\">100</span> <span style=\"color:rgb(98,98,98)\">*</span> <span class=\"ansi-yellow-bg\">df</span>[[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>]])<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nwhere we multiplied **each entry** of the `tip_percentage` column by 100.\n\n**Remark.** Note the difference between\n```python\ndf[['tip_percentage']]\n```\nwhich returns a `DataFrame` containing only the `tip_percentage` column and\n```python\ndf['tip_percentage']\n```\nwhich returns a `Series` containing the data of the `tip_percentage` column\n\n## Some more plots\n\n### How do the tip percentages relates to the total bill ?\n\n::: {#8bd451a3 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:25.832352Z\",\"start_time\":\"2021-01-15T09:51:25.349460Z\"}' execution_count=61}\n``` {.python .cell-code}\nsns.jointplot(x=\"total_bill\", y=\"tip_percentage\", data=df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[61], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">sns</span><span style=\"color:rgb(98,98,98)\">.</span>jointplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>, y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sns' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Who tips best ?\n\n::: {#61534ef3 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.063153Z\",\"start_time\":\"2021-01-15T09:51:25.835329Z\"}' execution_count=62}\n``` {.python .cell-code}\nsns.boxplot(x='sex', y='tip_percentage', hue='smoker', data=df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[62], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">sns</span><span style=\"color:rgb(98,98,98)\">.</span>boxplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sex</span><span style=\"color:rgb(175,0,0)\">'</span>, y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">'</span>, hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">smoker</span><span style=\"color:rgb(175,0,0)\">'</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sns' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Who tips best without the `tip_percentage` outliers ?\n\n::: {#7242cb97 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.338967Z\",\"start_time\":\"2021-01-15T09:51:26.065918Z\"}' execution_count=63}\n``` {.python .cell-code}\nsns.boxplot(\n    x='sex', y='tip_percentage', hue='smoker', \n    data=df.loc[df[\"tip_percentage\"] <= 0.3]\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[63], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">sns</span><span style=\"color:rgb(98,98,98)\">.</span>boxplot(\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">sex</span><span style=\"color:rgb(175,0,0)\">'</span>, y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">'</span>, hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">smoker</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      3</span>     data<span style=\"color:rgb(98,98,98)\">=</span>df<span style=\"color:rgb(98,98,98)\">.</span>loc[df[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">&lt;</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0.3</span>]\n<span class=\"ansi-green-fg ansi-bold\">      4</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'sns' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3e4a2e4c .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.347568Z\",\"start_time\":\"2021-01-15T09:51:26.341347Z\"}' execution_count=64}\n``` {.python .cell-code}\nid(df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[64], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">id</span>(<span class=\"ansi-yellow-bg\">df</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## The all-mighty `groupby` and `aggregate`\n\nMany computations can be formulated as a **groupby** followed by and **aggregation**.\n\n### What is the mean `tip` and `tip percentage` each day ?\n\n::: {#664d607b .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.367070Z\",\"start_time\":\"2021-01-15T09:51:26.350529Z\"}' execution_count=65}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[65], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#17c82ae3 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.385448Z\",\"start_time\":\"2021-01-15T09:51:26.369477Z\"}' execution_count=66}\n``` {.python .cell-code}\ndf.groupby(\"day\").mean()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[66], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>groupby(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>)<span style=\"color:rgb(98,98,98)\">.</span>mean()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nBut we don't care about the `size` column here, so we can use insead\n\n::: {#3533f0a8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.404776Z\",\"start_time\":\"2021-01-15T09:51:26.389083Z\"}' execution_count=67}\n``` {.python .cell-code}\ndf[[\"total_bill\", \"tip\", \"tip_percentage\", \"day\"]].groupby(\"day\").mean()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[67], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span>[[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>]]<span style=\"color:rgb(98,98,98)\">.</span>groupby(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>)<span style=\"color:rgb(98,98,98)\">.</span>mean()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nIf we want to be more precise, we can `groupby` using several columns\n\n::: {#19b7cea9 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.441028Z\",\"start_time\":\"2021-01-15T09:51:26.408033Z\"}' execution_count=68}\n``` {.python .cell-code}\n(\n    df[[\"total_bill\", \"tip\", \"tip_percentage\", \"day\", \"time\"]]   # selection\n        .groupby([\"day\", \"time\"])                                # partition\n        .mean()                                                  # aggregation\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[68], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">df</span>[[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>]]   <span style=\"font-style:italic;color:rgb(95,135,135)\"># selection</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(98,98,98)\">.</span>groupby([<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>])                                <span style=\"font-style:italic;color:rgb(95,135,135)\"># partition</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         <span style=\"color:rgb(98,98,98)\">.</span>mean()                                                  <span style=\"font-style:italic;color:rgb(95,135,135)\"># aggregation</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Remarks**\n\n- We obtain a `DataFrame` with a two-level indexing: on the `day` and the `time`\n- Groups must be homogeneous: we have `NaN` values for empty groups (e.g. `Sat`, `Lunch`)\n\n### Pro tip\n\nSometimes, it's more convenient to get the groups as columns instead of a multi-level index.<br>\nFor this, use `reset_index`:\n\n::: {#384dff1b .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.477405Z\",\"start_time\":\"2021-01-15T09:51:26.444302Z\"}' execution_count=69}\n``` {.python .cell-code}\n(\n    df[[\"total_bill\", \"tip\", \"tip_percentage\", \"day\", \"time\"]]   # selection\n        .groupby([\"day\", \"time\"])                                # partition\n        .mean() # aggregation\n        .reset_index()   # ako ungroup\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[69], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">df</span>[[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>]]   <span style=\"font-style:italic;color:rgb(95,135,135)\"># selection</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(98,98,98)\">.</span>groupby([<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>])                                <span style=\"font-style:italic;color:rgb(95,135,135)\"># partition</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         <span style=\"color:rgb(98,98,98)\">.</span>mean() <span style=\"font-style:italic;color:rgb(95,135,135)\"># aggregation</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span>         <span style=\"color:rgb(98,98,98)\">.</span>reset_index()   <span style=\"font-style:italic;color:rgb(95,135,135)\"># ako ungroup</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### Another pro tip\n\nComputations with pandas can include many operations that are **pipelined** until the final computation.<br>\nPipelining many operations is good practice and perfectly normal, but in order to make the code readable you can put it between parenthesis (`python` expression) as follows:\n\n::: {#4c46facf .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.511329Z\",\"start_time\":\"2021-01-15T09:51:26.480282Z\"}' execution_count=70}\n``` {.python .cell-code}\n(\n    df[[\"total_bill\", \"tip\", \"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .mean()\n    .reset_index()\n    # and on top of all this we sort the dataframe with respect \n    # to the tip_percentage\n    .sort_values(\"tip_percentage\")\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[70], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">df</span>[[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>]]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>groupby([<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>])\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>mean()\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(98,98,98)\">.</span>reset_index()\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># and on top of all this we sort the dataframe with respect </span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># to the tip_percentage</span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     <span style=\"color:rgb(98,98,98)\">.</span>sort_values(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      9</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Displaying a `DataFrame` with `style`\n\nNow, we can answer, with style, to the question: what are the average tip percentages along the week ?\n\n::: {#b18c7075 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.668935Z\",\"start_time\":\"2021-01-15T09:51:26.514338Z\"}' execution_count=71}\n``` {.python .cell-code}\n(\n    df[[\"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .mean()\n    # At the end of the pipeline you can use .style\n    .style\n    # Print numerical values as percentages \n    .format(\"{:.2%}\")\n    .background_gradient()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[71], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">df</span>[[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>]]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>groupby([<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>])\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>mean()\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># At the end of the pipeline you can use .style</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"color:rgb(98,98,98)\">.</span>style\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Print numerical values as percentages </span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     <span style=\"color:rgb(98,98,98)\">.</span>format(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{:.2%}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     <span style=\"color:rgb(98,98,98)\">.</span>background_gradient()\n<span class=\"ansi-green-fg ansi-bold\">     10</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Removing the `NaN` values\n\nBut the `NaN` values are somewhat annoying. Let's remove them\n\n::: {#89621217 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.704232Z\",\"start_time\":\"2021-01-15T09:51:26.674169Z\"}' execution_count=72}\n``` {.python .cell-code}\n(\n    df[[\"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .mean()\n    # We just add this from the previous pipeline\n    .dropna()\n    .style\n    .format(\"{:.2%}\")\n    .background_gradient()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[72], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">df</span>[[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>]]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>groupby([<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>])\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>mean()\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># We just add this from the previous pipeline</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"color:rgb(98,98,98)\">.</span>dropna()\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     <span style=\"color:rgb(98,98,98)\">.</span>style\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     <span style=\"color:rgb(98,98,98)\">.</span>format(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{:.2%}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     <span style=\"color:rgb(98,98,98)\">.</span>background_gradient()\n<span class=\"ansi-green-fg ansi-bold\">     10</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNow, we clearly see when `tip_percentage` is maximal. But what about the standard deviation ?\n\n- We used only `.mean()` for now, but we can use several aggregating function using `.agg()`\n\n::: {#8dfb9563 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.766086Z\",\"start_time\":\"2021-01-15T09:51:26.707178Z\"}' execution_count=73}\n``` {.python .cell-code}\n(\n    df[[\"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .agg([\"mean\", \"std\"])          # we feed `agg`  with a list of names of callables \n    .dropna()\n    .style\n    .format(\"{:.2%}\")\n    .background_gradient()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[73], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">df</span>[[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>]]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>groupby([<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>])\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>agg([<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">mean</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">std</span><span style=\"color:rgb(175,0,0)\">\"</span>])          <span style=\"font-style:italic;color:rgb(95,135,135)\"># we feed `agg`  with a list of names of callables </span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(98,98,98)\">.</span>dropna()\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"color:rgb(98,98,98)\">.</span>style\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     <span style=\"color:rgb(98,98,98)\">.</span>format(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{:.2%}</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     <span style=\"color:rgb(98,98,98)\">.</span>background_gradient()\n<span class=\"ansi-green-fg ansi-bold\">      9</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nAnd we can use also `.describe()` as aggregation function. Moreover we\n- use the `subset` option to specify which column we want to style\n- we use `(\"tip_percentage\", \"count\")` to access multi-level index\n\n::: {#34dcfa18 .cell execution_count=74}\n``` {.python .cell-code}\n(\n    df[[\"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .describe()    # all-purpose summarising function\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[74], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">df</span>[[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>]]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>groupby([<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>])\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>describe()    <span style=\"font-style:italic;color:rgb(95,135,135)\"># all-purpose summarising function</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#add71038 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.851497Z\",\"start_time\":\"2021-01-15T09:51:26.768613Z\"}' execution_count=75}\n``` {.python .cell-code}\n(\n    df[[\"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .describe()\n    .dropna()\n    .style\n    .bar(subset=[(\"tip_percentage\", \"count\")])\n    .background_gradient(subset=[(\"tip_percentage\", \"50%\")])\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[75], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">df</span>[[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>]]\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>groupby([<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">time</span><span style=\"color:rgb(175,0,0)\">\"</span>])\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>describe()\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(98,98,98)\">.</span>dropna()\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"color:rgb(98,98,98)\">.</span>style\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     <span style=\"color:rgb(98,98,98)\">.</span>bar(subset<span style=\"color:rgb(98,98,98)\">=</span>[(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">count</span><span style=\"color:rgb(175,0,0)\">\"</span>)])\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     <span style=\"color:rgb(98,98,98)\">.</span>background_gradient(subset<span style=\"color:rgb(98,98,98)\">=</span>[(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip_percentage</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">50</span><span style=\"color:rgb(175,0,0)\">%</span><span style=\"color:rgb(175,0,0)\">\"</span>)])\n<span class=\"ansi-green-fg ansi-bold\">      9</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Supervised learning of `tip` based on the `total_bill` \n\nAs an example of very simple **machine-learning** problem, let's try to understand how we can predict `tip` based on `total_bill`.\n\n::: {#f8ae554f .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:26.993824Z\",\"start_time\":\"2021-01-15T09:51:26.854233Z\"}' execution_count=76}\n``` {.python .cell-code}\nimport numpy as np\n\nplt.scatter(df[\"total_bill\"], df[\"tip\"])\nplt.xlabel(\"total_bill\", fontsize=12)\nplt.ylabel(\"tip\", fontsize=12)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[76], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> plt<span style=\"color:rgb(98,98,98)\">.</span>scatter(<span class=\"ansi-yellow-bg\">df</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>], df[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>])\n<span class=\"ansi-green-fg ansi-bold\">      4</span> plt<span style=\"color:rgb(98,98,98)\">.</span>xlabel(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>, fontsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">12</span>)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> plt<span style=\"color:rgb(98,98,98)\">.</span>ylabel(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>, fontsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">12</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThere's a rough **linear** dependence between the two. Let's try to find it by hand!<br>\nNamely, we look for numbers $b$ and $w$ such that\n\n$$\n\\texttt{tip} \\approx b + w \\times \\texttt{total_bill}\n$$\n\nfor all the examples of pairs of $(\\texttt{tip}, \\texttt{total_bill})$ we observe in the data.\n\nIn **machine learning**, we say that this is a very simple example of a **supervised learning** problem (here it is a regression problem), where $\\texttt{tip}$ is the **label** and where $\\texttt{total_bill}$ is the (only) **feature**, for which we intend to use a **linear predictor**.\n\n::: {#bdbf86eb .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:27.158925Z\",\"start_time\":\"2021-01-15T09:51:26.996352Z\"}' execution_count=77}\n``` {.python .cell-code}\nplt.scatter(df[\"total_bill\"], df[\"tip\"])\nplt.xlabel(\"total_bill\", fontsize=12)\nplt.ylabel(\"tip\", fontsize=12)\n\nslope = 1.0\nintercept = 0.0\n\nx = np.linspace(0, 50, 1000)\nplt.plot(x, intercept + slope * x, color=\"red\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[77], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> plt<span style=\"color:rgb(98,98,98)\">.</span>scatter(<span class=\"ansi-yellow-bg\">df</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>], df[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>])\n<span class=\"ansi-green-fg ansi-bold\">      2</span> plt<span style=\"color:rgb(98,98,98)\">.</span>xlabel(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">total_bill</span><span style=\"color:rgb(175,0,0)\">\"</span>, fontsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">12</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> plt<span style=\"color:rgb(98,98,98)\">.</span>ylabel(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">tip</span><span style=\"color:rgb(175,0,0)\">\"</span>, fontsize<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">12</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n### A more interactive way \n\nThis might require\n\n```python\n!pip install ipympl\n```\n\n::: {#95bc8080 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:27.164804Z\",\"start_time\":\"2021-01-15T09:51:27.161590Z\"}' execution_count=78}\n``` {.python .cell-code}\n!pip install ipympl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRequirement already satisfied: ipympl in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (0.9.5)\r\nRequirement already satisfied: ipython<9 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipympl) (8.31.0)\r\nRequirement already satisfied: ipywidgets<9,>=7.6.0 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipympl) (8.1.5)\r\nRequirement already satisfied: matplotlib<4,>=3.4.0 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipympl) (3.10.0)\r\nRequirement already satisfied: numpy in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipympl) (2.2.1)\r\nRequirement already satisfied: pillow in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipympl) (11.0.0)\r\nRequirement already satisfied: traitlets<6 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipympl) (5.14.3)\r\nRequirement already satisfied: decorator in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipython<9->ipympl) (5.1.1)\r\nRequirement already satisfied: jedi>=0.16 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipython<9->ipympl) (0.19.2)\r\nRequirement already satisfied: matplotlib-inline in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipython<9->ipympl) (0.1.7)\r\nRequirement already satisfied: pexpect>4.3 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipython<9->ipympl) (4.9.0)\r\nRequirement already satisfied: prompt_toolkit<3.1.0,>=3.0.41 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipython<9->ipympl) (3.0.48)\r\nRequirement already satisfied: pygments>=2.4.0 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipython<9->ipympl) (2.18.0)\r\nRequirement already satisfied: stack_data in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipython<9->ipympl) (0.6.3)\r\nRequirement already satisfied: comm>=0.1.3 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipywidgets<9,>=7.6.0->ipympl) (0.2.2)\r\nRequirement already satisfied: widgetsnbextension~=4.0.12 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipywidgets<9,>=7.6.0->ipympl) (4.0.13)\r\nRequirement already satisfied: jupyterlab-widgets~=3.0.12 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from ipywidgets<9,>=7.6.0->ipympl) (3.0.13)\r\nRequirement already satisfied: contourpy>=1.0.1 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from matplotlib<4,>=3.4.0->ipympl) (1.3.1)\r\nRequirement already satisfied: cycler>=0.10 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from matplotlib<4,>=3.4.0->ipympl) (0.12.1)\r\nRequirement already satisfied: fonttools>=4.22.0 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from matplotlib<4,>=3.4.0->ipympl) (4.55.3)\r\nRequirement already satisfied: kiwisolver>=1.3.1 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from matplotlib<4,>=3.4.0->ipympl) (1.4.8)\r\nRequirement already satisfied: packaging>=20.0 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from matplotlib<4,>=3.4.0->ipympl) (24.2)\r\nRequirement already satisfied: pyparsing>=2.3.1 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from matplotlib<4,>=3.4.0->ipympl) (3.2.1)\r\nRequirement already satisfied: python-dateutil>=2.7 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from matplotlib<4,>=3.4.0->ipympl) (2.9.0.post0)\r\nRequirement already satisfied: parso<0.9.0,>=0.8.4 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from jedi>=0.16->ipython<9->ipympl) (0.8.4)\r\nRequirement already satisfied: ptyprocess>=0.5 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from pexpect>4.3->ipython<9->ipympl) (0.7.0)\r\nRequirement already satisfied: wcwidth in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from prompt_toolkit<3.1.0,>=3.0.41->ipython<9->ipympl) (0.2.13)\r\nRequirement already satisfied: six>=1.5 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from python-dateutil>=2.7->matplotlib<4,>=3.4.0->ipympl) (1.17.0)\r\nRequirement already satisfied: executing>=1.2.0 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from stack_data->ipython<9->ipympl) (2.1.0)\r\nRequirement already satisfied: asttokens>=2.1.0 in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from stack_data->ipython<9->ipympl) (3.0.0)\r\nRequirement already satisfied: pure-eval in /home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages (from stack_data->ipython<9->ipympl) (0.2.3)\r\n```\n:::\n:::\n\n\n::: {#17900b4d .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:27.361662Z\",\"start_time\":\"2021-01-15T09:51:27.167569Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=79}\n``` {.python .cell-code}\nimport ipywidgets as widgets\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n%matplotlib widget\n%matplotlib inline\n\nx = np.linspace(0, 50, 1000)\n\n@widgets.interact(intercept=(-5, 5, 1.), slope=(0, 1, .05))\ndef update(intercept=0.0, slope=0.5):\n    plt.scatter(df[\"total_bill\"], df[\"tip\"])\n    plt.plot(x, intercept + slope * x, color=\"red\")\n    plt.xlim((0, 50))\n    plt.ylim((0, 10))\n    plt.xlabel(\"total_bill\", fontsize=12)\n    plt.ylabel(\"tip\", fontsize=12)\n```\n\n::: {.cell-output .cell-output-display}\n```{.json}\n{\"model_id\":\"a30c5199b03947098d134754c58c3cfc\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n```\n:::\n:::\n\n\nThis is kind of tedious to do this by hand... it would be nice to come up with an **automated** way of doing this. Moreover:\n\n- We are using a **linear** function, while something more complicated (such as a polynomial) might be better\n- More importantly, we use **only** the `total_bill` column to predict the `tip`, while we know about many other things\n\n::: {#7c8ff058 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:27.383439Z\",\"start_time\":\"2021-01-15T09:51:27.364363Z\"}' execution_count=80}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[80], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span><span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## One-hot encoding of categorical variables\n\nWe can't perform computations (products and sums) with columns containing **categorical** variables. So, we can't use them like this to predict the `tip`.\nWe need to **convert** them to numbers somehow.\n\nThe most classical approach for this is **one-hot encoding** (or \"create dummies\" or \"binarize\") of the categorical variables, which can be easily achieved with `pandas.get_dummies`\n\nWhy *one-hot* ? See [wikipedia](https://en.wikipedia.org/wiki/One-hot) for a plausible explanation\n\n::: {#18f7a57f .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:57:27.607858Z\",\"start_time\":\"2021-01-15T09:57:27.563562Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=81}\n``` {.python .cell-code}\ndf_one_hot = pd.get_dummies(df, prefix_sep='#')\ndf_one_hot.head(5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[81], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> df_one_hot <span style=\"color:rgb(98,98,98)\">=</span> pd<span style=\"color:rgb(98,98,98)\">.</span>get_dummies(<span class=\"ansi-yellow-bg\">df</span>, prefix_sep<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">#</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> df_one_hot<span style=\"color:rgb(98,98,98)\">.</span>head(<span style=\"color:rgb(98,98,98)\">5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nOnly the categorical columns have been one-hot encoded. For instance, the `\"day\"` column is replaced by 4 columns named `\"day#Thur\"`, `\"day#Fri\"`, `\"day#Sat\"`, `\"day#Sun\"`, since `\"day\"` has 4 modalities (see next line).\n\n::: {#febbb6f1 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:27.433926Z\",\"start_time\":\"2021-01-15T09:51:27.426358Z\"}' execution_count=82}\n``` {.python .cell-code}\ndf['day'].unique()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[82], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>unique()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9b8e793e .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:27.442464Z\",\"start_time\":\"2021-01-15T09:51:27.436439Z\"}' execution_count=83}\n``` {.python .cell-code}\ndf_one_hot.dtypes\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[83], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df_one_hot</span><span style=\"color:rgb(98,98,98)\">.</span>dtypes\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_one_hot' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Pitfall. Colinearities with one-hot encoding\n\nSums over dummies for `sex`, `smoker`, `day`, `time` and `size` are all equal to one (by constrution of the one-hot encoded vectors).\n\n- Leads to **colinearities** in the matrix of features\n- It is **much harder** to train a linear regressor when the columns of the features matrix has colinearities\n\n::: {#7886df72 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:27.456985Z\",\"start_time\":\"2021-01-15T09:51:27.445235Z\"}' execution_count=84}\n``` {.python .cell-code}\nday_cols = [col for col in df_one_hot.columns if col.startswith(\"day\")]\ndf_one_hot[day_cols].head()\ndf_one_hot[day_cols].sum(axis=1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[84], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> day_cols <span style=\"color:rgb(98,98,98)\">=</span> [col <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> col <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">df_one_hot</span><span style=\"color:rgb(98,98,98)\">.</span>columns <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> col<span style=\"color:rgb(98,98,98)\">.</span>startswith(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>)]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> df_one_hot[day_cols]<span style=\"color:rgb(98,98,98)\">.</span>head()\n<span class=\"ansi-green-fg ansi-bold\">      3</span> df_one_hot[day_cols]<span style=\"color:rgb(98,98,98)\">.</span>sum(axis<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_one_hot' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#fdecb565 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:27.466975Z\",\"start_time\":\"2021-01-15T09:51:27.459209Z\"}' execution_count=85}\n``` {.python .cell-code}\nall(df_one_hot[day_cols].sum(axis=1) == 1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[85], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">all</span>(<span class=\"ansi-yellow-bg\">df_one_hot</span>[day_cols]<span style=\"color:rgb(98,98,98)\">.</span>sum(axis<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>) <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_one_hot' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe most standard solution is to remove a modality (i.e. remove a one-hot encoding vector). Simply achieved by specifying `drop_first=True` in the `get_dummies` function.\n\n::: {#1d4bc9cd .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:27.477837Z\",\"start_time\":\"2021-01-15T09:51:27.469797Z\"}' execution_count=86}\n``` {.python .cell-code}\ndf[\"day\"].unique()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[86], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">day</span><span style=\"color:rgb(175,0,0)\">\"</span>]<span style=\"color:rgb(98,98,98)\">.</span>unique()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#778f575f .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:51:27.516588Z\",\"start_time\":\"2021-01-15T09:51:27.480318Z\"}' execution_count=87}\n``` {.python .cell-code}\npd.get_dummies(df, prefix_sep='#', drop_first=True).head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[87], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> pd<span style=\"color:rgb(98,98,98)\">.</span>get_dummies(<span class=\"ansi-yellow-bg\">df</span>, prefix_sep<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">#</span><span style=\"color:rgb(175,0,0)\">'</span>, drop_first<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNow, if a categorical feature has $K$ modalities, we use only $K-1$ dummies.\nFor instance, there is no more `sex#Female` binary column. \n\n**Question.** So, a linear regression won't fit a weight for `sex#Female`. But, where do the model weights of the dropped binary columns go ?\n\n**Answer.** They just \"go\" to the **intercept**: interpretation of the population bias depends on the \"dropped\" one-hot encodings.\n\nSo, we actually fit\n\n$$\n\\begin{align*}\n\\texttt{tip} \\approx b &+ w_1 \\times \\texttt{total_bill}\n+ w_2 \\times \\texttt{size} \\\\\n&+ w_3 \\times \\texttt{sex#Male}\n+ w_4 \\times \\texttt{smoker#Yes} \\\\\n&+ w_5 \\times \\texttt{day#Sat}\n+ w_6 \\times \\texttt{day#Sun}\n+ w_7 \\times \\texttt{day#Thur} \\\\\n&+ w_8 \\times \\texttt{time#Lunch}\n\\end{align*}\n$$\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /usr/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.3\n  widgets: \n---\n",
    "supporting": [
      "notebook03_pandas_files"
    ],
    "filters": []
  }
}