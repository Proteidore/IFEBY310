{
  "hash": "002e3bcb25adc6e201b83cc769b4504e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Introduction to `pandas`\njupyter: python3\n---\n\n\n\nThe `pandas` library (https://pandas.pydata.org) is one of the most used tool at the disposal of people working with data in `python` today.\n\n- It allows to **crunch data** easily\n- It mainly provides a `DataFrame` object (a **table of data**) with a huge set of functionalities\n\n\n## Why ?\n\nThrough `pandas`, you get acquainted with your data by **analyzing** it \n\n- What's the average, median, max, or min of each column?\n- Does column A correlate with column B?\n- What does the distribution of data in column C look like?\n\n## Why  (con't) ?\n\nyou get acquainted with your data by **cleaning** and  **transforming** it \n\n- Removing missing values, filter rows or columns using some criteria\n- Store the cleaned, transformed data back into virtually any format or database\n- Data visualization (when combined `matplotlib` or `seaborn` or others)\n\n## Where ?\n\n`pandas` is a central component of the `python` \"stack\" for data science\n\n- `pandas` is built on top of `numpy`\n- often used in conjunction with other libraries\n- a `DataFrame` is often fed to plotting functions or machine learning algorithms (such as `scikit-learn`)\n- Well-interfaced with `jupyter`, leading to a nice interactive environment for data exploration and modeling\n\n## Core components of pandas\n\nThe two primary components of pandas are the `Series` and `DataFrame`.\n\n- A `Series` is essentially a column\n\n- A `DataFrame` is a multi-dimensional table made up of a collection of `Series` with equal length\n\n## Creating a `DataFrame` from scratch\n\n::: {#5a860d9e .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\nfruits = {\n    \"apples\": [3, 2, 0, 1],\n    \"oranges\": [0, 3, 7, 2]\n}\n\ndf_fruits = pd.DataFrame(fruits)\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#c8da6580 .cell execution_count=2}\n``` {.python .cell-code}\ntype(df_fruits)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {#b6974afc .cell execution_count=3}\n``` {.python .cell-code}\ndf_fruits[\"apples\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n0    3\n1    2\n2    0\n3    1\nName: apples, dtype: int64\n```\n:::\n:::\n\n\n::: {#4160860b .cell execution_count=4}\n``` {.python .cell-code}\ntype(df_fruits[\"apples\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\npandas.core.series.Series\n```\n:::\n:::\n\n\n## Indexing\n\n- By default, a `DataFrame` uses a contiguous index\n- But what if we want to say **who** buys the fruits ?\n\n::: {#939608c8 .cell execution_count=5}\n``` {.python .cell-code}\ndf_fruits = pd.DataFrame(fruits, index=[\"Daniel\", \"Sean\", \"Pierce\", \"Roger\"])\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `.loc` versus `.iloc`\n\n- `.loc` **loc**ates by name\n- `.iloc` **loc**ates by numerical **i**ndex\n\n::: {#d8b30e49 .cell execution_count=6}\n``` {.python .cell-code}\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#7fd3a93b .cell execution_count=7}\n``` {.python .cell-code}\n# What's in Sean's basket ?\ndf_fruits.loc['Sean']\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\napples     2\noranges    3\nName: Sean, dtype: int64\n```\n:::\n:::\n\n\n::: {#9be9f233 .cell execution_count=8}\n``` {.python .cell-code}\n# Who has oranges ?\ndf_fruits.loc[:, 'oranges']\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nDaniel    0\nSean      3\nPierce    7\nRoger     2\nName: oranges, dtype: int64\n```\n:::\n:::\n\n\n::: {#5b856cca .cell execution_count=9}\n``` {.python .cell-code}\n# How many apples in Pierce's basket ?\ndf_fruits.loc['Pierce', 'apples']\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nnp.int64(0)\n```\n:::\n:::\n\n\n::: {#d35aca7b .cell execution_count=10}\n``` {.python .cell-code}\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#e32f18a4 .cell execution_count=11}\n``` {.python .cell-code}\ndf_fruits.iloc[2, 1]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nnp.int64(7)\n```\n:::\n:::\n\n\n## Main attributes and methods of a `DataFrame`\n\nA `DataFrame` has many **attributes**\n\n::: {#6df405d0 .cell execution_count=12}\n``` {.python .cell-code}\ndf_fruits.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nIndex(['apples', 'oranges'], dtype='object')\n```\n:::\n:::\n\n\n::: {#3faae736 .cell execution_count=13}\n``` {.python .cell-code}\ndf_fruits.index\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nIndex(['Daniel', 'Sean', 'Pierce', 'Roger'], dtype='object')\n```\n:::\n:::\n\n\n::: {#6ee8718d .cell execution_count=14}\n``` {.python .cell-code}\ndf_fruits.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\napples     int64\noranges    int64\ndtype: object\n```\n:::\n:::\n\n\nA `DataFrame` has many **methods**\n\n::: {#0359af2c .cell execution_count=15}\n``` {.python .cell-code}\ndf_fruits.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 4 entries, Daniel to Roger\nData columns (total 2 columns):\n #   Column   Non-Null Count  Dtype\n---  ------   --------------  -----\n 0   apples   4 non-null      int64\n 1   oranges  4 non-null      int64\ndtypes: int64(2)\nmemory usage: 268.0+ bytes\n```\n:::\n:::\n\n\n::: {#c16ec542 .cell execution_count=16}\n``` {.python .cell-code}\ndf_fruits.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4.000000</td>\n      <td>4.00000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.500000</td>\n      <td>3.00000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.290994</td>\n      <td>2.94392</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.750000</td>\n      <td>1.50000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.500000</td>\n      <td>2.50000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.250000</td>\n      <td>4.00000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.000000</td>\n      <td>7.00000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Missing values\n\nWhat if we don't know how many apples are in Sean's basket ?\n\n::: {#169256ec .cell execution_count=17}\n``` {.python .cell-code}\ndf_fruits.loc['Sean', 'apples'] = None\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#d228da68 .cell execution_count=18}\n``` {.python .cell-code}\ndf_fruits.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3.000000</td>\n      <td>4.00000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.333333</td>\n      <td>3.00000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.527525</td>\n      <td>2.94392</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.500000</td>\n      <td>1.50000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000</td>\n      <td>2.50000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.000000</td>\n      <td>4.00000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.000000</td>\n      <td>7.00000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote that `count` is **3** for apples now, since we have 1 missing value among the 4\n\n\n::: {.callout-note}\n\nTo review the members of objects of class `pandas.DataFrame`, `dir()` and module `inspect` are convenient. \n:::\n\n::: {#4a994e67 .cell execution_count=19}\n``` {.python .cell-code}\n[x for x in dir(df_fruits) if not x.startswith('_') and not callable(x)]\n```\n:::\n\n\n::: {#963785db .cell execution_count=20}\n``` {.python .cell-code}\nimport inspect\n\n# Get a list of methods\nmembres = inspect.getmembers(df_fruits)\n\nmethod_names = [m[0] for m in membres \n    if callable(m[1]) and not m[0].startswith('_')]\n\nprint(method_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['abs', 'add', 'add_prefix', 'add_suffix', 'agg', 'aggregate', 'align', 'all', 'any', 'apply', 'applymap', 'asfreq', 'asof', 'assign', 'astype', 'at_time', 'backfill', 'between_time', 'bfill', 'bool', 'boxplot', 'clip', 'combine', 'combine_first', 'compare', 'convert_dtypes', 'copy', 'corr', 'corrwith', 'count', 'cov', 'cummax', 'cummin', 'cumprod', 'cumsum', 'describe', 'diff', 'div', 'divide', 'dot', 'drop', 'drop_duplicates', 'droplevel', 'dropna', 'duplicated', 'eq', 'equals', 'eval', 'ewm', 'expanding', 'explode', 'ffill', 'fillna', 'filter', 'first', 'first_valid_index', 'floordiv', 'from_dict', 'from_records', 'ge', 'get', 'groupby', 'gt', 'head', 'hist', 'idxmax', 'idxmin', 'iloc', 'infer_objects', 'info', 'insert', 'interpolate', 'isetitem', 'isin', 'isna', 'isnull', 'items', 'iterrows', 'itertuples', 'join', 'keys', 'kurt', 'kurtosis', 'last', 'last_valid_index', 'le', 'loc', 'lt', 'map', 'mask', 'max', 'mean', 'median', 'melt', 'memory_usage', 'merge', 'min', 'mod', 'mode', 'mul', 'multiply', 'ne', 'nlargest', 'notna', 'notnull', 'nsmallest', 'nunique', 'pad', 'pct_change', 'pipe', 'pivot', 'pivot_table', 'plot', 'pop', 'pow', 'prod', 'product', 'quantile', 'query', 'radd', 'rank', 'rdiv', 'reindex', 'reindex_like', 'rename', 'rename_axis', 'reorder_levels', 'replace', 'resample', 'reset_index', 'rfloordiv', 'rmod', 'rmul', 'rolling', 'round', 'rpow', 'rsub', 'rtruediv', 'sample', 'select_dtypes', 'sem', 'set_axis', 'set_flags', 'set_index', 'shift', 'skew', 'sort_index', 'sort_values', 'squeeze', 'stack', 'std', 'sub', 'subtract', 'sum', 'swapaxes', 'swaplevel', 'tail', 'take', 'to_clipboard', 'to_csv', 'to_dict', 'to_excel', 'to_feather', 'to_gbq', 'to_hdf', 'to_html', 'to_json', 'to_latex', 'to_markdown', 'to_numpy', 'to_orc', 'to_parquet', 'to_period', 'to_pickle', 'to_records', 'to_sql', 'to_stata', 'to_string', 'to_timestamp', 'to_xarray', 'to_xml', 'transform', 'transpose', 'truediv', 'truncate', 'tz_convert', 'tz_localize', 'unstack', 'update', 'value_counts', 'var', 'where', 'xs']\n```\n:::\n:::\n\n\n::: {#021457c2 .cell execution_count=21}\n``` {.python .cell-code}\nothers = [x for x in membres\n    if not callable(x[1])]\n\n[x[0] for x in others if not x[0].startswith('_')]\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n['T',\n 'apples',\n 'at',\n 'attrs',\n 'axes',\n 'columns',\n 'dtypes',\n 'empty',\n 'flags',\n 'iat',\n 'index',\n 'ndim',\n 'oranges',\n 'shape',\n 'size',\n 'style',\n 'values']\n```\n:::\n:::\n\n\n## Adding a column\n\nOoooops, we forgot about the bananas !\n\n::: {#38936169 .cell execution_count=22}\n``` {.python .cell-code}\ndf_fruits[\"bananas\"] = [0, 2, 1, 6]\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Adding a column with the date\n\nAnd we forgot the dates !\n\n::: {#a134c37c .cell execution_count=23}\n``` {.python .cell-code}\ndf_fruits['time'] = [\n    \"2020/10/08 12:13\", \"2020/10/07 11:37\", \n    \"2020/10/10 14:07\", \"2020/10/09 10:51\"\n]\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2020/10/08 12:13</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2020/10/07 11:37</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2020/10/10 14:07</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2020/10/09 10:51</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#820655ae .cell execution_count=24}\n``` {.python .cell-code}\ndf_fruits.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\napples     float64\noranges      int64\nbananas      int64\ntime        object\ndtype: object\n```\n:::\n:::\n\n\n::: {#34c490b2 .cell execution_count=25}\n``` {.python .cell-code}\ntype(df_fruits.loc[\"Roger\", \"time\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nstr\n```\n:::\n:::\n\n\nIt is not a date but a string (`str`) ! So we convert this column to something called `datetime`  \n\n::: {#6577dd4f .cell execution_count=26}\n``` {.python .cell-code}\ndf_fruits[\"time\"] = pd.to_datetime(df_fruits[\"time\"])\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2020-10-08 12:13:00</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2020-10-07 11:37:00</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#58638cd1 .cell execution_count=27}\n``` {.python .cell-code}\ndf_fruits.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\napples            float64\noranges             int64\nbananas             int64\ntime       datetime64[ns]\ndtype: object\n```\n:::\n:::\n\n\n::: {.callout-note}\n\nEvery data science framework implements some `datetime` handling scheme. For Python see [Python official documentation on `datetime` module](https://docs.python.org/3/library/datetime.html#module-datetime)\n\n:::\n\nWhat if we want to keep only the baskets after (including) October, 9th ?\n\n::: {#369456c0 .cell execution_count=28}\n``` {.python .cell-code}\ndf_fruits.loc[df_fruits[\"time\"] >= pd.Timestamp(\"2020/10/09\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Slices and subsets of rows or columns\n\n::: {#fe71c7e2 .cell execution_count=29}\n``` {.python .cell-code}\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2020-10-08 12:13:00</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2020-10-07 11:37:00</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#488e9aa9 .cell execution_count=30}\n``` {.python .cell-code}\ndf_fruits.loc[:, \"oranges\":\"time\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>0</td>\n      <td>0</td>\n      <td>2020-10-08 12:13:00</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>3</td>\n      <td>2</td>\n      <td>2020-10-07 11:37:00</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>7</td>\n      <td>1</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>2</td>\n      <td>6</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#29dbd815 .cell execution_count=31}\n``` {.python .cell-code}\ndf_fruits.loc[\"Daniel\":\"Sean\", \"apples\":\"bananas\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#887ad41d .cell execution_count=32}\n``` {.python .cell-code}\ndf_fruits[[\"apples\", \"time\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>2020-10-08 12:13:00</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>2020-10-07 11:37:00</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Write our data to a CSV file\n\nWhat if we want to write the file ?\n\n::: {#079df0b5 .cell execution_count=33}\n``` {.python .cell-code}\ndf_fruits\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>apples</th>\n      <th>oranges</th>\n      <th>bananas</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Daniel</th>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2020-10-08 12:13:00</td>\n    </tr>\n    <tr>\n      <th>Sean</th>\n      <td>NaN</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2020-10-07 11:37:00</td>\n    </tr>\n    <tr>\n      <th>Pierce</th>\n      <td>0.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2020-10-10 14:07:00</td>\n    </tr>\n    <tr>\n      <th>Roger</th>\n      <td>1.0</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2020-10-09 10:51:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#6b278c76 .cell execution_count=34}\n``` {.python .cell-code}\ndf_fruits.to_csv(\"fruits.csv\")\n```\n:::\n\n\n::: {#00054cbf .cell execution_count=35}\n``` {.python .cell-code}\n# Use !dir on windows\n!ls -alh | grep fru\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-rw-rw-r--  1 boucheron boucheron  163 mars  10 16:54 fruits.csv\r\n```\n:::\n:::\n\n\n::: {#9acf9a2b .cell execution_count=36}\n``` {.python .cell-code}\n!head -n 5 fruits.csv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n,apples,oranges,bananas,time\r\nDaniel,3.0,0,0,2020-10-08 12:13:00\r\nSean,,3,2,2020-10-07 11:37:00\r\nPierce,0.0,7,1,2020-10-10 14:07:00\r\nRoger,1.0,2,6,2020-10-09 10:51:00\r\n```\n:::\n:::\n\n\n## Reading data and working with it\n\n\n\n::: {.callout-note}\n\nThe `tips` dataset comes through [Kaggle](https://www.kaggle.com/code/sanjanabasu/tips-dataset/input)\n\n> This dataset is a treasure trove of information from a collection of case studies for business statistics. Special thanks to Bryant and Smith for their diligent work:\n\n> Bryant, P. G. and Smith, M (1995) Practical Data Analysis: Case Studies in Business Statistics. Homewood, IL: Richard D. Irwin Publishing.\n\n> You can also access this dataset now through the Python package Seaborn.\n\n:::\n\nIt contains data about a restaurant: the bill, tip and some informations about the customers.\n\n::: {.callout-note}\n\n### A toy extraction pattern\n\nA data pipeline usually starts with Extraction, that is gathering data from some source, possibly in a galaxy far, far awy. Here follows a toy extraction pattern\n\n- obtain the data from some `URL` using package `requests`\n- save the data on the hard drive\n- load the data using Pandas \n\n::: {#c66fe9fb .cell execution_count=37}\n``` {.python .cell-code}\nimport requests\nimport os\n\n# The path containing your notebook\npath_data = './'\n# The name of the file\nfilename = 'tips.csv'\n\nif os.path.exists(os.path.join(path_data, filename)):\n    print('The file %s already exists.' % os.path.join(path_data, filename))\nelse:\n    url = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/refs/heads/master/tips.csv'\n    r = requests.get(url)\n    with open(os.path.join(path_data, filename), 'wb') as f:\n        f.write(r.content)\n    print('Downloaded file %s.' % os.path.join(path_data, filename))\n```\n:::\n\n\n::: {#02d6ac82 .cell execution_count=38}\n``` {.python .cell-code}\ndf = pd.read_csv(\n    \"tips.csv\", \n    delimiter=\",\"\n)\n```\n:::\n\n\n:::\n\nThe data can be obtained from package `seaborn`.\n\n::: {#ed0584bd .cell execution_count=39}\n``` {.python .cell-code}\nimport seaborn as sns\n\nsns_ds = sns.get_dataset_names()\n\n'tips' in sns_ds\n\ndf = sns.load_dataset('tips')\n```\n:::\n\n\n::: {#ec0a33df .cell execution_count=40}\n``` {.python .cell-code}\n# `.head()` shows the first rows of the dataframe\ndf.head(n=10)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>smoker</th>\n      <th>day</th>\n      <th>time</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>25.29</td>\n      <td>4.71</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8.77</td>\n      <td>2.00</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>26.88</td>\n      <td>3.12</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>15.04</td>\n      <td>1.96</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>14.78</td>\n      <td>3.23</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#81772bf5 .cell execution_count=41}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   total_bill  244 non-null    float64 \n 1   tip         244 non-null    float64 \n 2   sex         244 non-null    category\n 3   smoker      244 non-null    category\n 4   day         244 non-null    category\n 5   time        244 non-null    category\n 6   size        244 non-null    int64   \ndtypes: category(4), float64(2), int64(1)\nmemory usage: 7.4 KB\n```\n:::\n:::\n\n\n::: {#f40e2a82 .cell execution_count=42}\n``` {.python .cell-code}\ndf.loc[42, \"day\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n'Sun'\n```\n:::\n:::\n\n\n::: {#23cd4747 .cell execution_count=43}\n``` {.python .cell-code}\ntype(df.loc[42, \"day\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\nstr\n```\n:::\n:::\n\n\nBy default, columns that are non-numerical contain strings (`str` type)\n\n## The `category` type\n\nAn important type in `pandas` is `category` for variables that are **non-numerical**\n\n**Pro tip.** It's always a good idea to tell `pandas` which columns should be imported as **categorical**\n\nSo, let's read again the file specifying some `dtype`s to the `read_csv` function\n\n::: {#3d8b4ef3 .cell execution_count=44}\n``` {.python .cell-code}\ndtypes = {\n    \"sex\": \"category\",\n    \"smoker\": \"category\",\n    \"day\": \"category\",\n    \"time\": \"category\"\n} \n\ndf = pd.read_csv(\"tips.csv\", dtype=dtypes)\n```\n:::\n\n\n::: {#64bd0dfe .cell execution_count=45}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\ntotal_bill     float64\ntip            float64\nsex           category\nsmoker        category\nday           category\ntime          category\nsize             int64\ndtype: object\n```\n:::\n:::\n\n\n## Computing statistics\n\n::: {#03e1bb6b .cell execution_count=46}\n``` {.python .cell-code}\n# The describe method only shows statistics for the numerical columns by default\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>244.000000</td>\n      <td>244.000000</td>\n      <td>244.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>19.785943</td>\n      <td>2.998279</td>\n      <td>2.569672</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>8.902412</td>\n      <td>1.383638</td>\n      <td>0.951100</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>3.070000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>13.347500</td>\n      <td>2.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>17.795000</td>\n      <td>2.900000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>24.127500</td>\n      <td>3.562500</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>50.810000</td>\n      <td>10.000000</td>\n      <td>6.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#6d9f1ee9 .cell execution_count=47}\n``` {.python .cell-code}\n# We use the include=\"all\" option to see everything\ndf.describe(include=\"all\")\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>smoker</th>\n      <th>day</th>\n      <th>time</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>244.000000</td>\n      <td>244.000000</td>\n      <td>244</td>\n      <td>244</td>\n      <td>244</td>\n      <td>244</td>\n      <td>244.000000</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>157</td>\n      <td>151</td>\n      <td>87</td>\n      <td>176</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>19.785943</td>\n      <td>2.998279</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.569672</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>8.902412</td>\n      <td>1.383638</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.951100</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>3.070000</td>\n      <td>1.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>13.347500</td>\n      <td>2.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>17.795000</td>\n      <td>2.900000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>24.127500</td>\n      <td>3.562500</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>50.810000</td>\n      <td>10.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>6.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#d367c454 .cell execution_count=48}\n``` {.python .cell-code}\n# Correlation between the numerical columns\ndf.corr(numeric_only = True)\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>total_bill</th>\n      <td>1.000000</td>\n      <td>0.675734</td>\n      <td>0.598315</td>\n    </tr>\n    <tr>\n      <th>tip</th>\n      <td>0.675734</td>\n      <td>1.000000</td>\n      <td>0.489299</td>\n    </tr>\n    <tr>\n      <th>size</th>\n      <td>0.598315</td>\n      <td>0.489299</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#3a7e8854 .cell execution_count=49}\n``` {.python .cell-code}\n?df.corr\n```\n:::\n\n\n# Data visualization with `matplotlib` and `seaborn`\n\nLet's show how we can use `matplotlib` and `seaborn` to visualize data contained in a `pandas` dataframe\n\n::: {#99b3814a .cell execution_count=50}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n## How do the tip depends on the total bill ?\n\n::: {#91c3ab8e .cell execution_count=51}\n``` {.python .cell-code}\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=df)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-52-output-1.png){width=562 height=566}\n:::\n:::\n\n\n## When do customers go to this restaurant ?\n\n::: {#e4f46128 .cell execution_count=52}\n``` {.python .cell-code}\nsns.countplot(x='day', hue=\"time\", data=df)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-53-output-1.png){width=585 height=429}\n:::\n:::\n\n\n## When do customers spend the most ?\n\n::: {#85241e95 .cell execution_count=53}\n``` {.python .cell-code}\nplt.figure(figsize=(7, 5))\nsns.boxplot(x='day', y='total_bill', hue='time', data=df)\nplt.legend(loc=\"upper left\")\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-54-output-1.png){width=585 height=429}\n:::\n:::\n\n\n::: {#7fbbf582 .cell execution_count=54}\n``` {.python .cell-code}\nplt.figure(figsize=(7, 5))\nsns.violinplot(x='day', y='total_bill', hue='time', split=True, data=df)\nplt.legend(loc=\"upper left\")\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-55-output-1.png){width=585 height=429}\n:::\n:::\n\n\n## Who spends the most ?\n\n::: {#18e745b2 .cell execution_count=55}\n``` {.python .cell-code}\nsns.boxplot(x='sex', y='total_bill', hue='smoker', data=df)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-56-output-1.png){width=585 height=429}\n:::\n:::\n\n\n## When should waiters want to work ?\n\n::: {#63bf5eff .cell execution_count=56}\n``` {.python .cell-code}\nsns.boxplot(x='day', y='tip', hue='time', data=df)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-57-output-1.png){width=585 height=429}\n:::\n:::\n\n\n::: {#3bb48079 .cell execution_count=57}\n``` {.python .cell-code}\nsns.violinplot(x='day', y='tip', hue='time', data=df)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-58-output-1.png){width=585 height=429}\n:::\n:::\n\n\n# Data processing with `pandas`\n\nLet us read again the `tips.csv` file\n\n::: {#3097c88b .cell execution_count=58}\n``` {.python .cell-code}\nimport pandas as pd\n\ndtypes = {\n    \"sex\": \"category\",\n    \"smoker\": \"category\",\n    \"day\": \"category\",\n    \"time\": \"category\"\n} \n\ndf = pd.read_csv(\"tips.csv\", dtype=dtypes)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>smoker</th>\n      <th>day</th>\n      <th>time</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Computations using `pandas` : broadcasting\n\nLet's add a column that contains the tip percentage\n\n::: {#940b9eb5 .cell execution_count=59}\n``` {.python .cell-code}\ndf[\"tip_percentage\"] = df[\"tip\"] / df[\"total_bill\"]\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>smoker</th>\n      <th>day</th>\n      <th>time</th>\n      <th>size</th>\n      <th>tip_percentage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n      <td>0.059447</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n      <td>0.160542</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n      <td>0.166587</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n      <td>0.139780</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>4</td>\n      <td>0.146808</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe computation\n\n```{{python}}\ndf[\"tip\"] / df[\"total_bill\"]\n```\nuses a **broadcast** rule.\n\n- We can multiply, add, subtract, etc. together `numpy` arrays, `Series` or `pandas` dataframes when the computation **makes sense** in view of their respective **shape**\n\nThis principle is called **broadcast** or **broadcasting**.\n\n::: {.callout-note}\n\nBroadcasting is a key feature of `numpy` `ndarray`, see \n\n- [Numpy User's guide](https://numpy.org/doc/stable/user/basics.broadcasting.html)\n- [Pandas book](https://wesmckinney.com/book/advanced-numpy.html#numpy_broadcasting)\n\n:::\n\n::: {#369cd138 .cell execution_count=60}\n``` {.python .cell-code}\ndf[\"tip\"].shape, df[\"total_bill\"].shape\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n((244,), (244,))\n```\n:::\n:::\n\n\nThe `tip` and `total_bill`columns have the same `shape`, so broadcasting performs **pairwise division**.\n\nThis corresponds to the following \"hand-crafted\" approach with a `for` loop:\n\n::: {#170cf53f .cell execution_count=61}\n``` {.python .cell-code}\nfor i in range(df.shape[0]):\n    df.loc[i, \"tip_percentage\"] = df.loc[i, \"tip\"] / df.loc[i, \"total_bill\"]\n```\n:::\n\n\nBut using such a loop is: \n\n- longer to write\n- less readable \n- prone to mistakes\n- and *slower* :(\n\n*NEVER* use `Python` for-loops unless you need to !\n\n::: {#b2c21950 .cell execution_count=62}\n``` {.python .cell-code}\n%%timeit -n 10\nfor i in range(df.shape[0]):\n    df.loc[i, \"tip_percentage\"] = df.loc[i, \"tip\"] / df.loc[i, \"total_bill\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n23.2 ms ± 58.7 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```\n:::\n:::\n\n\n::: {#1f3fb1a0 .cell execution_count=63}\n``` {.python .cell-code}\n%%timeit -n 10\ndf[\"tip_percentage\"] = df[\"tip\"] / df[\"total_bill\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n73.8 μs ± 14.1 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```\n:::\n:::\n\n\nThe `for` loop is $\\approx$ **100 times slower** ! (even worse on larger data)\n\n### Pitfall. Changing values in a `DataFrame`\n\nWhen you want to change a value in a `DataFrame`, never use\n\n```python\ndf[\"tip_percentage\"].loc[i] = 42\n```\n\nbut use\n\n```python\ndf.loc[i, \"tip_percentage\"] = 42\n```\n\n::: {.callout-caution}\n\nUse a **single** `loc` or `iloc` statement. The first version **might not work**: it might modify a copy of the column and not the dataframe itself !\n\n:::\n\nAnother example of broadcasting is:\n\n::: {#1abb4f19 .cell execution_count=64}\n``` {.python .cell-code}\n(100 * df[[\"tip_percentage\"]]).head()\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tip_percentage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.944673</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>16.054159</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>16.658734</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13.978041</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>14.680765</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nwhere we multiplied **each entry** of the `tip_percentage` column by 100.\n\n::: {.callout-note}\n\n### Remark \n\nNote the difference between\n\n\n```python\ndf[['tip_percentage']]\n```\n\nwhich returns a `DataFrame` containing only the `tip_percentage` column and\n\n```python\ndf['tip_percentage']\n```\n\nwhich returns a `Series` containing the data of the `tip_percentage` column\n\n:::\n\n\n## Some more plots\n\n### How do the tip percentages relates to the total bill ?\n\n::: {#e48ec0ee .cell execution_count=65}\n``` {.python .cell-code}\nsns.jointplot(\n    x=\"total_bill\", \n    y=\"tip_percentage\", \n    data=df\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-66-output-1.png){width=566 height=566}\n:::\n:::\n\n\n### Who tips best ?\n\n::: {#52c14c70 .cell execution_count=66}\n``` {.python .cell-code}\nsns.boxplot(\n    x='sex', \n    y='tip_percentage', \n    hue='smoker', \n    data=df\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-67-output-1.png){width=589 height=429}\n:::\n:::\n\n\n### Who tips best without the `tip_percentage` outliers ?\n\n::: {#e341bf2b .cell execution_count=67}\n``` {.python .cell-code}\nsns.boxplot(\n    x='sex', \n    y='tip_percentage', \n    hue='smoker', \n    data=df.loc[df[\"tip_percentage\"] <= 0.3]\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-68-output-1.png){width=597 height=429}\n:::\n:::\n\n\nObject identity\n\n::: {#ecb28f3e .cell execution_count=68}\n``` {.python .cell-code}\nid(df)\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\n131038972871552\n```\n:::\n:::\n\n\n## The all-mighty `groupby` and `aggregate`\n\nMany computations can be formulated as a **groupby** followed by and **aggregation**.\n\n### What is the mean `tip` and `tip percentage` each day ?\n\n::: {#66c96b1b .cell execution_count=69}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>smoker</th>\n      <th>day</th>\n      <th>time</th>\n      <th>size</th>\n      <th>tip_percentage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n      <td>0.059447</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n      <td>0.160542</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n      <td>0.166587</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n      <td>0.139780</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>4</td>\n      <td>0.146808</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#d4fced8d .cell execution_count=70}\n``` {.python .cell-code}\ntry:\n\n    df.groupby(\"day\", observed=True).mean()\nexcept TypeError:\n    print('TypeError: category dtype does not support aggregation \"mean\"')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTypeError: category dtype does not support aggregation \"mean\"\n```\n:::\n:::\n\n\nBut we do not care about the `size` column here, so we can use instead\n\n::: {#d983d50d .cell execution_count=71}\n``` {.python .cell-code}\n(\n    df[[\"total_bill\", \"tip\", \"tip_percentage\", \"day\"]]\n        .groupby(\"day\")\n        .mean()\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_276531/1740663163.py:3: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>tip_percentage</th>\n    </tr>\n    <tr>\n      <th>day</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Fri</th>\n      <td>17.151579</td>\n      <td>2.734737</td>\n      <td>0.169913</td>\n    </tr>\n    <tr>\n      <th>Sat</th>\n      <td>20.441379</td>\n      <td>2.993103</td>\n      <td>0.153152</td>\n    </tr>\n    <tr>\n      <th>Sun</th>\n      <td>21.410000</td>\n      <td>3.255132</td>\n      <td>0.166897</td>\n    </tr>\n    <tr>\n      <th>Thur</th>\n      <td>17.682742</td>\n      <td>2.771452</td>\n      <td>0.161276</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIf we want to be more precise, we can `groupby` using several columns\n\n::: {#71108c10 .cell execution_count=72}\n``` {.python .cell-code}\n(\n    df[[\"total_bill\", \"tip\", \"tip_percentage\", \"day\", \"time\"]]   # selection\n        .groupby([\"day\",\"time\"])                                # partition\n        .mean()                                                  # aggregation\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_276531/391063870.py:3: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=69}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>tip_percentage</th>\n    </tr>\n    <tr>\n      <th>day</th>\n      <th>time</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Fri</th>\n      <th>Dinner</th>\n      <td>19.663333</td>\n      <td>2.940000</td>\n      <td>0.158916</td>\n    </tr>\n    <tr>\n      <th>Lunch</th>\n      <td>12.845714</td>\n      <td>2.382857</td>\n      <td>0.188765</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Sat</th>\n      <th>Dinner</th>\n      <td>20.441379</td>\n      <td>2.993103</td>\n      <td>0.153152</td>\n    </tr>\n    <tr>\n      <th>Lunch</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Sun</th>\n      <th>Dinner</th>\n      <td>21.410000</td>\n      <td>3.255132</td>\n      <td>0.166897</td>\n    </tr>\n    <tr>\n      <th>Lunch</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Thur</th>\n      <th>Dinner</th>\n      <td>18.780000</td>\n      <td>3.000000</td>\n      <td>0.159744</td>\n    </tr>\n    <tr>\n      <th>Lunch</th>\n      <td>17.664754</td>\n      <td>2.767705</td>\n      <td>0.161301</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-note}\n\n### Remarks \n\n- We obtain a `DataFrame` with a two-level indexing: on the `day` and the `time`\n- Groups must be homogeneous: we have `NaN` values for empty groups (e.g. `Sat`, `Lunch`)\n\n:::\n\n\n### Pro tip\n\nSometimes, it is more convenient to get the groups as columns instead of a multi-level index.\n\nFor this, use `reset_index`:\n\n::: {#2d3bdd2d .cell execution_count=73}\n``` {.python .cell-code}\n(\n    df[[\"total_bill\", \"tip\", \"tip_percentage\", \"day\", \"time\"]]   # selection\n        .groupby([\"day\", \"time\"])                                # partition\n        .mean() # aggregation\n        .reset_index()   # ako ungroup\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_276531/835267922.py:3: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=70}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>day</th>\n      <th>time</th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>tip_percentage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Fri</td>\n      <td>Dinner</td>\n      <td>19.663333</td>\n      <td>2.940000</td>\n      <td>0.158916</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Fri</td>\n      <td>Lunch</td>\n      <td>12.845714</td>\n      <td>2.382857</td>\n      <td>0.188765</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>20.441379</td>\n      <td>2.993103</td>\n      <td>0.153152</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Sat</td>\n      <td>Lunch</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>21.410000</td>\n      <td>3.255132</td>\n      <td>0.166897</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Sun</td>\n      <td>Lunch</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Thur</td>\n      <td>Dinner</td>\n      <td>18.780000</td>\n      <td>3.000000</td>\n      <td>0.159744</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Thur</td>\n      <td>Lunch</td>\n      <td>17.664754</td>\n      <td>2.767705</td>\n      <td>0.161301</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Another pro tip: care about code readers\n\nComputations with pandas can include many operations that are **pipelined** until the final computation.\n\nPipelining many operations is good practice and perfectly normal, but in order to make the code readable you can put it between parenthesis (`python` expression) as follows:\n\n::: {#cd083814 .cell execution_count=74}\n``` {.python .cell-code}\n(\n    df[[\"total_bill\", \"tip\", \"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .mean()\n    .reset_index()\n    # and on top of all this we sort the dataframe with respect \n    # to the tip_percentage\n    .sort_values(\"tip_percentage\")\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_276531/45053252.py:3: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=71}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>day</th>\n      <th>time</th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>tip_percentage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>20.441379</td>\n      <td>2.993103</td>\n      <td>0.153152</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Fri</td>\n      <td>Dinner</td>\n      <td>19.663333</td>\n      <td>2.940000</td>\n      <td>0.158916</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Thur</td>\n      <td>Dinner</td>\n      <td>18.780000</td>\n      <td>3.000000</td>\n      <td>0.159744</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Thur</td>\n      <td>Lunch</td>\n      <td>17.664754</td>\n      <td>2.767705</td>\n      <td>0.161301</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>21.410000</td>\n      <td>3.255132</td>\n      <td>0.166897</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Fri</td>\n      <td>Lunch</td>\n      <td>12.845714</td>\n      <td>2.382857</td>\n      <td>0.188765</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Sat</td>\n      <td>Lunch</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Sun</td>\n      <td>Lunch</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Displaying a `DataFrame` with `style`\n\nNow, we can answer, with style, to the question: what are the average tip percentages along the week ?\n\n::: {#654effed .cell execution_count=75}\n``` {.python .cell-code}\n(\n    df[[\"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .mean()\n    # At the end of the pipeline you can use .style\n    .style\n    # Print numerical values as percentages \n    .format(\"{:.2%}\")\n    .background_gradient()\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_276531/838795167.py:3: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=72}\n```{=html}\n<style type=\"text/css\">\n#T_2296d_row0_col0 {\n  background-color: #e4e1ef;\n  color: #000000;\n}\n#T_2296d_row1_col0 {\n  background-color: #023858;\n  color: #f1f1f1;\n}\n#T_2296d_row2_col0 {\n  background-color: #fff7fb;\n  color: #000000;\n}\n#T_2296d_row3_col0, #T_2296d_row5_col0 {\n  background-color: #000000;\n  color: #f1f1f1;\n}\n#T_2296d_row4_col0 {\n  background-color: #a2bcda;\n  color: #000000;\n}\n#T_2296d_row6_col0 {\n  background-color: #dfddec;\n  color: #000000;\n}\n#T_2296d_row7_col0 {\n  background-color: #d5d5e8;\n  color: #000000;\n}\n</style>\n<table id=\"T_2296d\">\n  <thead>\n    <tr>\n      <th class=\"blank\" >&nbsp;</th>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_2296d_level0_col0\" class=\"col_heading level0 col0\" >tip_percentage</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >day</th>\n      <th class=\"index_name level1\" >time</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_2296d_level0_row0\" class=\"row_heading level0 row0\" rowspan=\"2\">Fri</th>\n      <th id=\"T_2296d_level1_row0\" class=\"row_heading level1 row0\" >Dinner</th>\n      <td id=\"T_2296d_row0_col0\" class=\"data row0 col0\" >15.89%</td>\n    </tr>\n    <tr>\n      <th id=\"T_2296d_level1_row1\" class=\"row_heading level1 row1\" >Lunch</th>\n      <td id=\"T_2296d_row1_col0\" class=\"data row1 col0\" >18.88%</td>\n    </tr>\n    <tr>\n      <th id=\"T_2296d_level0_row2\" class=\"row_heading level0 row2\" rowspan=\"2\">Sat</th>\n      <th id=\"T_2296d_level1_row2\" class=\"row_heading level1 row2\" >Dinner</th>\n      <td id=\"T_2296d_row2_col0\" class=\"data row2 col0\" >15.32%</td>\n    </tr>\n    <tr>\n      <th id=\"T_2296d_level1_row3\" class=\"row_heading level1 row3\" >Lunch</th>\n      <td id=\"T_2296d_row3_col0\" class=\"data row3 col0\" >nan%</td>\n    </tr>\n    <tr>\n      <th id=\"T_2296d_level0_row4\" class=\"row_heading level0 row4\" rowspan=\"2\">Sun</th>\n      <th id=\"T_2296d_level1_row4\" class=\"row_heading level1 row4\" >Dinner</th>\n      <td id=\"T_2296d_row4_col0\" class=\"data row4 col0\" >16.69%</td>\n    </tr>\n    <tr>\n      <th id=\"T_2296d_level1_row5\" class=\"row_heading level1 row5\" >Lunch</th>\n      <td id=\"T_2296d_row5_col0\" class=\"data row5 col0\" >nan%</td>\n    </tr>\n    <tr>\n      <th id=\"T_2296d_level0_row6\" class=\"row_heading level0 row6\" rowspan=\"2\">Thur</th>\n      <th id=\"T_2296d_level1_row6\" class=\"row_heading level1 row6\" >Dinner</th>\n      <td id=\"T_2296d_row6_col0\" class=\"data row6 col0\" >15.97%</td>\n    </tr>\n    <tr>\n      <th id=\"T_2296d_level1_row7\" class=\"row_heading level1 row7\" >Lunch</th>\n      <td id=\"T_2296d_row7_col0\" class=\"data row7 col0\" >16.13%</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## Removing the `NaN` values\n\nBut the `NaN` values are somewhat annoying. Let's remove them\n\n::: {#32122b03 .cell execution_count=76}\n``` {.python .cell-code}\n(\n    df[[\"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .mean()\n    # We just add this from the previous pipeline\n    .dropna()\n    .style\n    .format(\"{:.2%}\")\n    .background_gradient()\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_276531/2662169510.py:3: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=73}\n```{=html}\n<style type=\"text/css\">\n#T_4fd50_row0_col0 {\n  background-color: #e4e1ef;\n  color: #000000;\n}\n#T_4fd50_row1_col0 {\n  background-color: #023858;\n  color: #f1f1f1;\n}\n#T_4fd50_row2_col0 {\n  background-color: #fff7fb;\n  color: #000000;\n}\n#T_4fd50_row3_col0 {\n  background-color: #a2bcda;\n  color: #000000;\n}\n#T_4fd50_row4_col0 {\n  background-color: #dfddec;\n  color: #000000;\n}\n#T_4fd50_row5_col0 {\n  background-color: #d5d5e8;\n  color: #000000;\n}\n</style>\n<table id=\"T_4fd50\">\n  <thead>\n    <tr>\n      <th class=\"blank\" >&nbsp;</th>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_4fd50_level0_col0\" class=\"col_heading level0 col0\" >tip_percentage</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >day</th>\n      <th class=\"index_name level1\" >time</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_4fd50_level0_row0\" class=\"row_heading level0 row0\" rowspan=\"2\">Fri</th>\n      <th id=\"T_4fd50_level1_row0\" class=\"row_heading level1 row0\" >Dinner</th>\n      <td id=\"T_4fd50_row0_col0\" class=\"data row0 col0\" >15.89%</td>\n    </tr>\n    <tr>\n      <th id=\"T_4fd50_level1_row1\" class=\"row_heading level1 row1\" >Lunch</th>\n      <td id=\"T_4fd50_row1_col0\" class=\"data row1 col0\" >18.88%</td>\n    </tr>\n    <tr>\n      <th id=\"T_4fd50_level0_row2\" class=\"row_heading level0 row2\" >Sat</th>\n      <th id=\"T_4fd50_level1_row2\" class=\"row_heading level1 row2\" >Dinner</th>\n      <td id=\"T_4fd50_row2_col0\" class=\"data row2 col0\" >15.32%</td>\n    </tr>\n    <tr>\n      <th id=\"T_4fd50_level0_row3\" class=\"row_heading level0 row3\" >Sun</th>\n      <th id=\"T_4fd50_level1_row3\" class=\"row_heading level1 row3\" >Dinner</th>\n      <td id=\"T_4fd50_row3_col0\" class=\"data row3 col0\" >16.69%</td>\n    </tr>\n    <tr>\n      <th id=\"T_4fd50_level0_row4\" class=\"row_heading level0 row4\" rowspan=\"2\">Thur</th>\n      <th id=\"T_4fd50_level1_row4\" class=\"row_heading level1 row4\" >Dinner</th>\n      <td id=\"T_4fd50_row4_col0\" class=\"data row4 col0\" >15.97%</td>\n    </tr>\n    <tr>\n      <th id=\"T_4fd50_level1_row5\" class=\"row_heading level1 row5\" >Lunch</th>\n      <td id=\"T_4fd50_row5_col0\" class=\"data row5 col0\" >16.13%</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nNow, we see when `tip_percentage` is maximal. But what about the standard deviation?\n\n- We used only `.mean()` for now, but we can use several aggregating function using `.agg()`\n\n::: {#14224b3f .cell execution_count=77}\n``` {.python .cell-code}\n(\n    df[[\"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .agg([\"mean\", \"std\"])   # we feed `agg`  with a list of names of callables \n    .dropna()\n    .style\n    .format(\"{:.2%}\")\n    .background_gradient()\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_276531/3957220442.py:3: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=74}\n```{=html}\n<style type=\"text/css\">\n#T_d35ff_row0_col0 {\n  background-color: #e4e1ef;\n  color: #000000;\n}\n#T_d35ff_row0_col1 {\n  background-color: #e0deed;\n  color: #000000;\n}\n#T_d35ff_row1_col0, #T_d35ff_row3_col1 {\n  background-color: #023858;\n  color: #f1f1f1;\n}\n#T_d35ff_row1_col1 {\n  background-color: #e7e3f0;\n  color: #000000;\n}\n#T_d35ff_row2_col0, #T_d35ff_row4_col1 {\n  background-color: #fff7fb;\n  color: #000000;\n}\n#T_d35ff_row2_col1 {\n  background-color: #cacee5;\n  color: #000000;\n}\n#T_d35ff_row3_col0 {\n  background-color: #a2bcda;\n  color: #000000;\n}\n#T_d35ff_row4_col0 {\n  background-color: #d5d5e8;\n  color: #000000;\n}\n</style>\n<table id=\"T_d35ff\">\n  <thead>\n    <tr>\n      <th class=\"blank\" >&nbsp;</th>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_d35ff_level0_col0\" class=\"col_heading level0 col0\" colspan=\"2\">tip_percentage</th>\n    </tr>\n    <tr>\n      <th class=\"blank\" >&nbsp;</th>\n      <th class=\"blank level1\" >&nbsp;</th>\n      <th id=\"T_d35ff_level1_col0\" class=\"col_heading level1 col0\" >mean</th>\n      <th id=\"T_d35ff_level1_col1\" class=\"col_heading level1 col1\" >std</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >day</th>\n      <th class=\"index_name level1\" >time</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_d35ff_level0_row0\" class=\"row_heading level0 row0\" rowspan=\"2\">Fri</th>\n      <th id=\"T_d35ff_level1_row0\" class=\"row_heading level1 row0\" >Dinner</th>\n      <td id=\"T_d35ff_row0_col0\" class=\"data row0 col0\" >15.89%</td>\n      <td id=\"T_d35ff_row0_col1\" class=\"data row0 col1\" >4.70%</td>\n    </tr>\n    <tr>\n      <th id=\"T_d35ff_level1_row1\" class=\"row_heading level1 row1\" >Lunch</th>\n      <td id=\"T_d35ff_row1_col0\" class=\"data row1 col0\" >18.88%</td>\n      <td id=\"T_d35ff_row1_col1\" class=\"data row1 col1\" >4.59%</td>\n    </tr>\n    <tr>\n      <th id=\"T_d35ff_level0_row2\" class=\"row_heading level0 row2\" >Sat</th>\n      <th id=\"T_d35ff_level1_row2\" class=\"row_heading level1 row2\" >Dinner</th>\n      <td id=\"T_d35ff_row2_col0\" class=\"data row2 col0\" >15.32%</td>\n      <td id=\"T_d35ff_row2_col1\" class=\"data row2 col1\" >5.13%</td>\n    </tr>\n    <tr>\n      <th id=\"T_d35ff_level0_row3\" class=\"row_heading level0 row3\" >Sun</th>\n      <th id=\"T_d35ff_level1_row3\" class=\"row_heading level1 row3\" >Dinner</th>\n      <td id=\"T_d35ff_row3_col0\" class=\"data row3 col0\" >16.69%</td>\n      <td id=\"T_d35ff_row3_col1\" class=\"data row3 col1\" >8.47%</td>\n    </tr>\n    <tr>\n      <th id=\"T_d35ff_level0_row4\" class=\"row_heading level0 row4\" >Thur</th>\n      <th id=\"T_d35ff_level1_row4\" class=\"row_heading level1 row4\" >Lunch</th>\n      <td id=\"T_d35ff_row4_col0\" class=\"data row4 col0\" >16.13%</td>\n      <td id=\"T_d35ff_row4_col1\" class=\"data row4 col1\" >3.90%</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nAnd we can use also `.describe()` as aggregation function. Moreover we\n- use the `subset` option to specify which column we want to style\n- we use `(\"tip_percentage\", \"count\")` to access multi-level index\n\n::: {#ef281a68 .cell execution_count=78}\n``` {.python .cell-code}\n(\n    df[[\"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .describe()    # all-purpose summarising function\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_276531/3924876303.py:3: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=75}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th></th>\n      <th colspan=\"8\" halign=\"left\">tip_percentage</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>day</th>\n      <th>time</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Fri</th>\n      <th>Dinner</th>\n      <td>12.0</td>\n      <td>0.158916</td>\n      <td>0.047024</td>\n      <td>0.103555</td>\n      <td>0.123613</td>\n      <td>0.144742</td>\n      <td>0.179199</td>\n      <td>0.263480</td>\n    </tr>\n    <tr>\n      <th>Lunch</th>\n      <td>7.0</td>\n      <td>0.188765</td>\n      <td>0.045885</td>\n      <td>0.117735</td>\n      <td>0.167289</td>\n      <td>0.187735</td>\n      <td>0.210996</td>\n      <td>0.259314</td>\n    </tr>\n    <tr>\n      <th>Sat</th>\n      <th>Dinner</th>\n      <td>87.0</td>\n      <td>0.153152</td>\n      <td>0.051293</td>\n      <td>0.035638</td>\n      <td>0.123863</td>\n      <td>0.151832</td>\n      <td>0.188271</td>\n      <td>0.325733</td>\n    </tr>\n    <tr>\n      <th>Sun</th>\n      <th>Dinner</th>\n      <td>76.0</td>\n      <td>0.166897</td>\n      <td>0.084739</td>\n      <td>0.059447</td>\n      <td>0.119982</td>\n      <td>0.161103</td>\n      <td>0.187889</td>\n      <td>0.710345</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Thur</th>\n      <th>Dinner</th>\n      <td>1.0</td>\n      <td>0.159744</td>\n      <td>NaN</td>\n      <td>0.159744</td>\n      <td>0.159744</td>\n      <td>0.159744</td>\n      <td>0.159744</td>\n      <td>0.159744</td>\n    </tr>\n    <tr>\n      <th>Lunch</th>\n      <td>61.0</td>\n      <td>0.161301</td>\n      <td>0.038972</td>\n      <td>0.072961</td>\n      <td>0.137741</td>\n      <td>0.153846</td>\n      <td>0.193424</td>\n      <td>0.266312</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#0d6eef38 .cell execution_count=79}\n``` {.python .cell-code}\n(\n    df[[\"tip_percentage\", \"day\", \"time\"]]\n    .groupby([\"day\", \"time\"])\n    .describe()\n    .dropna()\n    .style\n    .bar(subset=[(\"tip_percentage\", \"count\")])\n    .background_gradient(subset=[(\"tip_percentage\", \"50%\")])\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_276531/673231177.py:3: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=76}\n```{=html}\n<style type=\"text/css\">\n#T_446d6_row0_col0 {\n  width: 10em;\n  background: linear-gradient(90deg, #d65f5f 13.8%, transparent 13.8%);\n}\n#T_446d6_row0_col5 {\n  background-color: #fff7fb;\n  color: #000000;\n}\n#T_446d6_row1_col0 {\n  width: 10em;\n  background: linear-gradient(90deg, #d65f5f 8.0%, transparent 8.0%);\n}\n#T_446d6_row1_col5 {\n  background-color: #023858;\n  color: #f1f1f1;\n}\n#T_446d6_row2_col0 {\n  width: 10em;\n  background: linear-gradient(90deg, #d65f5f 100.0%, transparent 100.0%);\n}\n#T_446d6_row2_col5 {\n  background-color: #e3e0ee;\n  color: #000000;\n}\n#T_446d6_row3_col0 {\n  width: 10em;\n  background: linear-gradient(90deg, #d65f5f 87.4%, transparent 87.4%);\n}\n#T_446d6_row3_col5 {\n  background-color: #a4bcda;\n  color: #000000;\n}\n#T_446d6_row4_col0 {\n  width: 10em;\n  background: linear-gradient(90deg, #d65f5f 70.1%, transparent 70.1%);\n}\n#T_446d6_row4_col5 {\n  background-color: #d9d8ea;\n  color: #000000;\n}\n</style>\n<table id=\"T_446d6\">\n  <thead>\n    <tr>\n      <th class=\"blank\" >&nbsp;</th>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_446d6_level0_col0\" class=\"col_heading level0 col0\" colspan=\"8\">tip_percentage</th>\n    </tr>\n    <tr>\n      <th class=\"blank\" >&nbsp;</th>\n      <th class=\"blank level1\" >&nbsp;</th>\n      <th id=\"T_446d6_level1_col0\" class=\"col_heading level1 col0\" >count</th>\n      <th id=\"T_446d6_level1_col1\" class=\"col_heading level1 col1\" >mean</th>\n      <th id=\"T_446d6_level1_col2\" class=\"col_heading level1 col2\" >std</th>\n      <th id=\"T_446d6_level1_col3\" class=\"col_heading level1 col3\" >min</th>\n      <th id=\"T_446d6_level1_col4\" class=\"col_heading level1 col4\" >25%</th>\n      <th id=\"T_446d6_level1_col5\" class=\"col_heading level1 col5\" >50%</th>\n      <th id=\"T_446d6_level1_col6\" class=\"col_heading level1 col6\" >75%</th>\n      <th id=\"T_446d6_level1_col7\" class=\"col_heading level1 col7\" >max</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >day</th>\n      <th class=\"index_name level1\" >time</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n      <th class=\"blank col3\" >&nbsp;</th>\n      <th class=\"blank col4\" >&nbsp;</th>\n      <th class=\"blank col5\" >&nbsp;</th>\n      <th class=\"blank col6\" >&nbsp;</th>\n      <th class=\"blank col7\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_446d6_level0_row0\" class=\"row_heading level0 row0\" rowspan=\"2\">Fri</th>\n      <th id=\"T_446d6_level1_row0\" class=\"row_heading level1 row0\" >Dinner</th>\n      <td id=\"T_446d6_row0_col0\" class=\"data row0 col0\" >12.000000</td>\n      <td id=\"T_446d6_row0_col1\" class=\"data row0 col1\" >0.158916</td>\n      <td id=\"T_446d6_row0_col2\" class=\"data row0 col2\" >0.047024</td>\n      <td id=\"T_446d6_row0_col3\" class=\"data row0 col3\" >0.103555</td>\n      <td id=\"T_446d6_row0_col4\" class=\"data row0 col4\" >0.123613</td>\n      <td id=\"T_446d6_row0_col5\" class=\"data row0 col5\" >0.144742</td>\n      <td id=\"T_446d6_row0_col6\" class=\"data row0 col6\" >0.179199</td>\n      <td id=\"T_446d6_row0_col7\" class=\"data row0 col7\" >0.263480</td>\n    </tr>\n    <tr>\n      <th id=\"T_446d6_level1_row1\" class=\"row_heading level1 row1\" >Lunch</th>\n      <td id=\"T_446d6_row1_col0\" class=\"data row1 col0\" >7.000000</td>\n      <td id=\"T_446d6_row1_col1\" class=\"data row1 col1\" >0.188765</td>\n      <td id=\"T_446d6_row1_col2\" class=\"data row1 col2\" >0.045885</td>\n      <td id=\"T_446d6_row1_col3\" class=\"data row1 col3\" >0.117735</td>\n      <td id=\"T_446d6_row1_col4\" class=\"data row1 col4\" >0.167289</td>\n      <td id=\"T_446d6_row1_col5\" class=\"data row1 col5\" >0.187735</td>\n      <td id=\"T_446d6_row1_col6\" class=\"data row1 col6\" >0.210996</td>\n      <td id=\"T_446d6_row1_col7\" class=\"data row1 col7\" >0.259314</td>\n    </tr>\n    <tr>\n      <th id=\"T_446d6_level0_row2\" class=\"row_heading level0 row2\" >Sat</th>\n      <th id=\"T_446d6_level1_row2\" class=\"row_heading level1 row2\" >Dinner</th>\n      <td id=\"T_446d6_row2_col0\" class=\"data row2 col0\" >87.000000</td>\n      <td id=\"T_446d6_row2_col1\" class=\"data row2 col1\" >0.153152</td>\n      <td id=\"T_446d6_row2_col2\" class=\"data row2 col2\" >0.051293</td>\n      <td id=\"T_446d6_row2_col3\" class=\"data row2 col3\" >0.035638</td>\n      <td id=\"T_446d6_row2_col4\" class=\"data row2 col4\" >0.123863</td>\n      <td id=\"T_446d6_row2_col5\" class=\"data row2 col5\" >0.151832</td>\n      <td id=\"T_446d6_row2_col6\" class=\"data row2 col6\" >0.188271</td>\n      <td id=\"T_446d6_row2_col7\" class=\"data row2 col7\" >0.325733</td>\n    </tr>\n    <tr>\n      <th id=\"T_446d6_level0_row3\" class=\"row_heading level0 row3\" >Sun</th>\n      <th id=\"T_446d6_level1_row3\" class=\"row_heading level1 row3\" >Dinner</th>\n      <td id=\"T_446d6_row3_col0\" class=\"data row3 col0\" >76.000000</td>\n      <td id=\"T_446d6_row3_col1\" class=\"data row3 col1\" >0.166897</td>\n      <td id=\"T_446d6_row3_col2\" class=\"data row3 col2\" >0.084739</td>\n      <td id=\"T_446d6_row3_col3\" class=\"data row3 col3\" >0.059447</td>\n      <td id=\"T_446d6_row3_col4\" class=\"data row3 col4\" >0.119982</td>\n      <td id=\"T_446d6_row3_col5\" class=\"data row3 col5\" >0.161103</td>\n      <td id=\"T_446d6_row3_col6\" class=\"data row3 col6\" >0.187889</td>\n      <td id=\"T_446d6_row3_col7\" class=\"data row3 col7\" >0.710345</td>\n    </tr>\n    <tr>\n      <th id=\"T_446d6_level0_row4\" class=\"row_heading level0 row4\" >Thur</th>\n      <th id=\"T_446d6_level1_row4\" class=\"row_heading level1 row4\" >Lunch</th>\n      <td id=\"T_446d6_row4_col0\" class=\"data row4 col0\" >61.000000</td>\n      <td id=\"T_446d6_row4_col1\" class=\"data row4 col1\" >0.161301</td>\n      <td id=\"T_446d6_row4_col2\" class=\"data row4 col2\" >0.038972</td>\n      <td id=\"T_446d6_row4_col3\" class=\"data row4 col3\" >0.072961</td>\n      <td id=\"T_446d6_row4_col4\" class=\"data row4 col4\" >0.137741</td>\n      <td id=\"T_446d6_row4_col5\" class=\"data row4 col5\" >0.153846</td>\n      <td id=\"T_446d6_row4_col6\" class=\"data row4 col6\" >0.193424</td>\n      <td id=\"T_446d6_row4_col7\" class=\"data row4 col7\" >0.266312</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## Supervised learning of `tip` based on the `total_bill` \n\nAs an example of very simple **machine-learning** problem, let us try to understand how we can predict `tip` based on `total_bill`.\n\n::: {#f285a8e6 .cell execution_count=80}\n``` {.python .cell-code}\nimport numpy as np\n\nplt.scatter(df[\"total_bill\"], df[\"tip\"])\nplt.xlabel(\"total_bill\", fontsize=12)\nplt.ylabel(\"tip\", fontsize=12)\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\nText(0, 0.5, 'tip')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-81-output-2.png){width=587 height=432}\n:::\n:::\n\n\nThere's a rough **linear** dependence between the two. Let us try to find it by hand!<br>\nNamely, we look for numbers $b$ and $w$ such that\n\n```\ntip ≈ b + w × total_bill\n```\n\nfor all the examples of pairs of `(tip, total_bill)` we observe in the data.\n\nIn **machine learning**, we say that this is a very simple example of a **supervised learning** problem (here it is a regression problem), where `tip` is the **label** and where `total_bill` is the (only) **feature**, for which we intend to use a **linear predictor**.\n\n::: {#77c4a5c2 .cell execution_count=81}\n``` {.python .cell-code}\nplt.scatter(df[\"total_bill\"], df[\"tip\"])\nplt.xlabel(\"total_bill\", fontsize=12)\nplt.ylabel(\"tip\", fontsize=12)\n\nslope = 1.0\nintercept = 0.0\n\nx = np.linspace(0, 50, 1000)\nplt.plot(x, intercept + slope * x, color=\"red\")\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-82-output-1.png){width=587 height=432}\n:::\n:::\n\n\n### A more interactive way \n\nThis might require\n\n::: {#22abac4a .cell execution_count=82}\n``` {.python .cell-code}\n# !pip install ipympl\n```\n:::\n\n\n::: {#4e1c40b6 .cell execution_count=83}\n``` {.python .cell-code}\nimport ipywidgets as widgets\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n%matplotlib widget\n%matplotlib inline\n\nx = np.linspace(0, 50, 1000)\n\n@widgets.interact(intercept=(-5, 5, 1.), slope=(0, 1, .05))\ndef update(intercept=0.0, slope=0.5):\n    plt.scatter(df[\"total_bill\"], df[\"tip\"])\n    plt.plot(x, intercept + slope * x, color=\"red\")\n    plt.xlim((0, 50))\n    plt.ylim((0, 10))\n    plt.xlabel(\"total_bill\", fontsize=12)\n    plt.ylabel(\"tip\", fontsize=12)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"9fdce814b8d24e4d83bfdbe8509ea621\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](notebook03_pandas_files/figure-html/cell-84-output-2.png){}\n:::\n:::\n\n\nThis is kind of tedious to do this by hand... it would be nice to come up with an **automated** way of doing this. Moreover:\n\n- We are using a **linear** function, while something more complicated (such as a polynomial) might be better\n- More importantly, we use **only** the `total_bill` column to predict the `tip`, while we know about many other things\n\n::: {#9da00827 .cell execution_count=84}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>smoker</th>\n      <th>day</th>\n      <th>time</th>\n      <th>size</th>\n      <th>tip_percentage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n      <td>0.059447</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n      <td>0.160542</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n      <td>0.166587</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n      <td>0.139780</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>4</td>\n      <td>0.146808</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## One-hot encoding of categorical variables\n\nWe can't perform computations (products and sums) with columns containing **categorical** variables. So, we can't use them like this to predict the `tip`.\nWe need to **convert** them to numbers somehow.\n\nThe most classical approach for this is **one-hot encoding** (or \"create dummies\" or \"binarize\") of the categorical variables, which can be easily achieved with `pandas.get_dummies`\n\nWhy *one-hot* ? See [wikipedia](https://en.wikipedia.org/wiki/One-hot) for a plausible explanation\n\n::: {#6cddbd70 .cell execution_count=85}\n``` {.python .cell-code}\ndf_one_hot = pd.get_dummies(df, prefix_sep='#')\ndf_one_hot.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>size</th>\n      <th>tip_percentage</th>\n      <th>sex#Female</th>\n      <th>sex#Male</th>\n      <th>smoker#No</th>\n      <th>smoker#Yes</th>\n      <th>day#Fri</th>\n      <th>day#Sat</th>\n      <th>day#Sun</th>\n      <th>day#Thur</th>\n      <th>time#Dinner</th>\n      <th>time#Lunch</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>2</td>\n      <td>0.059447</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>3</td>\n      <td>0.160542</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>3</td>\n      <td>0.166587</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>2</td>\n      <td>0.139780</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>4</td>\n      <td>0.146808</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOnly the categorical columns have been one-hot encoded. For instance, the `\"day\"` column is replaced by 4 columns named `\"day#Thur\"`, `\"day#Fri\"`, `\"day#Sat\"`, `\"day#Sun\"`, since `\"day\"` has 4 modalities (see next line).\n\n::: {#65ecce26 .cell execution_count=86}\n``` {.python .cell-code}\ndf['day'].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=83}\n```\n['Sun', 'Sat', 'Thur', 'Fri']\nCategories (4, object): ['Fri', 'Sat', 'Sun', 'Thur']\n```\n:::\n:::\n\n\n::: {#db917a12 .cell execution_count=87}\n``` {.python .cell-code}\ndf_one_hot.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=84}\n```\ntotal_bill        float64\ntip               float64\nsize                int64\ntip_percentage    float64\nsex#Female           bool\nsex#Male             bool\nsmoker#No            bool\nsmoker#Yes           bool\nday#Fri              bool\nday#Sat              bool\nday#Sun              bool\nday#Thur             bool\ntime#Dinner          bool\ntime#Lunch           bool\ndtype: object\n```\n:::\n:::\n\n\n## Pitfall. Colinearities with one-hot encoding\n\nSums over dummies for `sex`, `smoker`, `day`, `time` and `size` are all equal to one (by constrution of the one-hot encoded vectors).\n\n- Leads to **colinearities** in the matrix of features\n- It is **much harder** to train a linear regressor when the columns of the features matrix has colinearities\n\n::: {#88bcb704 .cell execution_count=88}\n``` {.python .cell-code}\nday_cols = [col for col in df_one_hot.columns if col.startswith(\"day\")]\ndf_one_hot[day_cols].head()\ndf_one_hot[day_cols].sum(axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=85}\n```\n0      1\n1      1\n2      1\n3      1\n4      1\n      ..\n239    1\n240    1\n241    1\n242    1\n243    1\nLength: 244, dtype: int64\n```\n:::\n:::\n\n\n::: {#0a763bf7 .cell execution_count=89}\n``` {.python .cell-code}\nall(df_one_hot[day_cols].sum(axis=1) == 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=86}\n```\nTrue\n```\n:::\n:::\n\n\nThe most standard solution is to remove a modality (i.e. remove a one-hot encoding vector). Simply achieved by specifying `drop_first=True` in the `get_dummies` function.\n\n::: {#f699a62f .cell execution_count=90}\n``` {.python .cell-code}\ndf[\"day\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=87}\n```\n['Sun', 'Sat', 'Thur', 'Fri']\nCategories (4, object): ['Fri', 'Sat', 'Sun', 'Thur']\n```\n:::\n:::\n\n\n::: {#e70bb328 .cell execution_count=91}\n``` {.python .cell-code}\npd.get_dummies(df, prefix_sep='#', drop_first=True).head()\n```\n\n::: {.cell-output .cell-output-display execution_count=88}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>size</th>\n      <th>tip_percentage</th>\n      <th>sex#Male</th>\n      <th>smoker#Yes</th>\n      <th>day#Sat</th>\n      <th>day#Sun</th>\n      <th>day#Thur</th>\n      <th>time#Lunch</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>2</td>\n      <td>0.059447</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>3</td>\n      <td>0.160542</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>3</td>\n      <td>0.166587</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>2</td>\n      <td>0.139780</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>4</td>\n      <td>0.146808</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow, if a categorical feature has $K$ modalities, we use only $K-1$ dummies.\nFor instance, there is no more `sex#Female` binary column. \n\n**Question.** So, a linear regression won't fit a weight for `sex#Female`. But, where do the model weights of the dropped binary columns go ?\n\n**Answer.** They just \"go\" to the **intercept**: interpretation of the population bias depends on the \"dropped\" one-hot encodings.\n\nSo, we actually fit:\n$$\\begin{array}{rl} \\texttt{tip} \\approx b & + w_1 \\times \\texttt{total_bill} + w_2 \\times \\texttt{size} \\\\ & + w_3 \\times \\texttt{sex#Male} + w_4 \\times \\texttt{smoker#Yes} \\\\ & + w_5 \\times \\texttt{day#Sat} + w_6 \\times \\texttt{day#Sun} + w_7 \\times \\texttt{day#Thur} \\\\ & + w_8 \\times \\texttt{time#Lunch} \\end{array}$$\n\n",
    "supporting": [
      "notebook03_pandas_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"05939eed99f647baabf46f59fe07ca6e\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"0cb57745a8b84a31bfda0ed06d70c9a7\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"64cd3cdabec54074b2bf9b7a246b26d8\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"759104ebd42049609bb2041cf7733bf1\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatSliderModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatSliderModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"FloatSliderView\",\"behavior\":\"drag-tap\",\"continuous_update\":true,\"description\":\"slope\",\"description_allow_html\":false,\"disabled\":false,\"layout\":\"IPY_MODEL_64cd3cdabec54074b2bf9b7a246b26d8\",\"max\":1,\"min\":0,\"orientation\":\"horizontal\",\"readout\":true,\"readout_format\":\".2f\",\"step\":0.05,\"style\":\"IPY_MODEL_76c0db9db2e249f18fae23f17eb68cd6\",\"tabbable\":null,\"tooltip\":null,\"value\":0.5}},\"76c0db9db2e249f18fae23f17eb68cd6\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"SliderStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"SliderStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"description_width\":\"\",\"handle_color\":null}},\"795ebced220b4faf9ad74f26a0393f5d\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"SliderStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"SliderStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"description_width\":\"\",\"handle_color\":null}},\"9d4caf4968e143dfb2f075af53475b86\":{\"model_module\":\"@jupyter-widgets/output\",\"model_module_version\":\"1.0.0\",\"model_name\":\"OutputModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/output\",\"_model_module_version\":\"1.0.0\",\"_model_name\":\"OutputModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/output\",\"_view_module_version\":\"1.0.0\",\"_view_name\":\"OutputView\",\"layout\":\"IPY_MODEL_0cb57745a8b84a31bfda0ed06d70c9a7\",\"msg_id\":\"\",\"outputs\":[],\"tabbable\":null,\"tooltip\":null}},\"9fdce814b8d24e4d83bfdbe8509ea621\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"VBoxModel\",\"state\":{\"_dom_classes\":[\"widget-interact\"],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"VBoxModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"VBoxView\",\"box_style\":\"\",\"children\":[\"IPY_MODEL_cb155532e3e04795bed307f0e9e18486\",\"IPY_MODEL_759104ebd42049609bb2041cf7733bf1\",\"IPY_MODEL_9d4caf4968e143dfb2f075af53475b86\"],\"layout\":\"IPY_MODEL_05939eed99f647baabf46f59fe07ca6e\",\"tabbable\":null,\"tooltip\":null}},\"aac15dabcf0c4174b2d251d92b54d1a6\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"cb155532e3e04795bed307f0e9e18486\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatSliderModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatSliderModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"FloatSliderView\",\"behavior\":\"drag-tap\",\"continuous_update\":true,\"description\":\"intercept\",\"description_allow_html\":false,\"disabled\":false,\"layout\":\"IPY_MODEL_aac15dabcf0c4174b2d251d92b54d1a6\",\"max\":5,\"min\":-5,\"orientation\":\"horizontal\",\"readout\":true,\"readout_format\":\".2f\",\"step\":1,\"style\":\"IPY_MODEL_795ebced220b4faf9ad74f26a0393f5d\",\"tabbable\":null,\"tooltip\":null,\"value\":0}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}