{
  "hash": "f17f9a321bc7bfd640be3f3a7d70b99d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data preprocessing and visualisation of a credit scoring dataset\"\njupyter: python3\n---\n\n\n\nWe'll work on a dataset `gro.csv` for **credit scoring** that was proposed some years ago as a data challenge on some data challenge website.\nIt is a realistic and somewhat messy dataset that contains a lot of missing values, several types of features (dates, categories, continuous features), so that serious data cleaning and formating is required.\nThis dataset contains the following columns:\n\n| Column name          | Description |\n|:---------------------|:------------|\n| BirthDate            | Date of birth of the client |\n| Customer_Open_Date   | Creation date of the client's first account at the bankÂ |\n| Customer_Type        | Type of client (existing / new) | \n| Educational_Level    | Highest diploma |\n| Id_Customer          | Id of the client |\n| Marital_Status       | Family situation |\n| Nb_Of_Products       | Number of products held by the client |\n| Net_Annual_Income    | Annual revenue |\n| Number_Of_Dependant  | Number of dependents |\n| P_Client             | Non-disclosed feature |\n| Prod_Category        | Product category |\n| Prod_Closed_Date     | Closing date of the last product |\n| Prod_Decision_Date   | Decision date of the last agreement for a financing product |\n| Prod_Sub_Category    | Sub-category of the product |\n| Source               | Financing source (Branch or Sales) |\n| Type_Of_Residence    | Residential situation |\n| Y                    | Credit was granted (yes / no) |\n| Years_At_Business    | Number of year at the current job position |\n| Years_At_Residence   | Number of year at the current housing |\n\n# Your job\n\nRead the `gro.csv` dataset and work on it using `pandas`, `matplotlib` and `seaborn`.\n- The column separator in the CSV file is not `,` but `;` so you need to use the `sep` option in `pd.read_csv`\n- The categorical columns must be imported as `category` type \n- Something weird is going on with the `Net_Annual_Income` column... Try to  understand what is going on and try to correct the problem\n- Several columns are empty, we need to remove them (or not even read them)\n- Dates must be imported as dates and not strings\n- Remove rows with missing values\n\nMany of these things can be done right from the beginning, when reading the CSV file, through some options to the `pd.read_csv` function. You might need to read carefully its documentation in order to understand some useful options. Once you are happy with your importation and cleaning of the data, you can:\n- Use `matplotlib` and `pandas` to perform data visualization...\n- ... in order to understand visually the impact of some features on `Y` (credit was granted or not). For this, you need to decide on the plots that make sense for this and produce them\n\nWe will provide thorough explanations and code that performs all of this in subsequent sessions.\n\n\n# A quick and easy (but actually bad) import\n\nLet's import the data into a pandas dataframe, as simply as possible\nThe only thing we care about for now is the fact that the column separator \nis `';'` and not `','` as it should be in a `.csv` file.\n\n::: {#165ae45b .cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nimport os\n\n# The path containing your notebook\npath_data = './'\n# The name of the file\nfilename = 'gro.csv.gz'\n\nif os.path.exists(os.path.join(path_data, filename)):\n    print('The file %s already exists.' % os.path.join(path_data, filename))\nelse:\n    url = 'https://stephanegaiffas.github.io/big_data_course/data/gro.csv.gz'\n    r = requests.get(url)\n    with open(os.path.join(path_data, filename), 'wb') as f:\n        f.write(r.content)\n    print('Downloaded file %s.' % os.path.join(path_data, filename))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe file ./gro.csv.gz already exists.\n```\n:::\n:::\n\n\n::: {#ba229be8 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport pyspark.pandas as ps\nfrom pyspark.sql import SparkSession\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/boucheron/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/pandas/__init__.py:50: UserWarning:\n\n'PYARROW_IGNORE_TIMEZONE' environment variable was not set. It is required to set this environment variable to '1' in both driver and executor sides if you use pyarrow>=2.0.0. pandas-on-Spark will set it for you but it does not work if there is a Spark context already launched.\n\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AttributeError</span>                            Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">numpy</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">np</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pd</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">ps</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">sql</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> SparkSession\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/pandas/__init__.py:60</span>\n<span class=\"ansi-green-fg ansi-bold\">     57</span>     os<span style=\"color:rgb(98,98,98)\">.</span>environ[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">PYARROW_IGNORE_TIMEZONE</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">1</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">     59</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">frame</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> DataFrame\n<span class=\"ansi-green-fg\">---&gt; 60</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">indexes</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">base</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Index\n<span class=\"ansi-green-fg ansi-bold\">     61</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">indexes</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">category</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> CategoricalIndex\n<span class=\"ansi-green-fg ansi-bold\">     62</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">indexes</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">datetimes</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> DatetimeIndex\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/pandas/indexes/__init__.py:17</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Licensed to the Apache Software Foundation (ASF) under one or more</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># contributor license agreements.  See the NOTICE file distributed with</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     15</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># limitations under the License.</span>\n<span class=\"ansi-green-fg ansi-bold\">     16</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg\">---&gt; 17</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">indexes</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">base</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Index  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F401</span>\n<span class=\"ansi-green-fg ansi-bold\">     18</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">indexes</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">datetimes</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> DatetimeIndex  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F401</span>\n<span class=\"ansi-green-fg ansi-bold\">     19</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">indexes</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">multi</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> MultiIndex  <span style=\"font-style:italic;color:rgb(95,135,135)\"># noqa: F401</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/pandas/indexes/base.py:66</span>\n<span class=\"ansi-green-fg ansi-bold\">     64</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">frame</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> DataFrame\n<span class=\"ansi-green-fg ansi-bold\">     65</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">missing</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">indexes</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> MissingPandasLikeIndex\n<span class=\"ansi-green-fg\">---&gt; 66</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">series</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> Series, first_series\n<span class=\"ansi-green-fg ansi-bold\">     67</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">spark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">accessors</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> SparkIndexMethods\n<span class=\"ansi-green-fg ansi-bold\">     68</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">utils</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> (\n<span class=\"ansi-green-fg ansi-bold\">     69</span>     is_name_like_tuple,\n<span class=\"ansi-green-fg ansi-bold\">     70</span>     is_name_like_value,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     78</span>     log_advice,\n<span class=\"ansi-green-fg ansi-bold\">     79</span> )\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/pandas/series.py:118</span>\n<span class=\"ansi-green-fg ansi-bold\">    116</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">spark</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> functions <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> SF\n<span class=\"ansi-green-fg ansi-bold\">    117</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">spark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">accessors</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> SparkSeriesMethods\n<span class=\"ansi-green-fg\">--&gt; 118</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">strings</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> StringMethods\n<span class=\"ansi-green-fg ansi-bold\">    119</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">typedef</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> (\n<span class=\"ansi-green-fg ansi-bold\">    120</span>     infer_return_type,\n<span class=\"ansi-green-fg ansi-bold\">    121</span>     spark_type_to_pandas_dtype,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    124</span>     create_type_for_series_type,\n<span class=\"ansi-green-fg ansi-bold\">    125</span> )\n<span class=\"ansi-green-fg ansi-bold\">    126</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">typedef</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">typehints</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> as_spark_type\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/pandas/strings.py:44</span>\n<span class=\"ansi-green-fg ansi-bold\">     40</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">ps</span>\n<span class=\"ansi-green-fg ansi-bold\">     41</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">pyspark</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">pandas</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">.</span><span style=\"font-weight:bold;color:rgb(0,0,255)\">spark</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> functions <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> SF\n<span class=\"ansi-green-fg\">---&gt; 44</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">class</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(0,0,255)\" class=\"ansi-yellow-bg\">StringMethods</span><span class=\"ansi-yellow-bg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">     45</span> <span style=\"color:rgb(188,188,188)\" class=\"ansi-yellow-bg\">    </span><span style=\"font-style:italic;color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"\"\"String methods for pandas-on-Spark Series\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">     47</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"font-weight:bold;color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">def</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,0,255)\" class=\"ansi-yellow-bg\">__init__</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">series</span><span class=\"ansi-yellow-bg\">:</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">ps.Series</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">:</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pyspark/pandas/strings.py:1332</span>, in <span class=\"ansi-cyan-fg\">StringMethods</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg ansi-bold\">   1328</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> s<span style=\"color:rgb(98,98,98)\">.</span>str<span style=\"color:rgb(98,98,98)\">.</span>ljust(width, fillchar)\n<span class=\"ansi-green-fg ansi-bold\">   1330</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_data<span style=\"color:rgb(98,98,98)\">.</span>pandas_on_spark<span style=\"color:rgb(98,98,98)\">.</span>transform_batch(pandas_ljust)\n<span class=\"ansi-green-fg\">-&gt; 1332</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">match</span>(<span style=\"color:rgb(0,135,0)\">self</span>, pat: <span style=\"color:rgb(0,135,0)\">str</span>, case: <span style=\"color:rgb(0,135,0)\">bool</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, flags: <span style=\"color:rgb(0,135,0)\">int</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">0</span>, na: Any <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">np</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">NaN</span>) <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">ps.Series</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1333</span> <span style=\"color:rgb(188,188,188)\">    </span><span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">   1334</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    Determine if each string matches a regular expression.</span>\n<span class=\"ansi-green-fg ansi-bold\">   1335</span> \n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1390</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    dtype: object</span>\n<span class=\"ansi-green-fg ansi-bold\">   1391</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">    \"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">   1393</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">pandas_match</span>(s) <span style=\"color:rgb(98,98,98)\">-</span><span style=\"color:rgb(98,98,98)\">&gt;</span> ps<span style=\"color:rgb(98,98,98)\">.</span>Series[<span style=\"color:rgb(0,135,0)\">bool</span>]:  <span style=\"font-style:italic;color:rgb(95,135,135)\"># type: ignore[no-untyped-def]</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/numpy/__init__.py:400</span>, in <span class=\"ansi-cyan-fg\">__getattr__</span><span class=\"ansi-blue-fg\">(attr)</span>\n<span class=\"ansi-green-fg ansi-bold\">    397</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">AttributeError</span>(__former_attrs__[attr], name<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>)\n<span class=\"ansi-green-fg ansi-bold\">    399</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> attr <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> __expired_attributes__:\n<span class=\"ansi-green-fg\">--&gt; 400</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">AttributeError</span>(\n<span class=\"ansi-green-fg ansi-bold\">    401</span>         <span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">`np.</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>attr<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">` was removed in the NumPy 2.0 release. </span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    402</span>         <span style=\"color:rgb(175,0,0)\">f</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>__expired_attributes__[attr]<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg ansi-bold\">    403</span>         name<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">    404</span>     )\n<span class=\"ansi-green-fg ansi-bold\">    406</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> attr <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">chararray</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg ansi-bold\">    407</span>     warnings<span style=\"color:rgb(98,98,98)\">.</span>warn(\n<span class=\"ansi-green-fg ansi-bold\">    408</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">`np.chararray` is deprecated and will be removed from </span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    409</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">the main namespace in the future. Use an array with a string </span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    410</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">or bytes dtype instead.</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"font-weight:bold;color:rgb(215,95,95)\">DeprecationWarning</span>, stacklevel<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">2</span>)\n\n<span class=\"ansi-red-fg\">AttributeError</span>: `np.NaN` was removed in the NumPy 2.0 release. Use `np.nan` instead.</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c963ef0e .cell execution_count=3}\n``` {.python .cell-code}\nfilename = \"gro.csv.gz\"\npdf = pd.read_csv(filename, sep=';')\npdf.head(n=5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">BadGzipFile</span>                               Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> filename <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">gro.csv.gz</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> pdf <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pd</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_csv</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filename</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">sep</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">;</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> pdf<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">5</span>)\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1026</span>, in <span class=\"ansi-cyan-fg\">read_csv</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1013</span> kwds_defaults <span style=\"color:rgb(98,98,98)\">=</span> _refine_defaults_read(\n<span class=\"ansi-green-fg ansi-bold\">   1014</span>     dialect,\n<span class=\"ansi-green-fg ansi-bold\">   1015</span>     delimiter,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1022</span>     dtype_backend<span style=\"color:rgb(98,98,98)\">=</span>dtype_backend,\n<span class=\"ansi-green-fg ansi-bold\">   1023</span> )\n<span class=\"ansi-green-fg ansi-bold\">   1024</span> kwds<span style=\"color:rgb(98,98,98)\">.</span>update(kwds_defaults)\n<span class=\"ansi-green-fg\">-&gt; 1026</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">_read</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filepath_or_buffer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:620</span>, in <span class=\"ansi-cyan-fg\">_read</span><span class=\"ansi-blue-fg\">(filepath_or_buffer, kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">    617</span> _validate_names(kwds<span style=\"color:rgb(98,98,98)\">.</span>get(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">names</span><span style=\"color:rgb(175,0,0)\">\"</span>, <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>))\n<span class=\"ansi-green-fg ansi-bold\">    619</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Create the parser.</span>\n<span class=\"ansi-green-fg\">--&gt; 620</span> parser <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">TextFileReader</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">filepath_or_buffer</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    622</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> chunksize <span style=\"font-weight:bold;color:rgb(175,0,255)\">or</span> iterator:\n<span class=\"ansi-green-fg ansi-bold\">    623</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> parser\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1620</span>, in <span class=\"ansi-cyan-fg\">TextFileReader.__init__</span><span class=\"ansi-blue-fg\">(self, f, engine, **kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1617</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>options[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">has_index_names</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> kwds[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">has_index_names</span><span style=\"color:rgb(175,0,0)\">\"</span>]\n<span class=\"ansi-green-fg ansi-bold\">   1619</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>handles: IOHandles <span style=\"color:rgb(98,98,98)\">|</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg\">-&gt; 1620</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_engine <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_make_engine</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">f</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">engine</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/readers.py:1898</span>, in <span class=\"ansi-cyan-fg\">TextFileReader._make_engine</span><span class=\"ansi-blue-fg\">(self, f, engine)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1895</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ValueError</span>(msg)\n<span class=\"ansi-green-fg ansi-bold\">   1897</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">-&gt; 1898</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">mapping</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-yellow-bg\">engine</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">f</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">options</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1899</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">Exception</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1900</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>handles <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>:\n\nFile <span class=\"ansi-green-fg\">~/Documents/IFEBY310/.venv/lib/python3.12/site-packages/pandas/io/parsers/c_parser_wrapper.py:93</span>, in <span class=\"ansi-cyan-fg\">CParserWrapper.__init__</span><span class=\"ansi-blue-fg\">(self, src, **kwds)</span>\n<span class=\"ansi-green-fg ansi-bold\">     90</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> kwds[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">dtype_backend</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">pyarrow</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg ansi-bold\">     91</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Fail here loudly instead of in cython after reading</span>\n<span class=\"ansi-green-fg ansi-bold\">     92</span>     import_optional_dependency(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">pyarrow</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">---&gt; 93</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_reader <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">parsers</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">TextReader</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">src</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwds</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     95</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>unnamed_cols <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_reader<span style=\"color:rgb(98,98,98)\">.</span>unnamed_cols\n<span class=\"ansi-green-fg ansi-bold\">     97</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># error: Cannot determine type of 'names'</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:574</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader.__cinit__</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:663</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._get_header</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:874</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._tokenize_rows</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:891</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.TextReader._check_tokenize_status</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">parsers.pyx:2053</span>, in <span class=\"ansi-cyan-fg\">pandas._libs.parsers.raise_parser_error</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.12/gzip.py:337</span>, in <span class=\"ansi-cyan-fg\">GzipFile.read1</span><span class=\"ansi-blue-fg\">(self, size)</span>\n<span class=\"ansi-green-fg ansi-bold\">    335</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> size <span style=\"color:rgb(98,98,98)\">&lt;</span> <span style=\"color:rgb(98,98,98)\">0</span>:\n<span class=\"ansi-green-fg ansi-bold\">    336</span>     size <span style=\"color:rgb(98,98,98)\">=</span> io<span style=\"color:rgb(98,98,98)\">.</span>DEFAULT_BUFFER_SIZE\n<span class=\"ansi-green-fg\">--&gt; 337</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_buffer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read1</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">size</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.12/_compression.py:68</span>, in <span class=\"ansi-cyan-fg\">DecompressReader.readinto</span><span class=\"ansi-blue-fg\">(self, b)</span>\n<span class=\"ansi-green-fg ansi-bold\">     66</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">readinto</span>(<span style=\"color:rgb(0,135,0)\">self</span>, b):\n<span class=\"ansi-green-fg ansi-bold\">     67</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> <span style=\"color:rgb(0,135,0)\">memoryview</span>(b) <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> view, view<span style=\"color:rgb(98,98,98)\">.</span>cast(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">B</span><span style=\"color:rgb(175,0,0)\">\"</span>) <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> byte_view:\n<span class=\"ansi-green-fg\">---&gt; 68</span>         data <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">len</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">byte_view</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">     69</span>         byte_view[:<span style=\"color:rgb(0,135,0)\">len</span>(data)] <span style=\"color:rgb(98,98,98)\">=</span> data\n<span class=\"ansi-green-fg ansi-bold\">     70</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">len</span>(data)\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.12/gzip.py:527</span>, in <span class=\"ansi-cyan-fg\">_GzipReader.read</span><span class=\"ansi-blue-fg\">(self, size)</span>\n<span class=\"ansi-green-fg ansi-bold\">    523</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_new_member:\n<span class=\"ansi-green-fg ansi-bold\">    524</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># If the _new_member flag is set, we have to</span>\n<span class=\"ansi-green-fg ansi-bold\">    525</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># jump to the next member, if there is one.</span>\n<span class=\"ansi-green-fg ansi-bold\">    526</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_init_read()\n<span class=\"ansi-green-fg\">--&gt; 527</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_read_gzip_header</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>:\n<span class=\"ansi-green-fg ansi-bold\">    528</span>         <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_size <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_pos\n<span class=\"ansi-green-fg ansi-bold\">    529</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">\"</span>\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.12/gzip.py:496</span>, in <span class=\"ansi-cyan-fg\">_GzipReader._read_gzip_header</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg ansi-bold\">    495</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> <span style=\"color:rgb(0,0,255)\">_read_gzip_header</span>(<span style=\"color:rgb(0,135,0)\">self</span>):\n<span class=\"ansi-green-fg\">--&gt; 496</span>     last_mtime <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">_read_gzip_header</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_fp</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    497</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> last_mtime <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>:\n<span class=\"ansi-green-fg ansi-bold\">    498</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>\n\nFile <span class=\"ansi-green-fg\">/usr/lib/python3.12/gzip.py:456</span>, in <span class=\"ansi-cyan-fg\">_read_gzip_header</span><span class=\"ansi-blue-fg\">(fp)</span>\n<span class=\"ansi-green-fg ansi-bold\">    453</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>\n<span class=\"ansi-green-fg ansi-bold\">    455</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> magic <span style=\"color:rgb(98,98,98)\">!=</span> <span style=\"color:rgb(175,0,0)\">b</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\037</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\213</span><span style=\"color:rgb(175,0,0)\">'</span>:\n<span class=\"ansi-green-fg\">--&gt; 456</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> BadGzipFile(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Not a gzipped file (</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">%r</span><span style=\"color:rgb(175,0,0)\">)</span><span style=\"color:rgb(175,0,0)\">'</span> <span style=\"color:rgb(98,98,98)\">%</span> magic)\n<span class=\"ansi-green-fg ansi-bold\">    458</span> (method, flag, last_mtime) <span style=\"color:rgb(98,98,98)\">=</span> struct<span style=\"color:rgb(98,98,98)\">.</span>unpack(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">&lt;BBIxx</span><span style=\"color:rgb(175,0,0)\">\"</span>, _read_exact(fp, <span style=\"color:rgb(98,98,98)\">8</span>))\n<span class=\"ansi-green-fg ansi-bold\">    459</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> method <span style=\"color:rgb(98,98,98)\">!=</span> <span style=\"color:rgb(98,98,98)\">8</span>:\n\n<span class=\"ansi-red-fg\">BadGzipFile</span>: Not a gzipped file (b'&lt;!')</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4b0da614 .cell execution_count=4}\n``` {.python .cell-code}\npsdf = ps.from_pandas(pdf)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> psdf <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">ps</span><span style=\"color:rgb(98,98,98)\">.</span>from_pandas(pdf)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ps' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b8453856 .cell execution_count=5}\n``` {.python .cell-code}\npsdf.columns\n\npsdf.info\n\npsdf.describe()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">psdf</span><span style=\"color:rgb(98,98,98)\">.</span>columns\n<span class=\"ansi-green-fg ansi-bold\">      3</span> psdf<span style=\"color:rgb(98,98,98)\">.</span>info\n<span class=\"ansi-green-fg ansi-bold\">      5</span> psdf<span style=\"color:rgb(98,98,98)\">.</span>describe()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3c1cc3fe .cell execution_count=6}\n``` {.python .cell-code}\nspark = SparkSession.builder.getOrCreate()\n\nsdf = spark.createDataFrame(pdf)\n\nsdf.show()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> spark <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">SparkSession</span><span style=\"color:rgb(98,98,98)\">.</span>builder<span style=\"color:rgb(98,98,98)\">.</span>getOrCreate()\n<span class=\"ansi-green-fg ansi-bold\">      3</span> sdf <span style=\"color:rgb(98,98,98)\">=</span> spark<span style=\"color:rgb(98,98,98)\">.</span>createDataFrame(pdf)\n<span class=\"ansi-green-fg ansi-bold\">      5</span> sdf<span style=\"color:rgb(98,98,98)\">.</span>show()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'SparkSession' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n**Remark**. There are weird columns in the end, they look empty. \nThey don't appear in the description of the data.\n\n::: {#e2b4de63 .cell execution_count=7}\n``` {.python .cell-code}\npsdf.info()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">psdf</span><span style=\"color:rgb(98,98,98)\">.</span>info()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#91359c30 .cell execution_count=8}\n``` {.python .cell-code}\npsdf[\"BirthDate\"].head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">psdf</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">BirthDate</span><span style=\"color:rgb(175,0,0)\">\"</span>]<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d460f5f2 .cell execution_count=9}\n``` {.python .cell-code}\ntype(psdf.loc[0, 'BirthDate'])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">type</span>(<span class=\"ansi-yellow-bg\">psdf</span><span style=\"color:rgb(98,98,98)\">.</span>loc[<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">BirthDate</span><span style=\"color:rgb(175,0,0)\">'</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThis means that dates are indeed imported as a strings...\n\n::: {#e3c714ac .cell execution_count=10}\n``` {.python .cell-code}\npsdf['Prod_Sub_Category'].head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">psdf</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Sub_Category</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7742a460 .cell execution_count=11}\n``` {.python .cell-code}\ntype(psdf.loc[0, 'Prod_Sub_Category'])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">type</span>(<span class=\"ansi-yellow-bg\">psdf</span><span style=\"color:rgb(98,98,98)\">.</span>loc[<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Sub_Category</span><span style=\"color:rgb(175,0,0)\">'</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nCategorical variables are imported as a strings as well\n\n::: {#f5ac201a .cell execution_count=12}\n``` {.python .cell-code}\npsdf['Net_Annual_Income'].head(n=10)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">psdf</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">10</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#56873223 .cell execution_count=13}\n``` {.python .cell-code}\ntype(psdf.loc[0, 'Net_Annual_Income'])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[13], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">type</span>(<span class=\"ansi-yellow-bg\">psdf</span><span style=\"color:rgb(98,98,98)\">.</span>loc[<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNet actual income is a string as well ! While it is clearly a number !!!\n\nCaveat: there are slight differences between Pandas API on Spark and Pandas API.\n\n::: {#bbb8df0b .cell execution_count=14}\n``` {.python .cell-code}\n# psdf.describe(include='all')\n```\n:::\n\n\n## Let's assess what we did\n\nIt appears that we have to work a little bit more for a correct import of the data.\nHere is a list of the problems we face.\n- The last three columns are empty\n- Dates are actually `str` (python's **string** type)\n- There is a lot of missing values\n- Categorial features are `str`\n- The `Net_Annual_Income` is imported as a string\n\nBy looking at the column names, the descriptions of the columns and using some basic, we infer the type of features that we have.\nThere are dates features, continuous features, categorical features, and\nsome features that could be either treated as categorical or continuous.\n\n- There are **many** missing values, that need to be handled.\n- The annual net income is imported as a string, we need to understand why.\n- We really need to treat dates as dates and not strings (because we want to compute the age of a client based on its birth year for instance).\n\nHere is a tentative structure of the features\n\n**Continuous features**\n\n- `Years_At_Residence`\n- `Net_Annual_Income`\n- `Years_At_Business`\n\n**Features to be decided**\n\n- `Number_Of_Dependant`\n- `Nb_Of_Products`\n\n**Categorical features**\n\n- `Customer_Type`\n- `P_Client`\n- `Educational_Level`\n- `Marital_Status`\n- `Prod_Sub_Category`\n- `Source`\n- `Type_Of_Residence`\n- `Prod_Category`\n\n**Date features**\n\n- `BirthDate`\n- `Customer_Open_Date`\n- `Prod_Decision_Date`\n- `Prod_Closed_Date`\n\n# A closer look at the import problems\n\nLet's find solutions to all these import problems.\n\n## The last three columns are weird and empty \n\nIt seems to come from the fact that the data always ends with several `';'` characters. \nWe can remove them simply using the `usecols` option from `read_csv`.\n\n## Dates are actually `str`\n\nWe need to specify which columns must be encoded as dates using the `parse_dates` option from `read_csv`.\nFortunately enough, `pandas` is clever enough to interpret the date format.\n\n::: {#b4837b13 .cell execution_count=15}\n``` {.python .cell-code}\ntype(psdf.loc[0, 'BirthDate'])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[15], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">type</span>(<span class=\"ansi-yellow-bg\">psdf</span><span style=\"color:rgb(98,98,98)\">.</span>loc[<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">BirthDate</span><span style=\"color:rgb(175,0,0)\">'</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## There is a lot of missing values \n\nWe'll see below that actually a single column mostly contain missing values.\n\n::: {#8541a310 .cell execution_count=16}\n``` {.python .cell-code}\npsdf.isnull().sum()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[16], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">psdf</span><span style=\"color:rgb(98,98,98)\">.</span>isnull()<span style=\"color:rgb(98,98,98)\">.</span>sum()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe column `Prod_Closed_Date` contains mostly missing values !\n\n::: {#5e59fcd6 .cell execution_count=17}\n``` {.python .cell-code}\npsdf[['Prod_Closed_Date']].head(5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[17], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">psdf</span>[[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Closed_Date</span><span style=\"color:rgb(175,0,0)\">'</span>]]<span style=\"color:rgb(98,98,98)\">.</span>head(<span style=\"color:rgb(98,98,98)\">5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nLet's remove the useless columns and check the remaining missing values\n\nAgain there are variations. Keyword `inplace` is not legal in Pandas API on Spark\n\n::: {#1d51115a .cell execution_count=18}\n``` {.python .cell-code}\n# df.drop(['Prod_Closed_Date', 'Unnamed: 19', \n#          'Unnamed: 20', 'Unnamed: 21'], axis=\"columns\", inplace=True)\n\npsdf = psdf.drop(['Prod_Closed_Date', \n        'Unnamed: 19', \n        'Unnamed: 20', \n        'Unnamed: 21'], \n        axis=\"columns\")\n        \npsdf.head()         \n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[18], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># df.drop(['Prod_Closed_Date', 'Unnamed: 19', </span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#          'Unnamed: 20', 'Unnamed: 21'], axis=\"columns\", inplace=True)</span>\n<span class=\"ansi-green-fg\">----&gt; 4</span> psdf <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">psdf</span><span style=\"color:rgb(98,98,98)\">.</span>drop([<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Closed_Date</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      5</span>         <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Unnamed: 19</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      6</span>         <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Unnamed: 20</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      7</span>         <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Unnamed: 21</span><span style=\"color:rgb(175,0,0)\">'</span>], \n<span class=\"ansi-green-fg ansi-bold\">      8</span>         axis<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">columns</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">     10</span> psdf<span style=\"color:rgb(98,98,98)\">.</span>head()         \n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nLet's display the rows with missing values and let's highlight them\n\n::: {#cbcf3eab .cell execution_count=19}\n``` {.python .cell-code}\n# psdf[psdf.isnull().any(axis=\"columns\")].style.highlight_null()\n```\n:::\n\n\n## Categorial features are `str`\n\nWe need to say the dtype we want to use for some columns using the `dtype` option of `read_csv`.\n\n::: {#3c4eb3d3 .cell execution_count=20}\n``` {.python .cell-code}\ntype(psdf.loc[0, 'Prod_Sub_Category'])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[20], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">type</span>(<span class=\"ansi-yellow-bg\">psdf</span><span style=\"color:rgb(98,98,98)\">.</span>loc[<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Sub_Category</span><span style=\"color:rgb(175,0,0)\">'</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1e950071 .cell execution_count=21}\n``` {.python .cell-code}\npsdf['Prod_Sub_Category'].unique()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[21], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">psdf</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Sub_Category</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>unique()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## The annual net income is imported as a string\n\nThis problem comes from the fact that the decimal separator is in European notation: it's a `','` and not a `'.'`, so we need to specify it using the `decimal` option to `read_csv`. (Data is French, pardon my French...) \n\n::: {#7283cfa5 .cell execution_count=22}\n``` {.python .cell-code}\ntype(psdf.loc[0, 'Net_Annual_Income'])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[22], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">type</span>(<span class=\"ansi-yellow-bg\">psdf</span><span style=\"color:rgb(98,98,98)\">.</span>loc[<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span>])\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#42197052 .cell execution_count=23}\n``` {.python .cell-code}\npsdf['Net_Annual_Income'].head(n=10)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[23], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">psdf</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>head(n<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">10</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'psdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n# A correct import of the data\n\n- We build a dict that specifies the dtype to use for each column \nand pass it to `read_csv` using the `dtype` option\n- We also specify the `decimal`, `usecols` and `parse_dates` options\n\n**Very pro remark.** Some columns could be imported as `int`. \nHowever, `pandas` (actually its `numpy`) does not support columns \nwith integer dtype and missing values.\n\n::: {#3f239c9a .cell execution_count=24}\n``` {.python .cell-code}\n# Does not work completely\ngro_dtypes = {\n    'Years_At_Residence': np.int64,\n    'Net_Annual_Income' : np.float64,\n    'Years_At_Business': np.float64,\n    'Number_Of_Dependant': np.float64,\n    'Nb_Of_Products': np.int64,\n    'Customer_Type': 'category',\n    'P_Client': 'category',\n    'Educational_Level': 'category',\n    'Marital_Status': 'category',\n    'Prod_Sub_Category': 'category',\n    'Source': 'category',\n    'Type_Of_Residence': 'category',\n    'Prod_Category': 'category',\n}\n\npssdf = ps.read_csv(\n    # Filename\n    \"gro.csv.gz\",\n    # Column separator\n    sep=';',\n    # Decimal separator\n    decimal=',',\n    # Range of the columns to keep (remove the last three ones)\n    usecols=range(19),\n    # Which columns should be parsed as dates\n    # parse_dates=['BirthDate', 'Customer_Open_Date', 'Prod_Decision_Date', \n    #              'Prod_Closed_Date'],\n    # Specify some dtypes\n    dtype=gro_dtypes\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[24], line 18</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Does not work completely</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> gro_dtypes <span style=\"color:rgb(98,98,98)\">=</span> {\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Years_At_Residence</span><span style=\"color:rgb(175,0,0)\">'</span>: np<span style=\"color:rgb(98,98,98)\">.</span>int64,\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span> : np<span style=\"color:rgb(98,98,98)\">.</span>float64,\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">     15</span>     <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Category</span><span style=\"color:rgb(175,0,0)\">'</span>: <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">category</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     16</span> }\n<span class=\"ansi-green-fg\">---&gt; 18</span> pssdf <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">ps</span><span style=\"color:rgb(98,98,98)\">.</span>read_csv(\n<span class=\"ansi-green-fg ansi-bold\">     19</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Filename</span>\n<span class=\"ansi-green-fg ansi-bold\">     20</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">gro.csv.gz</span><span style=\"color:rgb(175,0,0)\">\"</span>,\n<span class=\"ansi-green-fg ansi-bold\">     21</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Column separator</span>\n<span class=\"ansi-green-fg ansi-bold\">     22</span>     sep<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">;</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     23</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Decimal separator</span>\n<span class=\"ansi-green-fg ansi-bold\">     24</span>     decimal<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">,</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">     25</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Range of the columns to keep (remove the last three ones)</span>\n<span class=\"ansi-green-fg ansi-bold\">     26</span>     usecols<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(0,135,0)\">range</span>(<span style=\"color:rgb(98,98,98)\">19</span>),\n<span class=\"ansi-green-fg ansi-bold\">     27</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Which columns should be parsed as dates</span>\n<span class=\"ansi-green-fg ansi-bold\">     28</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># parse_dates=['BirthDate', 'Customer_Open_Date', 'Prod_Decision_Date', </span>\n<span class=\"ansi-green-fg ansi-bold\">     29</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\">#              'Prod_Closed_Date'],</span>\n<span class=\"ansi-green-fg ansi-bold\">     30</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Specify some dtypes</span>\n<span class=\"ansi-green-fg ansi-bold\">     31</span>     dtype<span style=\"color:rgb(98,98,98)\">=</span>gro_dtypes\n<span class=\"ansi-green-fg ansi-bold\">     32</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ps' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#540ecc52 .cell execution_count=25}\n``` {.python .cell-code}\npssdf.dtypes\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">pssdf</span><span style=\"color:rgb(98,98,98)\">.</span>dtypes\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ad541f32 .cell execution_count=26}\n``` {.python .cell-code}\n(\n  pssdf\n    .loc[:, [c for c in psdf.columns \n               if (c.endswith('Date'))]]\n    .head()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[26], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>   <span class=\"ansi-yellow-bg\">pssdf</span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>loc[:, [c <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> c <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> psdf<span style=\"color:rgb(98,98,98)\">.</span>columns \n<span class=\"ansi-green-fg ansi-bold\">      4</span>                <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> (c<span style=\"color:rgb(98,98,98)\">.</span>endswith(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Date</span><span style=\"color:rgb(175,0,0)\">'</span>))]]\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(98,98,98)\">.</span>head()\n<span class=\"ansi-green-fg ansi-bold\">      6</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#bb568531 .cell execution_count=27}\n``` {.python .cell-code}\nfor c in pssdf.columns:\n    if (not c.endswith('Date')):\n        continue\n    pssdf[c] =ps.to_datetime(pssdf[c], format='%d/%m/%Y')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[27], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> c <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span class=\"ansi-yellow-bg\">pssdf</span><span style=\"color:rgb(98,98,98)\">.</span>columns:\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> (<span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> c<span style=\"color:rgb(98,98,98)\">.</span>endswith(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Date</span><span style=\"color:rgb(175,0,0)\">'</span>)):\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">continue</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9f0801af .cell execution_count=28}\n``` {.python .cell-code}\npssdf.dtypes\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[28], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">pssdf</span><span style=\"color:rgb(98,98,98)\">.</span>dtypes\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#810e6ee4 .cell execution_count=29}\n``` {.python .cell-code}\npssdf.loc[:, [c for c in pssdf.columns if (c.endswith('Date'))]].head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[29], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">pssdf</span><span style=\"color:rgb(98,98,98)\">.</span>loc[:, [c <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> c <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> pssdf<span style=\"color:rgb(98,98,98)\">.</span>columns <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> (c<span style=\"color:rgb(98,98,98)\">.</span>endswith(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Date</span><span style=\"color:rgb(175,0,0)\">'</span>))]]<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#636b56f4 .cell execution_count=30}\n``` {.python .cell-code}\npssdf['Prod_Sub_Category'].head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[30], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">pssdf</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Sub_Category</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5bbaf558 .cell execution_count=31}\n``` {.python .cell-code}\ntruc = pssdf['Prod_Sub_Category'].head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[31], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> truc <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pssdf</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Sub_Category</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1921a6d4 .cell execution_count=32}\n``` {.python .cell-code}\npssdf.loc[0, 'BirthDate']\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[32], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">pssdf</span><span style=\"color:rgb(98,98,98)\">.</span>loc[<span style=\"color:rgb(98,98,98)\">0</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">BirthDate</span><span style=\"color:rgb(175,0,0)\">'</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nLet's remove `Prod_Closed_Date` (mostly contains missing values)\n\n::: {#9b8d95e4 .cell execution_count=33}\n``` {.python .cell-code}\nprod_closed_date = pssdf.pop('Prod_Closed_Date')\npssdf.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[33], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> prod_closed_date <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pssdf</span><span style=\"color:rgb(98,98,98)\">.</span>pop(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Closed_Date</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> pssdf<span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nAnd remove the remaining rows with missing values\n\n::: {#07f6e072 .cell execution_count=34}\n``` {.python .cell-code}\nprint(pssdf.shape)\npssdf = pssdf.dropna()\nprint(pssdf.shape)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[34], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">pssdf</span><span style=\"color:rgb(98,98,98)\">.</span>shape)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> pssdf <span style=\"color:rgb(98,98,98)\">=</span> pssdf<span style=\"color:rgb(98,98,98)\">.</span>dropna()\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(pssdf<span style=\"color:rgb(98,98,98)\">.</span>shape)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#81fe4585 .cell execution_count=35}\n``` {.python .cell-code}\n# Now we save the cleaned dataset into a CSV file\npssdf.to_csv(\"gro_spark_cleaned.csv\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[35], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Now we save the cleaned dataset into a CSV file</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">pssdf</span><span style=\"color:rgb(98,98,98)\">.</span>to_csv(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">gro_spark_cleaned.csv</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ade2c400 .cell execution_count=36}\n``` {.python .cell-code}\n!pwd\n!ls -al gro_*\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/home/boucheron/Documents/IFEBY310/core/notebooks\r\nls: cannot access 'gro_*': No such file or directory\r\n```\n:::\n:::\n\n\n## Comment on file formats\n\nYou can use other methods starting with `.to_XX` to save in another format.\nHere are some main examples\n\n- OK to use `csv` for \"small\" datasets (several MB)\n- Use `pickle` for more compressed and faster format (limited to 4GB). It's the standard binary serialization format of `Python`\n- `feather` is another fast and lightweight file format for storing data frames. A very popular exchange format. \n- `parquet` is a format for big distributed data (works nicely with `Spark`)\n\namong several others...\n\n::: {#b12a5567 .cell execution_count=37}\n``` {.python .cell-code}\n#df.to_pickle(\"gro_cleaned.pkl\")\npssdf.to_parquet(\"gro_cleaned.parquet\")\n# pssdf.reset_index().to_feather(\"gro_cleaned.feather\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[37], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#df.to_pickle(\"gro_cleaned.pkl\")</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">pssdf</span><span style=\"color:rgb(98,98,98)\">.</span>to_parquet(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">gro_cleaned.parquet</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># pssdf.reset_index().to_feather(\"gro_cleaned.feather\")</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5e23d4e6 .cell execution_count=38}\n``` {.python .cell-code}\npssdf.index\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[38], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">pssdf</span><span style=\"color:rgb(98,98,98)\">.</span>index\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nAnd you can read again using the corresponding `read_XX` function\n\n::: {#694b911a .cell execution_count=39}\n``` {.python .cell-code}\npssdf = ps.read_parquet(\"gro_cleaned.parquet\")\npssdf.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[39], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> pssdf <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">ps</span><span style=\"color:rgb(98,98,98)\">.</span>read_parquet(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">gro_cleaned.parquet</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> pssdf<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ps' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e6ffc2d9 .cell execution_count=40}\n``` {.python .cell-code}\n!ls -alh gro_cleaned*\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nls: cannot access 'gro_cleaned*': No such file or directory\r\n```\n:::\n:::\n\n\n## The net income columns is very weird\n\n::: {#b5092a9e .cell execution_count=41}\n``` {.python .cell-code}\nincome = pssdf['Net_Annual_Income']\nincome.describe()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[41], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> income <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">pssdf</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span>]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> income<span style=\"color:rgb(98,98,98)\">.</span>describe()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#329c3dbb .cell execution_count=42}\n``` {.python .cell-code}\n(income <= 100).sum(), (income > 100).sum()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[42], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> (<span class=\"ansi-yellow-bg\">income</span> <span style=\"color:rgb(98,98,98)\">&lt;</span><span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">100</span>)<span style=\"color:rgb(98,98,98)\">.</span>sum(), (income <span style=\"color:rgb(98,98,98)\">&gt;</span> <span style=\"color:rgb(98,98,98)\">100</span>)<span style=\"color:rgb(98,98,98)\">.</span>sum()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'income' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nMost values are smaller than 100, while some are much much larger...\n\n::: {#1a842938 .cell execution_count=43}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nsns.set_context(\"notebook\", font_scale=1.2)\n```\n:::\n\n\n::: {#9c85782d .cell execution_count=44}\n``` {.python .cell-code}\nsns.displot(x='Net_Annual_Income', \n            data=pssdf, \n            bins=20,\n            height=4, \n            aspect=1.5)\n```\n:::\n\n\n::: {#590decc0 .cell execution_count=45}\n``` {.python .cell-code}\npssdf[\"Net_Annual_Income\"].plot.hist(bins=40, \nhitsnorm='density', log_x=True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[43], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">pssdf</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">\"</span>]<span style=\"color:rgb(98,98,98)\">.</span>plot<span style=\"color:rgb(98,98,98)\">.</span>hist(bins<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">40</span>, \n<span class=\"ansi-green-fg ansi-bold\">      2</span> hitsnorm<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">density</span><span style=\"color:rgb(175,0,0)\">'</span>, log_x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d07e7d52 .cell execution_count=46}\n``` {.python .cell-code}\npssdf[\"Net_Annual_Income\"].plot.kde(bw_method=10, log_x=True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[44], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">pssdf</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">\"</span>]<span style=\"color:rgb(98,98,98)\">.</span>plot<span style=\"color:rgb(98,98,98)\">.</span>kde(bw_method<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">10</span>, log_x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThis is annoying, we don't really see much...\n\n::: {#d65407bc .cell execution_count=47}\n``` {.python .cell-code}\nsns.displot(x='Net_Annual_Income', \n            data=pssdf, \n            bins=20, \n            height=4, \n            aspect=1.5, \n            log_scale=(False, True))\n```\n:::\n\n\nDistribution for less than 100K revenue\n\n::: {#97d927e4 .cell execution_count=48}\n``` {.python .cell-code}\nsns.displot(x='Net_Annual_Income', \n            data=pssdf[pssdf['Net_Annual_Income'] < 100], \n            bins=15, \n            height=4, \n            aspect=1.5)\n```\n:::\n\n\nDistribution for less than 400K revenue\n\n::: {#77c9a340 .cell execution_count=49}\n``` {.python .cell-code}\nsns.displot(x='Net_Annual_Income', data=pssdf[pssdf['Net_Annual_Income'] < 400], \n            bins=15, height=4, aspect=1.5)\n```\n:::\n\n\n::: {#7832eaf0 .cell execution_count=50}\n``` {.python .cell-code}\n(pssdf['Net_Annual_Income'] == 36.0).sum()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[45], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> (<span class=\"ansi-yellow-bg\">pssdf</span>[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span>] <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(98,98,98)\">36.0</span>)<span style=\"color:rgb(98,98,98)\">.</span>sum()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pssdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#94e1c216 .cell execution_count=51}\n``` {.python .cell-code}\nincome_counts = (\n    ps.DataFrame({\n        \"income_category\": pssdf['Net_Annual_Income'].astype(\"category\"),\n        \"income\": pssdf['Net_Annual_Income']\n    })\n    .groupby(\"income_category\")\n    .count()\n    .reset_index()\n    .rename(columns={\"income\": \"#customers\"})\n    .sort_values(by=\"#customers\", axis=\"index\", ascending=False)\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[46], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> income_counts <span style=\"color:rgb(98,98,98)\">=</span> (\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span class=\"ansi-yellow-bg\">ps</span><span style=\"color:rgb(98,98,98)\">.</span>DataFrame({\n<span class=\"ansi-green-fg ansi-bold\">      3</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">income_category</span><span style=\"color:rgb(175,0,0)\">\"</span>: pssdf[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span>]<span style=\"color:rgb(98,98,98)\">.</span>astype(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">category</span><span style=\"color:rgb(175,0,0)\">\"</span>),\n<span class=\"ansi-green-fg ansi-bold\">      4</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">income</span><span style=\"color:rgb(175,0,0)\">\"</span>: pssdf[<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span>]\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     })\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"color:rgb(98,98,98)\">.</span>groupby(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">income_category</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      7</span>     <span style=\"color:rgb(98,98,98)\">.</span>count()\n<span class=\"ansi-green-fg ansi-bold\">      8</span>     <span style=\"color:rgb(98,98,98)\">.</span>reset_index()\n<span class=\"ansi-green-fg ansi-bold\">      9</span>     <span style=\"color:rgb(98,98,98)\">.</span>rename(columns<span style=\"color:rgb(98,98,98)\">=</span>{<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">income</span><span style=\"color:rgb(175,0,0)\">\"</span>: <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">#customers</span><span style=\"color:rgb(175,0,0)\">\"</span>})\n<span class=\"ansi-green-fg ansi-bold\">     10</span>     <span style=\"color:rgb(98,98,98)\">.</span>sort_values(by<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">#customers</span><span style=\"color:rgb(175,0,0)\">\"</span>, axis<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">index</span><span style=\"color:rgb(175,0,0)\">\"</span>, ascending<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg ansi-bold\">     11</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'ps' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7732e379 .cell execution_count=52}\n``` {.python .cell-code}\nincome_counts[\"%cummulative clients\"] \\\n    = income_counts[\"#customers\"].cumsum() / income_counts[\"#customers\"].sum()\n\nincome_counts.iloc[:20].style.bar(subset=[\"%cummulative clients\"], vmin=0, vmax=1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[47], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> income_counts[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">%c</span><span style=\"color:rgb(175,0,0)\">ummulative clients</span><span style=\"color:rgb(175,0,0)\">\"</span>] \\\n<span class=\"ansi-green-fg\">----&gt; 2</span>     <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">income_counts</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">#customers</span><span style=\"color:rgb(175,0,0)\">\"</span>]<span style=\"color:rgb(98,98,98)\">.</span>cumsum() <span style=\"color:rgb(98,98,98)\">/</span> income_counts[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">#customers</span><span style=\"color:rgb(175,0,0)\">\"</span>]<span style=\"color:rgb(98,98,98)\">.</span>sum()\n<span class=\"ansi-green-fg ansi-bold\">      4</span> income_counts<span style=\"color:rgb(98,98,98)\">.</span>iloc[:<span style=\"color:rgb(98,98,98)\">20</span>]<span style=\"color:rgb(98,98,98)\">.</span>style<span style=\"color:rgb(98,98,98)\">.</span>bar(subset<span style=\"color:rgb(98,98,98)\">=</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">%c</span><span style=\"color:rgb(175,0,0)\">ummulative clients</span><span style=\"color:rgb(175,0,0)\">\"</span>], vmin<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">0</span>, vmax<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'income_counts' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n- We have some overrepresented values (many possible explanations for this)\n- To clean the data, we can, for instance, keep only the revenues between [10, 200], or leave it as such\n\n::: {#e8139718 .cell execution_count=53}\n``` {.python .cell-code}\ndf = df[(df['Net_Annual_Income'] >= 10) & (df['Net_Annual_Income'] <= 200)]\n\nsns.displot(x='Net_Annual_Income', data=df, bins=15, height=4, aspect=1.5)\n```\n:::\n\n\n# Some data visualization with `pandas` + `seaborn`\n\n::: {#1a70c905 .cell execution_count=54}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 5))\nsns.stripplot(x='Educational_Level', \n              y='Net_Annual_Income', \n              hue='Y', \n              jitter=True, \n              data=df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[48], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">plt</span><span style=\"color:rgb(98,98,98)\">.</span>figure(figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">8</span>, <span style=\"color:rgb(98,98,98)\">5</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> sns<span style=\"color:rgb(98,98,98)\">.</span>stripplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Educational_Level</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      3</span>               y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      4</span>               hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Y</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      5</span>               jitter<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, \n<span class=\"ansi-green-fg ansi-bold\">      6</span>               data<span style=\"color:rgb(98,98,98)\">=</span>df)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'plt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9040ab57 .cell execution_count=55}\n``` {.python .cell-code}\nplt.figure(figsize=(12, 6))\nsns.boxplot(x='Educational_Level', y='Net_Annual_Income', \n            hue='Y', data=df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[49], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">plt</span><span style=\"color:rgb(98,98,98)\">.</span>figure(figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">12</span>, <span style=\"color:rgb(98,98,98)\">6</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> sns<span style=\"color:rgb(98,98,98)\">.</span>boxplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Educational_Level</span><span style=\"color:rgb(175,0,0)\">'</span>, y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      3</span>             hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Y</span><span style=\"color:rgb(175,0,0)\">'</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'plt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#86fd0387 .cell execution_count=56}\n``` {.python .cell-code}\nplt.figure(figsize=(12, 6))\nsns.violinplot(x='Marital_Status', y='Net_Annual_Income', \n               hue='Y', split=True, data=df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[50], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">plt</span><span style=\"color:rgb(98,98,98)\">.</span>figure(figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">12</span>, <span style=\"color:rgb(98,98,98)\">6</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> sns<span style=\"color:rgb(98,98,98)\">.</span>violinplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Marital_Status</span><span style=\"color:rgb(175,0,0)\">'</span>, y<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Net_Annual_Income</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      3</span>                hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Y</span><span style=\"color:rgb(175,0,0)\">'</span>, split<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'plt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#da6faa28 .cell execution_count=57}\n``` {.python .cell-code}\nplt.figure(figsize=(10, 5))\nsns.countplot(x='Marital_Status', hue='Y', data=df)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[51], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">plt</span><span style=\"color:rgb(98,98,98)\">.</span>figure(figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">10</span>, <span style=\"color:rgb(98,98,98)\">5</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> sns<span style=\"color:rgb(98,98,98)\">.</span>countplot(x<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Marital_Status</span><span style=\"color:rgb(175,0,0)\">'</span>, hue<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Y</span><span style=\"color:rgb(175,0,0)\">'</span>, data<span style=\"color:rgb(98,98,98)\">=</span>df)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'plt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#115a3f71 .cell execution_count=58}\n``` {.python .cell-code}\nfig, axes = plt.subplots(nrows=4, ncols=3, figsize=(16, 16))\ncolumns = ['Customer_Type', 'P_Client', 'Educational_Level', \n           'Number_Of_Dependant', 'Marital_Status', 'Prod_Sub_Category',\n           'Source', 'Type_Of_Residence', 'Nb_Of_Products', \n           'Prod_Category', 'Y']\n\nfor i, colname in enumerate(columns):\n    sns.countplot(x=colname, data=df, ax=fig.axes[i])\nplt.tight_layout()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[52], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> fig, axes <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">plt</span><span style=\"color:rgb(98,98,98)\">.</span>subplots(nrows<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">4</span>, ncols<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>, figsize<span style=\"color:rgb(98,98,98)\">=</span>(<span style=\"color:rgb(98,98,98)\">16</span>, <span style=\"color:rgb(98,98,98)\">16</span>))\n<span class=\"ansi-green-fg ansi-bold\">      2</span> columns <span style=\"color:rgb(98,98,98)\">=</span> [<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Customer_Type</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">P_Client</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Educational_Level</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      3</span>            <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Number_Of_Dependant</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Marital_Status</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Sub_Category</span><span style=\"color:rgb(175,0,0)\">'</span>,\n<span class=\"ansi-green-fg ansi-bold\">      4</span>            <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Source</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Type_Of_Residence</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Nb_Of_Products</span><span style=\"color:rgb(175,0,0)\">'</span>, \n<span class=\"ansi-green-fg ansi-bold\">      5</span>            <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Prod_Category</span><span style=\"color:rgb(175,0,0)\">'</span>, <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">Y</span><span style=\"color:rgb(175,0,0)\">'</span>]\n<span class=\"ansi-green-fg ansi-bold\">      7</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> i, colname <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">enumerate</span>(columns):\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'plt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n# Final preparation of the dataset\n\n::: {#b2021538 .cell execution_count=59}\n``` {.python .cell-code}\n# First we make lists of continuous, categorial and date features\n\ncnt_featnames = [\n    'Years_At_Residence',\n    'Net_Annual_Income',\n    'Years_At_Business',\n    'Number_Of_Dependant'\n]\n\ncat_featnames = [\n    'Customer_Type',\n    'P_Client',\n    'Educational_Level',\n    'Marital_Status',\n    'Prod_Sub_Category',\n    'Source',\n    'Type_Of_Residence',\n    'Prod_Category',\n    'Nb_Of_Products'\n]\n\ndate_featnames = [\n    'BirthDate',\n    'Customer_Open_Date',\n    'Prod_Decision_Date'\n    #'Prod_Closed_Date'\n]\n```\n:::\n\n\n## Creation of the features matrix\n\n::: {#eaaf8157 .cell execution_count=60}\n``` {.python .cell-code}\ndf[cnt_featnames].head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[54], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df</span>[cnt_featnames]<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1bcb634b .cell execution_count=61}\n``` {.python .cell-code}\nbin_features = pd.get_dummies(df[cat_featnames],\n                              prefix_sep='#', drop_first=True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[55], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> bin_features <span style=\"color:rgb(98,98,98)\">=</span> pd<span style=\"color:rgb(98,98,98)\">.</span>get_dummies(<span class=\"ansi-yellow-bg\">df</span>[cat_featnames],\n<span class=\"ansi-green-fg ansi-bold\">      2</span>                               prefix_sep<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">#</span><span style=\"color:rgb(175,0,0)\">'</span>, drop_first<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7be0fb60 .cell execution_count=62}\n``` {.python .cell-code}\nbin_features.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[56], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">bin_features</span><span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'bin_features' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d30c0543 .cell execution_count=63}\n``` {.python .cell-code}\ncnt_features = df[cnt_featnames]\ncnt_features.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[57], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> cnt_features <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span>[cnt_featnames]\n<span class=\"ansi-green-fg ansi-bold\">      2</span> cnt_features<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#83370fb0 .cell execution_count=64}\n``` {.python .cell-code}\nfrom pandas import Timestamp\n\ndef age(x):\n    today = Timestamp.today()\n    return (today - x).dt.days\n\ndate_features = df[date_featnames].apply(age, axis=\"index\")\ndate_features.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[58], line 7</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     today <span style=\"color:rgb(98,98,98)\">=</span> Timestamp<span style=\"color:rgb(98,98,98)\">.</span>today()\n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> (today <span style=\"color:rgb(98,98,98)\">-</span> x)<span style=\"color:rgb(98,98,98)\">.</span>dt<span style=\"color:rgb(98,98,98)\">.</span>days\n<span class=\"ansi-green-fg\">----&gt; 7</span> date_features <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">df</span>[date_featnames]<span style=\"color:rgb(98,98,98)\">.</span>apply(age, axis<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">index</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      8</span> date_features<span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c32ea086 .cell execution_count=65}\n``` {.python .cell-code}\ntoday = Timestamp.today()\ntoday\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\nTimestamp('2025-03-05 23:39:22.513090')\n```\n:::\n:::\n\n\n::: {#fe339ab6 .cell execution_count=66}\n``` {.python .cell-code}\ntt = (today - df[\"BirthDate\"]).loc[0]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[60], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> tt <span style=\"color:rgb(98,98,98)\">=</span> (today <span style=\"color:rgb(98,98,98)\">-</span> <span class=\"ansi-yellow-bg\">df</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">BirthDate</span><span style=\"color:rgb(175,0,0)\">\"</span>])<span style=\"color:rgb(98,98,98)\">.</span>loc[<span style=\"color:rgb(98,98,98)\">0</span>]\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3b64935e .cell execution_count=67}\n``` {.python .cell-code}\n(today - df[\"BirthDate\"]).dt.days\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[61], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> (today <span style=\"color:rgb(98,98,98)\">-</span> <span class=\"ansi-yellow-bg\">df</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">BirthDate</span><span style=\"color:rgb(175,0,0)\">\"</span>])<span style=\"color:rgb(98,98,98)\">.</span>dt<span style=\"color:rgb(98,98,98)\">.</span>days\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#dfd1841f .cell execution_count=68}\n``` {.python .cell-code}\ntt\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[62], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">tt</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'tt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Final features matrix\n\n::: {#97c917a9 .cell execution_count=69}\n``` {.python .cell-code}\nall_features = pd.concat([bin_features, cnt_features, date_features], axis=1)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[63], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> all_features <span style=\"color:rgb(98,98,98)\">=</span> pd<span style=\"color:rgb(98,98,98)\">.</span>concat([<span class=\"ansi-yellow-bg\">bin_features</span>, cnt_features, date_features], axis<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">1</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'bin_features' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b0ecb9be .cell execution_count=70}\n``` {.python .cell-code}\nall_features.columns\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[64], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">all_features</span><span style=\"color:rgb(98,98,98)\">.</span>columns\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'all_features' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#0de49cc0 .cell execution_count=71}\n``` {.python .cell-code}\nall_features.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[65], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">all_features</span><span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'all_features' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#31f6818e .cell execution_count=72}\n``` {.python .cell-code}\ndf_debile = pd.DataFrame({\"nom etudiant\": [\"yiyang\", \"jaouad\", \"mokhtar\", \"massil\", \"simon\"], \n              \"portable\": [True, True, None, True, False]})\n```\n:::\n\n\n::: {#37c0e94b .cell execution_count=73}\n``` {.python .cell-code}\ndf_debile\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>nom etudiant</th>\n      <th>portable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>yiyang</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>jaouad</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>mokhtar</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>massil</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>simon</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#3b37b4c6 .cell execution_count=74}\n``` {.python .cell-code}\ndf_debile.index\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\nRangeIndex(start=0, stop=5, step=1)\n```\n:::\n:::\n\n\n::: {#c85b9093 .cell execution_count=75}\n``` {.python .cell-code}\ndf_debile.dropna().index\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\nIndex([0, 1, 3, 4], dtype='int64')\n```\n:::\n:::\n\n\n::: {#42422637 .cell execution_count=76}\n``` {.python .cell-code}\ndf_debile.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5 entries, 0 to 4\nData columns (total 2 columns):\n #   Column        Non-Null Count  Dtype \n---  ------        --------------  ----- \n 0   nom etudiant  5 non-null      object\n 1   portable      4 non-null      object\ndtypes: object(2)\nmemory usage: 212.0+ bytes\n```\n:::\n:::\n\n\n**VERY IMPORTANT**: we removed lines of data that contained missing values. The index of the dataframe is\n    therefore not contiguous anymore\n\n::: {#8b682dbc .cell execution_count=77}\n``` {.python .cell-code}\nall_features.index.max()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[71], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">all_features</span><span style=\"color:rgb(98,98,98)\">.</span>index<span style=\"color:rgb(98,98,98)\">.</span>max()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'all_features' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThis could be a problem for later. So let's reset the index to get a contiguous one\n\n::: {#5fce1060 .cell execution_count=78}\n``` {.python .cell-code}\nall_features.shape\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[72], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">all_features</span><span style=\"color:rgb(98,98,98)\">.</span>shape\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'all_features' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ca319739 .cell execution_count=79}\n``` {.python .cell-code}\nall_features.reset_index(inplace=True, drop=True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[73], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">all_features</span><span style=\"color:rgb(98,98,98)\">.</span>reset_index(inplace<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, drop<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'all_features' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f02652a0 .cell execution_count=80}\n``` {.python .cell-code}\nall_features.head()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[74], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">all_features</span><span style=\"color:rgb(98,98,98)\">.</span>head()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'all_features' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Let's save the data using `pickle`\n\n::: {#7bd43802 .cell execution_count=81}\n``` {.python .cell-code}\nimport pickle as pkl\n\nX = all_features\ny = df['Y']\n\n# Let's put eveything in a dictionary\ndf_pkl = {}\n# The features and the labels\ndf_pkl['features'] = X\ndf_pkl['labels'] = y\n# And also the list of columns we built above\ndf_pkl['cnt_featnames'] = cnt_featnames\ndf_pkl['cat_featnames'] = cat_featnames\ndf_pkl['date_featnames'] = date_featnames\n\nwith open(\"gro_training.pkl\", 'wb') as f:\n    pkl.dump(df_pkl, f)\n```\n:::\n\n\n::: {#a4956096 .cell execution_count=82}\n``` {.python .cell-code}\nls -al gro*\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-rw-rw-r-- 1 boucheron boucheron 9115 janv. 14 22:37 gro.csv.gz\r\n```\n:::\n:::\n\n\nThe preprocessed data is saved in a pickle file called `gro_training.pkdfl`.\n\n\n\n[Databricks blog about Koalas, SPIP, Zen](https://www.databricks.com/blog/2021/10/04/pandas-api-on-upcoming-apache-spark-3-2.html)\n\n> pandas users will be able scale their workloads with one simple line change in the upcoming Spark 3.2 release:\n\n```{.python}\n<s>from pandas import read_csv</s>\nfrom pyspark.pandas import read_csv\npdf = read_csv(\"data.csv\")\n```\n\n",
    "supporting": [
      "notebook04_pandas_spark_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}