{
  "hash": "43c66516b33a56940849f184831bb189",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"PostgreSQL and Spark\"\nformat: html\nengine: jupyter\n---\n\n\n\n[Reading and sriting Spark Dataframes from and to Databases](https://spark.apache.org/docs/latest/sql-data-sources-jdbc.html)\n\n::: {#d0ba166e .cell execution_count=1}\n``` {.python .cell-code}\nimport pyspark\nfrom pyspark import SparkConf\nfrom pyspark.sql import SparkSession\n\nimport os\nimport getpass\n```\n:::\n\n\n## Connect to Pg server\n\n::: {#02ea1dcd .cell execution_count=2}\n``` {.python .cell-code}\nulogin = getpass.getuser()\npw = getpass.getpass()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">StdinNotImplementedError</span>                  Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> ulogin <span style=\"color:rgb(98,98,98)\">=</span> getpass<span style=\"color:rgb(98,98,98)\">.</span>getuser()\n<span class=\"ansi-green-fg\">----&gt; 2</span> pw <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">getpass</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">getpass</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/sandbox/IFEBY310/.venv/lib/python3.12/site-packages/ipykernel/kernelbase.py:1256</span>, in <span class=\"ansi-cyan-fg\">Kernel.getpass</span><span class=\"ansi-blue-fg\">(self, prompt, stream)</span>\n<span class=\"ansi-green-fg ansi-bold\">   1254</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_allow_stdin:\n<span class=\"ansi-green-fg ansi-bold\">   1255</span>     msg <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">getpass was called, but this frontend does not support input requests.</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">-&gt; 1256</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> StdinNotImplementedError(msg)\n<span class=\"ansi-green-fg ansi-bold\">   1257</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> stream <span style=\"font-weight:bold;color:rgb(175,0,255)\">is</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>:\n<span class=\"ansi-green-fg ansi-bold\">   1258</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">warnings</span>\n\n<span class=\"ansi-red-fg\">StdinNotImplementedError</span>: getpass was called, but this frontend does not support input requests.</pre>\n```\n:::\n\n:::\n:::\n\n\nSpark `jdbc` readers and writers rely on a collection of options.\nSome options are used repeatedly. In order to avoid cut and paste, \nwe pack them in a dictionary. \n\n::: {#0824cf86 .cell execution_count=3}\n``` {.python .cell-code}\ndico_jdbc_pg = {\n    \"url\":  \"jdbc:postgresql://localhost:5434/bd_2023-24\",  \n    \"user\":  ulogin, \n    \"password\":  pw, \n    \"driver\":  \"org.postgresql.Driver\"\n}\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 4</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> dico_jdbc_pg <span style=\"color:rgb(98,98,98)\">=</span> {\n<span class=\"ansi-green-fg ansi-bold\">      2</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">url</span><span style=\"color:rgb(175,0,0)\">\"</span>:  <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">jdbc:postgresql://localhost:5434/bd_2023-24</span><span style=\"color:rgb(175,0,0)\">\"</span>,  \n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">user</span><span style=\"color:rgb(175,0,0)\">\"</span>:  ulogin, \n<span class=\"ansi-green-fg\">----&gt; 4</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">password</span><span style=\"color:rgb(175,0,0)\">\"</span>:  <span class=\"ansi-yellow-bg\">pw</span>, \n<span class=\"ansi-green-fg ansi-bold\">      5</span>     <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">driver</span><span style=\"color:rgb(175,0,0)\">\"</span>:  <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">org.postgresql.Driver</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">      6</span> }\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'pw' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#99f384d9 .cell execution_count=4}\n``` {.python .cell-code}\ndbschema = 'nycflights'  \n```\n:::\n\n\n## Reading Spark Dataframes from a PostgreSQL database\n\n::: {#6a67ca61 .cell execution_count=5}\n``` {.python .cell-code}\nspark_home = \"/home/boucheron/.local/share/spark-3.5.0-bin-hadoop3\"\n```\n:::\n\n\n> To get started you will need to include the JDBC driver for your particular database on the spark classpath. \n\n::: {#7a78cc1d .cell execution_count=6}\n``` {.python .cell-code}\nspark = (\n  SparkSession \n    .builder \n    .appName(\"Python Spark SQL basic example\") \n    .config(\"spark.jars\", \n            spark_home + \"/jars/\" + \"postgresql-42.7.2.jar\") \n    .getOrCreate()\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n25/04/03 15:11:34 WARN Utils: Your hostname, boucheron-Precision-5480 resolves to a loopback address: 127.0.1.1; using 172.23.32.10 instead (on interface eth0)\n25/04/03 15:11:34 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address\n25/04/03 15:11:34 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n```\n:::\n:::\n\n\n## Downloading a table to Spark\n\nWe rely on dictionary union and dictionary unpacking to set the options. \n\n::: {#c13b7807 .cell execution_count=7}\n``` {.python .cell-code}\ndf_airlines = (\n  spark\n    .read\n    .format(\"jdbc\")\n    .options(**(dico_jdbc_pg | {'dbtable': 'nycflights.airlines'}))\n    .load()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> df_airlines <span style=\"color:rgb(98,98,98)\">=</span> (\n<span class=\"ansi-green-fg ansi-bold\">      2</span>   spark\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>read\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>format(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">jdbc</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">----&gt; 5</span>     <span style=\"color:rgb(98,98,98)\">.</span>options(<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span>(<span class=\"ansi-yellow-bg\">dico_jdbc_pg</span> <span style=\"color:rgb(98,98,98)\">|</span> {<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">dbtable</span><span style=\"color:rgb(175,0,0)\">'</span>: <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">nycflights.airlines</span><span style=\"color:rgb(175,0,0)\">'</span>}))\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"color:rgb(98,98,98)\">.</span>load()\n<span class=\"ansi-green-fg ansi-bold\">      7</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dico_jdbc_pg' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#113c0470 .cell execution_count=8}\n``` {.python .cell-code}\ndf_airlines.show(5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df_airlines</span><span style=\"color:rgb(98,98,98)\">.</span>show(<span style=\"color:rgb(98,98,98)\">5</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_airlines' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Querying the database\n\n::: {#a0ee71b3 .cell execution_count=9}\n``` {.python .cell-code}\nquery = \"\"\"\n    SELECT DISTINCT fl.carrier, al.name, fl.origin, fl.dest\n    FROM nycflights.airlines al JOIN \n        nycflights.flights fl ON (fl.carrier=al.carrier)\n\"\"\"\n```\n:::\n\n\n::: {#4e6dad26 .cell execution_count=10}\n``` {.python .cell-code}\ndf_query = (\n  spark\n    .read\n    .format(\"jdbc\")\n    .options(**(dico_jdbc_pg | {'query': query}))\n    .load()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> df_query <span style=\"color:rgb(98,98,98)\">=</span> (\n<span class=\"ansi-green-fg ansi-bold\">      2</span>   spark\n<span class=\"ansi-green-fg ansi-bold\">      3</span>     <span style=\"color:rgb(98,98,98)\">.</span>read\n<span class=\"ansi-green-fg ansi-bold\">      4</span>     <span style=\"color:rgb(98,98,98)\">.</span>format(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">jdbc</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">----&gt; 5</span>     <span style=\"color:rgb(98,98,98)\">.</span>options(<span style=\"color:rgb(98,98,98)\">*</span><span style=\"color:rgb(98,98,98)\">*</span>(<span class=\"ansi-yellow-bg\">dico_jdbc_pg</span> <span style=\"color:rgb(98,98,98)\">|</span> {<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">query</span><span style=\"color:rgb(175,0,0)\">'</span>: query}))\n<span class=\"ansi-green-fg ansi-bold\">      6</span>     <span style=\"color:rgb(98,98,98)\">.</span>load()\n<span class=\"ansi-green-fg ansi-bold\">      7</span> )\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'dico_jdbc_pg' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6f02f5ba .cell execution_count=11}\n``` {.python .cell-code}\ndf_query.show()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">df_query</span><span style=\"color:rgb(98,98,98)\">.</span>show()\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'df_query' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## The end\n\n::: {#94aea426 .cell execution_count=12}\n``` {.python .cell-code}\nspark.stop()\n```\n:::\n\n\n",
    "supporting": [
      "notebookxx_pg_pandas_spark_files"
    ],
    "filters": [],
    "includes": {}
  }
}