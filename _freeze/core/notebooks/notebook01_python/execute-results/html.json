{
  "hash": "bd036dab79ff6136f1919cac87c1c52f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Introduction to Python\njupyter: python3\n\nengine: jupyter\n---\n\n\n\nWe introduce here the `python` language. \nOnly the bare minimum necessary for getting started with the data-science stack (a bunch of libraries for data science).\nPython is a **programming language**, as are `C++`, `java`, `fortran`, `javascript`,\netc.\n\n\n## Specific features of Python\n\n- an **interpreted** (as opposed to *compiled*) language. Contrary to e.g.\n`C++` or `fortran`, one does not compile Python code before executing it. \n\n- Used as a scripting language, by python `python script.py` in a terminal\n\n- But can be used also **interactively**: the jupyter notebook, iPython, etc.\n\n- A free software released under an **open-source** license: Python can\nbe used and distributed free of charge, even for building commercial\nsoftware.\n\n- **multi-platform**: Python is available for all major operating\nsystems, Windows, Linux/Unix, MacOS X, most likely your mobile phone\nOS, etc.\n\n- A very readable language with clear non-verbose syntax\n\n- A language for which a **large amount of high-quality** packages are\navailable for various applications, including web-frameworks and scientific\ncomputing\n\n- It has been one of the top **languages for data science** and **machine learning** for several years, because it is  expressive and and easy to deploy\n\n- An object-oriented language\n\nSee https://www.python.org/about/ for more information about distinguishing features of Python.\n\n::: {.callout-important}\n\n### Python 2 or Python 3?\n\n- Simple answer: *don't use Python 2, use Python 3*\n- Python 2 is *mostly deprecated* and *has not been maintained* for years \n- You'll end up hanged if you use Python 2\n- If Python 2 is mandatory at your workplace, find another work\n\n:::\n\n::: {.callout-important}\n\n### Jupyter or Quarto notebooks?\n\n- `quarto` is more git friendly than `jupyter`\n- Enjoy authentic editors\n  \n- Go for `quarto`\n  \n:::\n\n# Hello world\n\n- In a `jupyter`/`quarto` notebook, you have an interactive interpreter.\n\n- You type in the cells, execute commands \n\n::: {#817e5560 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:21:39.584103Z\",\"start_time\":\"2021-01-26T10:21:39.577509Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=1}\n``` {.python .cell-code}\nprint(\"Hi everybody!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHi everybody!\n```\n:::\n:::\n\n\n# Basic types\n\n## Integers\n\n::: {#86be86c5 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:21:48.191166Z\",\"start_time\":\"2021-01-26T10:21:48.181921Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=2}\n``` {.python .cell-code}\n1 + 42\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n43\n```\n:::\n:::\n\n\n::: {#de69af1d .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:21:50.119817Z\",\"start_time\":\"2021-01-26T10:21:50.115692Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=3}\n``` {.python .cell-code}\ntype(1+1)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nint\n```\n:::\n:::\n\n\nWe can assign values to variables with `=`\n\n::: {#62a0a4f0 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:22:09.152051Z\",\"start_time\":\"2021-01-26T10:22:09.148135Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=4}\n``` {.python .cell-code}\na = (3 + 5 ** 2) % 4\na\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n0\n```\n:::\n:::\n\n\n## Remark\n\nWe don't declare the type of a variable before assigning its value. \nIn C, conversely, one should write\n\n```C\nint a = 4;\n```\n\n## Something cool\n\n- **Arbitrary large** integer arithmetics\n\n::: {#1ef543ef .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:22:20.017016Z\",\"start_time\":\"2021-01-26T10:22:20.012996Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=5}\n``` {.python .cell-code}\n17 ** 542\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nn```\n:::\n:::\n\n\n## Floats\n\nThere exists a floating point type that is created when the variable has decimal values\n\n::: {#313f5cd7 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:22:48.180478Z\",\"start_time\":\"2021-01-26T10:22:48.177424Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=6}\n``` {.python .cell-code}\nc = 2.\n```\n:::\n\n\n::: {#d2319e77 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:22:48.386461Z\",\"start_time\":\"2021-01-26T10:22:48.381009Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=7}\n``` {.python .cell-code}\ntype(c)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nfloat\n```\n:::\n:::\n\n\n::: {#cd723c15 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:22:53.303241Z\",\"start_time\":\"2021-01-26T10:22:53.298876Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=8}\n``` {.python .cell-code}\nc = 2\ntype(c)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nint\n```\n:::\n:::\n\n\n::: {#2dddf523 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:15.640321Z\",\"start_time\":\"2021-01-26T10:23:15.636205Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=9}\n``` {.python .cell-code}\ntruc = 1 / 2\ntruc\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n0.5\n```\n:::\n:::\n\n\n::: {#fe009b12 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:36.468643Z\",\"start_time\":\"2021-01-26T10:23:36.464148Z\"}' execution_count=10}\n``` {.python .cell-code}\n1 // 2 + 1 % 2\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n1\n```\n:::\n:::\n\n\n::: {#810a69fa .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:41.839969Z\",\"start_time\":\"2021-01-26T10:23:41.835363Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=11}\n``` {.python .cell-code}\ntype(truc)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nfloat\n```\n:::\n:::\n\n\n## Boolean\nSimilarly, boolean types are created from a comparison\n\n::: {#46df5456 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:43.765175Z\",\"start_time\":\"2021-01-26T10:23:43.761701Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=12}\n``` {.python .cell-code}\ntest = 3 > 4\ntest\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#a89a80ca .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:47.310818Z\",\"start_time\":\"2021-01-26T10:23:47.306145Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=13}\n``` {.python .cell-code}\ntype(test)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nbool\n```\n:::\n:::\n\n\n::: {#53b72aea .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:48.899891Z\",\"start_time\":\"2021-01-26T10:23:48.895700Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=14}\n``` {.python .cell-code}\nFalse == (not True)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#3634bd17 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:23:56.264231Z\",\"start_time\":\"2021-01-26T10:23:56.259609Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=15}\n``` {.python .cell-code}\n1.41 < 2.71 and 2.71 < 3.14\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#65f96d12 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:06.450423Z\",\"start_time\":\"2021-01-26T10:24:06.446054Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=16}\n``` {.python .cell-code}\n# It's equivalent to\n1.41 < 2.71 < 3.14\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nTrue\n```\n:::\n:::\n\n\n## Type conversion (casting)\n\n::: {#b68b7b08 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:23.846051Z\",\"start_time\":\"2021-01-26T10:24:23.841709Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=17}\n``` {.python .cell-code}\na = 1\ntype(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nint\n```\n:::\n:::\n\n\n::: {#6db82a27 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:24.566291Z\",\"start_time\":\"2021-01-26T10:24:24.561510Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=18}\n``` {.python .cell-code}\nb = float(a)\ntype(b)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nfloat\n```\n:::\n:::\n\n\n::: {#b2c6abd4 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:44.986299Z\",\"start_time\":\"2021-01-26T10:24:44.981939Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=19}\n``` {.python .cell-code}\nstr(b)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n'1.0'\n```\n:::\n:::\n\n\n::: {#e5e33509 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:52.865090Z\",\"start_time\":\"2021-01-26T10:24:52.860248Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=20}\n``` {.python .cell-code}\nbool(b)\n# All non-zero, non empty objects are casted to boolean as True (more later)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#ff458fb0 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:24:59.506191Z\",\"start_time\":\"2021-01-26T10:24:59.502013Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=21}\n``` {.python .cell-code}\nbool(1-1)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nFalse\n```\n:::\n:::\n\n\n#  Containers\n\nPython provides many efficient types of *containers* or *sequences*, in which collections of objects can be stored. \n\nThe main ones are `list`, `tuple`, `set` and `dict` (but there are many others...)\n\n## Tuples\n\n::: {#0f4f5d7b .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:27:14.513637Z\",\"start_time\":\"2021-01-26T10:27:14.509638Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=22}\n``` {.python .cell-code}\ntt = 'truc', 3.14, \"truc\"\ntt\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n('truc', 3.14, 'truc')\n```\n:::\n:::\n\n\n::: {#07071d33 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:27:18.172578Z\",\"start_time\":\"2021-01-26T10:27:18.168425Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=23}\n``` {.python .cell-code}\ntt[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n'truc'\n```\n:::\n:::\n\n\nYou can't change a tuple, we say that it's *immutable*\n\n::: {#360325b4 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:02.315034Z\",\"start_time\":\"2021-01-26T10:28:02.306507Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=24}\n``` {.python .cell-code}\ntry:\n    tt[0] = 1\nexcept TypeError:\n    print(f\"TypeError: 'tuple' object does not support item assignment\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTypeError: 'tuple' object does not support item assignment\n```\n:::\n:::\n\n\nThree ways of doing the same thing\n\n::: {#f24fef4a .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:15.173558Z\",\"start_time\":\"2021-01-26T10:28:15.169603Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=25}\n``` {.python .cell-code}\n# Method 1\ntuple([1, 2, 3])\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n(1, 2, 3)\n```\n:::\n:::\n\n\n::: {#ef04cb97 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:18.262396Z\",\"start_time\":\"2021-01-26T10:28:18.257807Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=26}\n``` {.python .cell-code}\n# Method 2\n1, 2, 3\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n(1, 2, 3)\n```\n:::\n:::\n\n\n::: {#3e3d6f90 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:32.225077Z\",\"start_time\":\"2021-01-26T10:28:32.219931Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=27}\n``` {.python .cell-code}\n# Method 3\n(1, 2, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n(1, 2, 3)\n```\n:::\n:::\n\n\n**Simpler is better in Python**, so usually you want to use Method 2.\n\n::: {#3508cd7c .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:35.028409Z\",\"start_time\":\"2021-01-26T10:28:35.023677Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=28}\n``` {.python .cell-code}\ntoto = 1, 2, 3\ntoto\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n(1, 2, 3)\n```\n:::\n:::\n\n\n- This is serious !\n\n## The Zen of Python easter's egg\n\n::: {#8f2523af .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:41.814008Z\",\"start_time\":\"2021-01-26T10:28:41.805313Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=29}\n``` {.python .cell-code}\nimport this\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n```\n:::\n:::\n\n\n## Lists\n\nA list is an ordered collection of objects. These objects may have different types. For example:\n\n::: {#6767b883 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:28:56.683616Z\",\"start_time\":\"2021-01-26T10:28:56.680383Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=30}\n``` {.python .cell-code}\ncolors = ['red', 'blue', 'green', 'black', 'white']\n```\n:::\n\n\n::: {#ffc7dafb .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:21.606351Z\",\"start_time\":\"2021-01-26T10:29:21.601561Z\"}' execution_count=31}\n``` {.python .cell-code}\ncolors[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n'red'\n```\n:::\n:::\n\n\n::: {#f39cb67a .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:07.632451Z\",\"start_time\":\"2021-01-26T10:29:07.627681Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=32}\n``` {.python .cell-code}\ntype(colors)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nlist\n```\n:::\n:::\n\n\n*Indexing:* accessing individual objects contained in the list by their position\n\n::: {#9d0a8633 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:24.838416Z\",\"start_time\":\"2021-01-26T10:29:24.833616Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=33}\n``` {.python .cell-code}\ncolors[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n'green'\n```\n:::\n:::\n\n\n::: {#42f576f2 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:25.132251Z\",\"start_time\":\"2021-01-26T10:29:25.124359Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=34}\n``` {.python .cell-code}\ncolors[2] = 3.14\ncolors\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n['red', 'blue', 3.14, 'black', 'white']\n```\n:::\n:::\n\n\n::: {.callout-warning}\n\nFor any *iterable* object in Python, indexing *starts at 0* (as in C), not at 1 (as in Fortran, R, or Matlab).\n\n:::\n\nCounting from the end with negative indices:\n\n::: {#55f12695 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:44.258856Z\",\"start_time\":\"2021-01-26T10:29:44.254238Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=35}\n``` {.python .cell-code}\ncolors[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n'white'\n```\n:::\n:::\n\n\nIndex must remain in the range of the list\n\n::: {#e90dff0c .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:29:47.674912Z\",\"start_time\":\"2021-01-26T10:29:47.666346Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=36}\n``` {.python .cell-code}\ntry:\n    colors[10]\nexcept IndexError:\n    print(f\"IndexError: 10 >= {len(colors)} ==len(colors), index out of range \")\n```\n:::\n\n\n::: {#180b62df .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:01.912160Z\",\"start_time\":\"2021-01-26T10:30:01.907265Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=37}\n``` {.python .cell-code}\ncolors\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n['red', 'blue', 3.14, 'black', 'white']\n```\n:::\n:::\n\n\n::: {#4342af9e .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:02.143331Z\",\"start_time\":\"2021-01-26T10:30:02.137270Z\"}' execution_count=38}\n``` {.python .cell-code}\ntt\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n('truc', 3.14, 'truc')\n```\n:::\n:::\n\n\n::: {#a311ce70 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:34.000220Z\",\"start_time\":\"2021-01-26T10:30:33.995039Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=39}\n``` {.python .cell-code}\ncolors.append(tt)\ncolors\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n['red', 'blue', 3.14, 'black', 'white', ('truc', 3.14, 'truc')]\n```\n:::\n:::\n\n\n::: {#5bf63b24 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:47.434827Z\",\"start_time\":\"2021-01-26T10:30:47.429744Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=40}\n``` {.python .cell-code}\nlen(colors)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n6\n```\n:::\n:::\n\n\n::: {#05deb356 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:52.949200Z\",\"start_time\":\"2021-01-26T10:30:52.944225Z\"}' execution_count=41}\n``` {.python .cell-code}\nlen(tt)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n3\n```\n:::\n:::\n\n\n## Slicing: obtaining sublists of regularly-spaced elements\n\nThis work with anything iterable whenever it makes sense (`list`, `str`, `tuple`, etc.)\n\n::: {#46a6a21f .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:30:59.895713Z\",\"start_time\":\"2021-01-26T10:30:59.890434Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=42}\n``` {.python .cell-code}\ncolors\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n['red', 'blue', 3.14, 'black', 'white', ('truc', 3.14, 'truc')]\n```\n:::\n:::\n\n\n::: {#819fe734 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:31:26.118892Z\",\"start_time\":\"2021-01-26T10:31:26.113811Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=43}\n``` {.python .cell-code}\nlist(reversed(colors))\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n[('truc', 3.14, 'truc'), 'white', 'black', 3.14, 'blue', 'red']\n```\n:::\n:::\n\n\n::: {#729998a3 .cell ExecuteTime='{\"end_time\":\"2021-01-26T10:32:55.756965Z\",\"start_time\":\"2021-01-26T10:32:55.752090Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=44}\n``` {.python .cell-code}\ncolors[::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n[('truc', 3.14, 'truc'), 'white', 'black', 3.14, 'blue', 'red']\n```\n:::\n:::\n\n\n::: {.callout-important}\n\n### Slicing syntax: \n\n`colors[start:stop:stride]`\n\n`start, stop, stride` are optional, with default values `0, len(sequence), 1`\n\n:::\nl\n\n::: {#29885a68 .cell execution_count=45}\n``` {.python .cell-code}\nprint(slice(4))\nprint(slice(1,5))\nprint(slice(None,13,3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nslice(None, 4, None)\nslice(1, 5, None)\nslice(None, 13, 3)\n```\n:::\n:::\n\n\n::: {#df3d31cd .cell execution_count=46}\n``` {.python .cell-code}\nsl = slice(1,5,2)\ncolors[sl]\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n['blue', 'black']\n```\n:::\n:::\n\n\n::: {#9d3dd6f3 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:10.985959Z\",\"start_time\":\"2021-01-15T08:34:10.980519Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=47}\n``` {.python .cell-code}\ncolors\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n['red', 'blue', 3.14, 'black', 'white', ('truc', 3.14, 'truc')]\n```\n:::\n:::\n\n\n::: {#0d90aed8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:11.188011Z\",\"start_time\":\"2021-01-15T08:34:11.182382Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=48}\n``` {.python .cell-code}\ncolors[3:]\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n['black', 'white', ('truc', 3.14, 'truc')]\n```\n:::\n:::\n\n\n::: {#21cf4d79 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:11.462017Z\",\"start_time\":\"2021-01-15T08:34:11.457005Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=49}\n``` {.python .cell-code}\ncolors[:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n['red', 'blue', 3.14]\n```\n:::\n:::\n\n\n::: {#8dce4003 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:11.666073Z\",\"start_time\":\"2021-01-15T08:34:11.661006Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=50}\n``` {.python .cell-code}\ncolors[1::2]\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n['blue', 'black', ('truc', 3.14, 'truc')]\n```\n:::\n:::\n\n\n::: {#ca5c62d4 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:11.892685Z\",\"start_time\":\"2021-01-15T08:34:11.886394Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=51}\n``` {.python .cell-code}\ncolors[::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n[('truc', 3.14, 'truc'), 'white', 'black', 3.14, 'blue', 'red']\n```\n:::\n:::\n\n\n## Strings\n\nDifferent string syntaxes (simple, double or triple quotes):\n\n::: {#8688e0ba .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:12.527044Z\",\"start_time\":\"2021-01-15T08:34:12.522242Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=52}\n``` {.python .cell-code}\ns = 'tintin'\ntype(s)\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\nstr\n```\n:::\n:::\n\n\n::: {#c8ad06ed .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:12.741025Z\",\"start_time\":\"2021-01-15T08:34:12.735783Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=53}\n``` {.python .cell-code}\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n'tintin'\n```\n:::\n:::\n\n\n::: {#1d2e50c6 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:12.954647Z\",\"start_time\":\"2021-01-15T08:34:12.948403Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=54}\n``` {.python .cell-code}\ns = \"\"\"         Bonjour,\nJe m'appelle Stephane.\nJe vous souhaite une bonne journée.\nSalut.       \n\"\"\"\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n\"         Bonjour,\\nJe m'appelle Stephane.\\nJe vous souhaite une bonne journée.\\nSalut.       \\n\"\n```\n:::\n:::\n\n\n::: {#6a7bfd6d .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:13.096374Z\",\"start_time\":\"2021-01-15T08:34:13.091122Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=55}\n``` {.python .cell-code}\ns.strip()\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\n\"Bonjour,\\nJe m'appelle Stephane.\\nJe vous souhaite une bonne journée.\\nSalut.\"\n```\n:::\n:::\n\n\n::: {#444fbc2f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:13.378652Z\",\"start_time\":\"2021-01-15T08:34:13.372858Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=56}\n``` {.python .cell-code}\nprint(s.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBonjour,\nJe m'appelle Stephane.\nJe vous souhaite une bonne journée.\nSalut.\n```\n:::\n:::\n\n\n::: {#b6b3fc7d .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:13.455410Z\",\"start_time\":\"2021-01-15T08:34:13.449943Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=57}\n``` {.python .cell-code}\nlen(s)\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\n91\n```\n:::\n:::\n\n\n::: {#db2b224b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:14.309647Z\",\"start_time\":\"2021-01-15T08:34:14.304154Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=58}\n``` {.python .cell-code}\n# Casting to a list\nlist(s.strip()[:15])\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n['B', 'o', 'n', 'j', 'o', 'u', 'r', ',', '\\n', 'J', 'e', ' ', 'm', \"'\", 'a']\n```\n:::\n:::\n\n\n::: {#a69ddd57 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:14.523496Z\",\"start_time\":\"2021-01-15T08:34:14.518586Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=59}\n``` {.python .cell-code}\n# Arithmetics\nprint('Bonjour' * 2)\nprint('Hello' + ' all')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBonjourBonjour\nHello all\n```\n:::\n:::\n\n\n::: {#d40e528e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:15.160961Z\",\"start_time\":\"2021-01-15T08:34:15.155909Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=60}\n``` {.python .cell-code}\nsss = 'A'\nsss += 'bc'\nsss += 'dE'\nsss.lower()\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\n'abcde'\n```\n:::\n:::\n\n\n::: {#61a5bd2e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:15.363145Z\",\"start_time\":\"2021-01-15T08:34:15.357847Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=61}\n``` {.python .cell-code}\nss = s.strip()\nprint(ss[:10] + ss[24:28])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBonjour,\nJepha\n```\n:::\n:::\n\n\n::: {#1d55d7a2 .cell execution_count=62}\n``` {.python .cell-code}\ns.strip()\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\n\"Bonjour,\\nJe m'appelle Stephane.\\nJe vous souhaite une bonne journée.\\nSalut.\"\n```\n:::\n:::\n\n\n::: {#fd6053f7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:15.594172Z\",\"start_time\":\"2021-01-15T08:34:15.588495Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=63}\n``` {.python .cell-code}\ns.strip().split('\\n')\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\n['Bonjour,',\n \"Je m'appelle Stephane.\",\n 'Je vous souhaite une bonne journée.',\n 'Salut.']\n```\n:::\n:::\n\n\n::: {#74650690 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:17.689813Z\",\"start_time\":\"2021-01-15T08:34:17.684346Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=64}\n``` {.python .cell-code}\ns[::3]\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n'   BjrJmpl ea.eo ui eoeon.at  \\n'\n```\n:::\n:::\n\n\n::: {#6b4b8e1b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:23.785045Z\",\"start_time\":\"2021-01-15T08:34:23.779973Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=65}\n``` {.python .cell-code}\ns[3:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n'      B'\n```\n:::\n:::\n\n\n::: {#64a62774 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:23.993089Z\",\"start_time\":\"2021-01-15T08:34:23.987450Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=66}\n``` {.python .cell-code}\n\" \".join(['Il', 'fait', 'super', 'beau', \"aujourd'hui\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\n\"Il fait super beau aujourd'hui\"\n```\n:::\n:::\n\n\nChaining method calls is the basic of pipeline building. \n\n::: {#0db1b199 .cell execution_count=67}\n``` {.python .cell-code}\n( \n    \" \".join(['Il', 'fait', 'super', 'beau', \"aujourd'hui\"])\n       .title()\n       .replace(' ', '')\n       .replace(\"'\",\"\")\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\n'IlFaitSuperBeauAujourdHui'\n```\n:::\n:::\n\n\n### Important\n\nA string is *immutable* !!\n\n::: {#c77ab014 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:24.332754Z\",\"start_time\":\"2021-01-15T08:34:24.329558Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=68}\n``` {.python .cell-code}\ns = 'I am an immutable guy'\n```\n:::\n\n\n::: {#ec020e1e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:24.511029Z\",\"start_time\":\"2021-01-15T08:34:24.499601Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=69}\n``` {.python .cell-code}\ntry:  \n    s[2] = 's'\nexcept TypeError:\n    print(f\"Strings are immutable! s is still '{s}'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStrings are immutable! s is still 'I am an immutable guy'\n```\n:::\n:::\n\n\n::: {#f6ca0be7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:24.732120Z\",\"start_time\":\"2021-01-15T08:34:24.725628Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=70}\n``` {.python .cell-code}\nid(s)\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\n132790602760240\n```\n:::\n:::\n\n\n::: {#b9a88205 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:25.275379Z\",\"start_time\":\"2021-01-15T08:34:25.269724Z\"}' execution_count=71}\n``` {.python .cell-code}\nprint(s + ', for sure')\nid(s), id(s + ' for sure')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI am an immutable guy, for sure\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n(132790602760240, 132790076549968)\n```\n:::\n:::\n\n\n### Extra stuff with strings\n\n::: {#57415846 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:25.685455Z\",\"start_time\":\"2021-01-15T08:34:25.679575Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=72}\n``` {.python .cell-code}\n'square of 2 is ' + str(2 ** 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\n'square of 2 is 4'\n```\n:::\n:::\n\n\n::: {#b17b854b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:26.075613Z\",\"start_time\":\"2021-01-15T08:34:26.070551Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=73}\n``` {.python .cell-code}\n'square of 2 is %d' % 2 ** 2\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\n'square of 2 is 4'\n```\n:::\n:::\n\n\n::: {#dd16422c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:28.906445Z\",\"start_time\":\"2021-01-15T08:34:28.900777Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=74}\n``` {.python .cell-code}\n'square of 2 is {}'.format(2 ** 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\n'square of 2 is 4'\n```\n:::\n:::\n\n\n::: {#ea3b5b88 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:29.230345Z\",\"start_time\":\"2021-01-15T08:34:29.225362Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=75}\n``` {.python .cell-code}\n'square of 2 is {square}'.format(square=2 ** 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\n'square of 2 is 4'\n```\n:::\n:::\n\n\n::: {#23cf178c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:29.464228Z\",\"start_time\":\"2021-01-15T08:34:29.457777Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=76}\n``` {.python .cell-code}\n# And since Python 3.6 you can use an `f-string`\nnumber = 2\nsquare = number ** 2\n\nf'square of {number} is {square}'\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n```\n'square of 2 is 4'\n```\n:::\n:::\n\n\n### The `in` keyword\n\nYou can use the `in` keyword with any container, whenever it makes sense\n\n::: {#5615b5c1 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:29.779042Z\",\"start_time\":\"2021-01-15T08:34:29.774313Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=77}\n``` {.python .cell-code}\nprint(s)\nprint('Salut' in s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI am an immutable guy\nFalse\n```\n:::\n:::\n\n\n::: {#4b56d37a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:30.599065Z\",\"start_time\":\"2021-01-15T08:34:30.595645Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=78}\n``` {.python .cell-code}\nprint(tt)\nprint('truc' in tt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('truc', 3.14, 'truc')\nTrue\n```\n:::\n:::\n\n\n::: {#4239b4c2 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:30.819735Z\",\"start_time\":\"2021-01-15T08:34:30.813275Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=79}\n``` {.python .cell-code}\nprint(colors)\nprint('truc' in colors)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['red', 'blue', 3.14, 'black', 'white', ('truc', 3.14, 'truc')]\nFalse\n```\n:::\n:::\n\n\n::: {#b6a86073 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:31.035913Z\",\"start_time\":\"2021-01-15T08:34:31.030502Z\"}' execution_count=80}\n``` {.python .cell-code}\n('truc', 3.14, 'truc') in colors\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.callout-warning}\n\nStrings are not bytes. Have a look at chapter 4 *Unicode Text versus Bytes* in [Fluent Python](https://www.oreilly.com/library/view/fluent-python-2nd/9781492056348/) \n\n:::\n\n### Brain-teasing\n\nExplain this weird behaviour:\n\n::: {#015cd6a5 .cell execution_count=81}\n``` {.python .cell-code}\n5 in [1, 2, 3, 4] == False\n```\n\n::: {.cell-output .cell-output-display execution_count=80}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#a4b3f6db .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:31.612963Z\",\"start_time\":\"2021-01-15T08:34:31.607708Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=82}\n``` {.python .cell-code}\n[1, 2, 3, 4] == False\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#c8cec7b9 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:31.825068Z\",\"start_time\":\"2021-01-15T08:34:31.819205Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=83}\n``` {.python .cell-code}\n5 not in [1, 2, 3, 4]\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#e82a36f5 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:32.299157Z\",\"start_time\":\"2021-01-15T08:34:32.293640Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=84}\n``` {.python .cell-code}\n(5 in [1, 2, 3, 4]) == False\n```\n\n::: {.cell-output .cell-output-display execution_count=83}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#fa61c242 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:32.524705Z\",\"start_time\":\"2021-01-15T08:34:32.518440Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=85}\n``` {.python .cell-code}\n# ANSWER.\n# This is a chained comparison. We have seen that \n1 < 2 < 3\n# is equivalent to\n(1 < 2) and (2 < 3)\n# so that\n5 in [1, 2, 3, 4] == False\n# is equivalent to\n(5 in [1, 2, 3, 4]) and ([1, 2, 3, 4] == False)\n```\n\n::: {.cell-output .cell-output-display execution_count=84}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#febf64e5 .cell execution_count=86}\n``` {.python .cell-code}\n(5 in [1, 2, 3, 4])\n```\n\n::: {.cell-output .cell-output-display execution_count=85}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#d55759f6 .cell execution_count=87}\n``` {.python .cell-code}\n([1, 2, 3, 4] == False)\n```\n\n::: {.cell-output .cell-output-display execution_count=86}\n```\nFalse\n```\n:::\n:::\n\n\n## Dictionaries\n\n- A dictionary is basically an efficient table that **maps keys to values**.\n- The **MOST** important container in Python. \n- Many things are actually a `dict` under the hood in `Python`\n\n::: {#b4b3ae04 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:33.375226Z\",\"start_time\":\"2021-01-15T08:34:33.371037Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=88}\n``` {.python .cell-code}\ntel = {'emmanuelle': 5752, 'sebastian': 5578}\nprint(tel)\nprint(type(tel))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'emmanuelle': 5752, 'sebastian': 5578}\n<class 'dict'>\n```\n:::\n:::\n\n\n::: {#ce817b52 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:33.572354Z\",\"start_time\":\"2021-01-15T08:34:33.566227Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=89}\n``` {.python .cell-code}\ntel['emmanuelle'], tel['sebastian']\n```\n\n::: {.cell-output .cell-output-display execution_count=88}\n```\n(5752, 5578)\n```\n:::\n:::\n\n\n::: {#02c4f3e7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:33.711591Z\",\"start_time\":\"2021-01-15T08:34:33.705748Z\"}' execution_count=90}\n``` {.python .cell-code}\ntel['francis'] = '5919'\ntel\n```\n\n::: {.cell-output .cell-output-display execution_count=89}\n```\n{'emmanuelle': 5752, 'sebastian': 5578, 'francis': '5919'}\n```\n:::\n:::\n\n\n::: {#b9cce793 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:33.889041Z\",\"start_time\":\"2021-01-15T08:34:33.883802Z\"}' execution_count=91}\n``` {.python .cell-code}\nlen(tel)\n```\n\n::: {.cell-output .cell-output-display execution_count=90}\n```\n3\n```\n:::\n:::\n\n\n### Important remarks\n\n- Keys can be of different types\n- A key must be of **immutable** type\n\n::: {#33598097 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:35.180227Z\",\"start_time\":\"2021-01-15T08:34:35.172919Z\"}' execution_count=92}\n``` {.python .cell-code}\ntel[7162453] = [1, 3, 2]\ntel[3.14] = 'bidule'\ntel[('jaouad', 2)] = 1234\ntel\n```\n\n::: {.cell-output .cell-output-display execution_count=91}\n```\n{'emmanuelle': 5752,\n 'sebastian': 5578,\n 'francis': '5919',\n 7162453: [1, 3, 2],\n 3.14: 'bidule',\n ('jaouad', 2): 1234}\n```\n:::\n:::\n\n\n::: {#5daec5b9 .cell execution_count=93}\n``` {.python .cell-code}\ntry:\n    sorted(tel)\nexcept TypeError:\n    print(\"TypeError: '<' not supported between instances of 'int' and 'str'\")    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTypeError: '<' not supported between instances of 'int' and 'str'\n```\n:::\n:::\n\n\n::: {#3ac6869b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:35.781423Z\",\"start_time\":\"2021-01-15T08:34:35.770370Z\"}' execution_count=94}\n``` {.python .cell-code}\n# A list is mutable and not hashable\ntry:\n    tel[['jaouad']] = '5678'\nexcept TypeError:\n    print(\"TypeError: unhashable type: 'list'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTypeError: unhashable type: 'list'\n```\n:::\n:::\n\n\n::: {#92068124 .cell execution_count=95}\n``` {.python .cell-code}\ntry:\n    tel[2]\nexcept KeyError:\n    print(\"KeyError: 2\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nKeyError: 2\n```\n:::\n:::\n\n\n::: {#2792a5e3 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:35.984417Z\",\"start_time\":\"2021-01-15T08:34:35.978289Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=96}\n``` {.python .cell-code}\ntel = {'emmanuelle': 5752, 'sebastian' : 5578, 'jaouad' : 1234}\nprint(tel.keys())\nprint(tel.values())\nprint(tel.items())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndict_keys(['emmanuelle', 'sebastian', 'jaouad'])\ndict_values([5752, 5578, 1234])\ndict_items([('emmanuelle', 5752), ('sebastian', 5578), ('jaouad', 1234)])\n```\n:::\n:::\n\n\n::: {#7726efa7 .cell execution_count=97}\n``` {.python .cell-code}\nlist(tel.keys())[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=96}\n```\n'jaouad'\n```\n:::\n:::\n\n\n::: {#37e26655 .cell execution_count=98}\n``` {.python .cell-code}\ntel.values().mapping\n```\n\n::: {.cell-output .cell-output-display execution_count=97}\n```\nmappingproxy({'emmanuelle': 5752, 'sebastian': 5578, 'jaouad': 1234})\n```\n:::\n:::\n\n\n::: {#555d701a .cell execution_count=99}\n``` {.python .cell-code}\ntype(tel.keys())\n```\n\n::: {.cell-output .cell-output-display execution_count=98}\n```\ndict_keys\n```\n:::\n:::\n\n\n::: {#34b3203b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:36.135136Z\",\"start_time\":\"2021-01-15T08:34:36.129801Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=100}\n``` {.python .cell-code}\n'rémi' in tel\n```\n\n::: {.cell-output .cell-output-display execution_count=99}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#ab956981 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:36.649224Z\",\"start_time\":\"2021-01-15T08:34:36.643788Z\"}' execution_count=101}\n``` {.python .cell-code}\nlist(tel)\n```\n\n::: {.cell-output .cell-output-display execution_count=100}\n```\n['emmanuelle', 'sebastian', 'jaouad']\n```\n:::\n:::\n\n\n::: {#4762d012 .cell execution_count=102}\n``` {.python .cell-code}\n'rémi' in tel.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=101}\n```\nFalse\n```\n:::\n:::\n\n\nYou can swap values like this\n\n::: {#7a527d9f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:37.036245Z\",\"start_time\":\"2021-01-15T08:34:37.032296Z\"}' execution_count=103}\n``` {.python .cell-code}\nprint(tel)\ntel['emmanuelle'], tel['sebastian'] = tel['sebastian'], tel['emmanuelle']\nprint(tel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'emmanuelle': 5752, 'sebastian': 5578, 'jaouad': 1234}\n{'emmanuelle': 5578, 'sebastian': 5752, 'jaouad': 1234}\n```\n:::\n:::\n\n\n::: {#9e1f22a2 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:37.755117Z\",\"start_time\":\"2021-01-15T08:34:37.750155Z\"}' execution_count=104}\n``` {.python .cell-code}\n# It works, since\na, b = 2.71, 3.14\na, b = b, a\na, b\n```\n\n::: {.cell-output .cell-output-display execution_count=103}\n```\n(3.14, 2.71)\n```\n:::\n:::\n\n\n### Exercise 1\n\nGet keys of `tel` sorted by decreasing order\n\n::: {#f7d436e3 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:38.375787Z\",\"start_time\":\"2021-01-15T08:34:38.372593Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=105}\n``` {.python .cell-code}\ntel = {'emmanuelle': 5752, 'sebastian' : 5578, 'jaouad' : 1234}\n```\n:::\n\n\n::: {.content-visible when-profile='solution'} \n \n#### Answer\n\n::: {#06244ce0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:38.860742Z\",\"start_time\":\"2021-01-15T08:34:38.855547Z\"}' execution_count=106}\n``` {.python .cell-code}\nsorted(tel, reverse=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=105}\n```\n['sebastian', 'jaouad', 'emmanuelle']\n```\n:::\n:::\n\n\n::: {#22d41f7d .cell execution_count=107}\n``` {.python .cell-code}\ntype(sorted(tel, reverse=True))\n```\n\n::: {.cell-output .cell-output-display execution_count=106}\n```\nlist\n```\n:::\n:::\n\n\n:::\n\n### Exercise 2\n\nGet keys of `tel` sorted by increasing _values_\n\n::: {#17511b36 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:39.295210Z\",\"start_time\":\"2021-01-15T08:34:39.291759Z\"}' execution_count=108}\n``` {.python .cell-code}\ntel = {'emmanuelle': 5752, 'sebastian' : 5578, 'jaouad' : 1234}\n```\n:::\n\n\n::: {.content-visible when-profile='solution'} \n \n#### Answer\n\n::: {#910a60cb .cell execution_count=109}\n``` {.python .cell-code}\ntel[\"sebastian\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=108}\n```\n5578\n```\n:::\n:::\n\n\n::: {#1295ea3a .cell execution_count=110}\n``` {.python .cell-code}\ntel.get('rémi')\n```\n:::\n\n\n::: {#fe92f527 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:39.696800Z\",\"start_time\":\"2021-01-15T08:34:39.691171Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=111}\n``` {.python .cell-code}\nsorted(tel, key=tel.get)\n```\n\n::: {.cell-output .cell-output-display execution_count=110}\n```\n['jaouad', 'sebastian', 'emmanuelle']\n```\n:::\n:::\n\n\n:::\n\n### Exercise 3\n\nObtain a sorted-by-key version of `tel`\n\n::: {#7ea6e3f5 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:40.064213Z\",\"start_time\":\"2021-01-15T08:34:40.060078Z\"}' execution_count=112}\n``` {.python .cell-code}\ntel = {'emmanuelle': 5752, 'sebastian' : 5578, 'jaouad' : 1234}\n```\n:::\n\n\n::: {.content-visible when-profile='solution'} \n \n#### Answer\n\n- A dict is inherently **orderless**\n- Only a _representation_ of a dict can be ordered\n\n::: {#6f7046de .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:41.012018Z\",\"start_time\":\"2021-01-15T08:34:41.006814Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=113}\n``` {.python .cell-code}\n# Simplest is through a list\nprint(type(tel.items()))\nissubclass(type(tel.items()), list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'dict_items'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=112}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#3dba9ff4 .cell execution_count=114}\n``` {.python .cell-code}\nsorted(tel.items())\n```\n\n::: {.cell-output .cell-output-display execution_count=113}\n```\n[('emmanuelle', 5752), ('jaouad', 1234), ('sebastian', 5578)]\n```\n:::\n:::\n\n\nIf you really want an ordered dict `OrderDict` memorizes order of insertion in it\n\n::: {#e9b7d9c8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:41.406578Z\",\"start_time\":\"2021-01-15T08:34:41.400640Z\"}' execution_count=115}\n``` {.python .cell-code}\nfrom collections import OrderedDict\n\nOrderedDict(sorted(tel.items()))\n```\n\n::: {.cell-output .cell-output-display execution_count=114}\n```\nOrderedDict([('emmanuelle', 5752), ('jaouad', 1234), ('sebastian', 5578)])\n```\n:::\n:::\n\n\n:::\n\n## Sets\n\nA set is an unordered container, containing unique elements\n\n::: {#d578d76e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:43.408375Z\",\"start_time\":\"2021-01-15T08:34:43.402917Z\"}' execution_count=116}\n``` {.python .cell-code}\nss = {1, 2, 2, 2, 3, 3, 'tintin', 'tintin', 'toto'}\nss\n```\n\n::: {.cell-output .cell-output-display execution_count=115}\n```\n{1, 2, 3, 'tintin', 'toto'}\n```\n:::\n:::\n\n\n::: {#749322d3 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:43.689264Z\",\"start_time\":\"2021-01-15T08:34:43.683234Z\"}' execution_count=117}\n``` {.python .cell-code}\ns = 'truc truc bidule truc'\nset(s)\n```\n\n::: {.cell-output .cell-output-display execution_count=116}\n```\n{' ', 'b', 'c', 'd', 'e', 'i', 'l', 'r', 't', 'u'}\n```\n:::\n:::\n\n\n::: {#08154fce .cell execution_count=118}\n``` {.python .cell-code}\nset(list(s))\n```\n\n::: {.cell-output .cell-output-display execution_count=117}\n```\n{' ', 'b', 'c', 'd', 'e', 'i', 'l', 'r', 't', 'u'}\n```\n:::\n:::\n\n\n::: {#1c4b90a7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:43.900734Z\",\"start_time\":\"2021-01-15T08:34:43.894591Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=119}\n``` {.python .cell-code}\n{1, 5, 2, 1, 1}.union({1, 2, 3})\n```\n\n::: {.cell-output .cell-output-display execution_count=118}\n```\n{1, 2, 3, 5}\n```\n:::\n:::\n\n\n::: {#a27a6e9a .cell execution_count=120}\n``` {.python .cell-code}\nset((1, 5, 3, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=119}\n```\n{1, 2, 3, 5}\n```\n:::\n:::\n\n\n::: {#54afad38 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:44.236053Z\",\"start_time\":\"2021-01-15T08:34:44.230406Z\"}' execution_count=121}\n``` {.python .cell-code}\nset([1, 5, 2, 1, 1]).intersection(set([1, 2, 3]))\n```\n\n::: {.cell-output .cell-output-display execution_count=120}\n```\n{1, 2}\n```\n:::\n:::\n\n\n::: {#14dff9f6 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:44.521051Z\",\"start_time\":\"2021-01-15T08:34:44.515051Z\"}' execution_count=122}\n``` {.python .cell-code}\nss.add('tintin')\nss\n```\n\n::: {.cell-output .cell-output-display execution_count=121}\n```\n{1, 2, 3, 'tintin', 'toto'}\n```\n:::\n:::\n\n\n::: {#8a64f499 .cell execution_count=123}\n``` {.python .cell-code}\nss.difference(range(6))\n```\n\n::: {.cell-output .cell-output-display execution_count=122}\n```\n{'tintin', 'toto'}\n```\n:::\n:::\n\n\nYou can combine all containers together\n\n::: {#2896a42e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:45.317823Z\",\"start_time\":\"2021-01-15T08:34:45.310957Z\"}' execution_count=124}\n``` {.python .cell-code}\ndd = {\n    'truc': [1, 2, 3], \n    5: (1, 4, 2),\n    (1, 3): {'hello', 'world'}\n}\ndd\n```\n\n::: {.cell-output .cell-output-display execution_count=123}\n```\n{'truc': [1, 2, 3], 5: (1, 4, 2), (1, 3): {'hello', 'world'}}\n```\n:::\n:::\n\n\n# Assigments in `Python` is name binding\n\n## Everything is either mutable or immutable\n\n::: {#dd9fa348 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:46.250900Z\",\"start_time\":\"2021-01-15T08:34:46.245797Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=125}\n``` {.python .cell-code}\nss = {1, 2, 3}\nsss = ss\nsss, ss\n```\n\n::: {.cell-output .cell-output-display execution_count=124}\n```\n({1, 2, 3}, {1, 2, 3})\n```\n:::\n:::\n\n\n::: {#671124b7 .cell execution_count=126}\n``` {.python .cell-code}\nid(ss), id(sss)\n```\n\n::: {.cell-output .cell-output-display execution_count=125}\n```\n(132789088710304, 132789088710304)\n```\n:::\n:::\n\n\n::: {#6c24eb32 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:46.487601Z\",\"start_time\":\"2021-01-15T08:34:46.484299Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=127}\n``` {.python .cell-code}\nsss.add(\"Truc\")\n```\n:::\n\n\n**Question.** What is in `ss` ?\n\n::: {#bae46de6 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:47.555940Z\",\"start_time\":\"2021-01-15T08:34:47.549993Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=128}\n``` {.python .cell-code}\nss, sss\n```\n\n::: {.cell-output .cell-output-display execution_count=127}\n```\n({1, 2, 3, 'Truc'}, {1, 2, 3, 'Truc'})\n```\n:::\n:::\n\n\n`ss` and `sss` are names for the same object\n\n::: {#38d6dbc6 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:47.889439Z\",\"start_time\":\"2021-01-15T08:34:47.883802Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=129}\n``` {.python .cell-code}\nid(ss), id(sss)\n```\n\n::: {.cell-output .cell-output-display execution_count=128}\n```\n(132789088710304, 132789088710304)\n```\n:::\n:::\n\n\n::: {#522febcf .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:48.385040Z\",\"start_time\":\"2021-01-15T08:34:48.380259Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=130}\n``` {.python .cell-code}\nss is sss\n```\n\n::: {.cell-output .cell-output-display execution_count=129}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#1a20aad4 .cell execution_count=131}\n``` {.python .cell-code}\nhelp('is')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nComparisons\n***********\n\nUnlike C, all comparison operations in Python have the same priority,\nwhich is lower than that of any arithmetic, shifting or bitwise\noperation.  Also unlike C, expressions like \"a < b < c\" have the\ninterpretation that is conventional in mathematics:\n\n   comparison    ::= or_expr (comp_operator or_expr)*\n   comp_operator ::= \"<\" | \">\" | \"==\" | \">=\" | \"<=\" | \"!=\"\n                     | \"is\" [\"not\"] | [\"not\"] \"in\"\n\nComparisons yield boolean values: \"True\" or \"False\". Custom *rich\ncomparison methods* may return non-boolean values. In this case Python\nwill call \"bool()\" on such value in boolean contexts.\n\nComparisons can be chained arbitrarily, e.g., \"x < y <= z\" is\nequivalent to \"x < y and y <= z\", except that \"y\" is evaluated only\nonce (but in both cases \"z\" is not evaluated at all when \"x < y\" is\nfound to be false).\n\nFormally, if *a*, *b*, *c*, …, *y*, *z* are expressions and *op1*,\n*op2*, …, *opN* are comparison operators, then \"a op1 b op2 c ... y\nopN z\" is equivalent to \"a op1 b and b op2 c and ... y opN z\", except\nthat each expression is evaluated at most once.\n\nNote that \"a op1 b op2 c\" doesn’t imply any kind of comparison between\n*a* and *c*, so that, e.g., \"x < y > z\" is perfectly legal (though\nperhaps not pretty).\n\n\nValue comparisons\n=================\n\nThe operators \"<\", \">\", \"==\", \">=\", \"<=\", and \"!=\" compare the values\nof two objects.  The objects do not need to have the same type.\n\nChapter Objects, values and types states that objects have a value (in\naddition to type and identity).  The value of an object is a rather\nabstract notion in Python: For example, there is no canonical access\nmethod for an object’s value.  Also, there is no requirement that the\nvalue of an object should be constructed in a particular way, e.g.\ncomprised of all its data attributes. Comparison operators implement a\nparticular notion of what the value of an object is.  One can think of\nthem as defining the value of an object indirectly, by means of their\ncomparison implementation.\n\nBecause all types are (direct or indirect) subtypes of \"object\", they\ninherit the default comparison behavior from \"object\".  Types can\ncustomize their comparison behavior by implementing *rich comparison\nmethods* like \"__lt__()\", described in Basic customization.\n\nThe default behavior for equality comparison (\"==\" and \"!=\") is based\non the identity of the objects.  Hence, equality comparison of\ninstances with the same identity results in equality, and equality\ncomparison of instances with different identities results in\ninequality.  A motivation for this default behavior is the desire that\nall objects should be reflexive (i.e. \"x is y\" implies \"x == y\").\n\nA default order comparison (\"<\", \">\", \"<=\", and \">=\") is not provided;\nan attempt raises \"TypeError\".  A motivation for this default behavior\nis the lack of a similar invariant as for equality.\n\nThe behavior of the default equality comparison, that instances with\ndifferent identities are always unequal, may be in contrast to what\ntypes will need that have a sensible definition of object value and\nvalue-based equality.  Such types will need to customize their\ncomparison behavior, and in fact, a number of built-in types have done\nthat.\n\nThe following list describes the comparison behavior of the most\nimportant built-in types.\n\n* Numbers of built-in numeric types (Numeric Types — int, float,\n  complex) and of the standard library types \"fractions.Fraction\" and\n  \"decimal.Decimal\" can be compared within and across their types,\n  with the restriction that complex numbers do not support order\n  comparison.  Within the limits of the types involved, they compare\n  mathematically (algorithmically) correct without loss of precision.\n\n  The not-a-number values \"float('NaN')\" and \"decimal.Decimal('NaN')\"\n  are special.  Any ordered comparison of a number to a not-a-number\n  value is false. A counter-intuitive implication is that not-a-number\n  values are not equal to themselves.  For example, if \"x =\n  float('NaN')\", \"3 < x\", \"x < 3\" and \"x == x\" are all false, while \"x\n  != x\" is true.  This behavior is compliant with IEEE 754.\n\n* \"None\" and \"NotImplemented\" are singletons.  **PEP 8** advises that\n  comparisons for singletons should always be done with \"is\" or \"is\n  not\", never the equality operators.\n\n* Binary sequences (instances of \"bytes\" or \"bytearray\") can be\n  compared within and across their types.  They compare\n  lexicographically using the numeric values of their elements.\n\n* Strings (instances of \"str\") compare lexicographically using the\n  numerical Unicode code points (the result of the built-in function\n  \"ord()\") of their characters. [3]\n\n  Strings and binary sequences cannot be directly compared.\n\n* Sequences (instances of \"tuple\", \"list\", or \"range\") can be compared\n  only within each of their types, with the restriction that ranges do\n  not support order comparison.  Equality comparison across these\n  types results in inequality, and ordering comparison across these\n  types raises \"TypeError\".\n\n  Sequences compare lexicographically using comparison of\n  corresponding elements.  The built-in containers typically assume\n  identical objects are equal to themselves.  That lets them bypass\n  equality tests for identical objects to improve performance and to\n  maintain their internal invariants.\n\n  Lexicographical comparison between built-in collections works as\n  follows:\n\n  * For two collections to compare equal, they must be of the same\n    type, have the same length, and each pair of corresponding\n    elements must compare equal (for example, \"[1,2] == (1,2)\" is\n    false because the type is not the same).\n\n  * Collections that support order comparison are ordered the same as\n    their first unequal elements (for example, \"[1,2,x] <= [1,2,y]\"\n    has the same value as \"x <= y\").  If a corresponding element does\n    not exist, the shorter collection is ordered first (for example,\n    \"[1,2] < [1,2,3]\" is true).\n\n* Mappings (instances of \"dict\") compare equal if and only if they\n  have equal \"(key, value)\" pairs. Equality comparison of the keys and\n  values enforces reflexivity.\n\n  Order comparisons (\"<\", \">\", \"<=\", and \">=\") raise \"TypeError\".\n\n* Sets (instances of \"set\" or \"frozenset\") can be compared within and\n  across their types.\n\n  They define order comparison operators to mean subset and superset\n  tests.  Those relations do not define total orderings (for example,\n  the two sets \"{1,2}\" and \"{2,3}\" are not equal, nor subsets of one\n  another, nor supersets of one another).  Accordingly, sets are not\n  appropriate arguments for functions which depend on total ordering\n  (for example, \"min()\", \"max()\", and \"sorted()\" produce undefined\n  results given a list of sets as inputs).\n\n  Comparison of sets enforces reflexivity of its elements.\n\n* Most other built-in types have no comparison methods implemented, so\n  they inherit the default comparison behavior.\n\nUser-defined classes that customize their comparison behavior should\nfollow some consistency rules, if possible:\n\n* Equality comparison should be reflexive. In other words, identical\n  objects should compare equal:\n\n     \"x is y\" implies \"x == y\"\n\n* Comparison should be symmetric. In other words, the following\n  expressions should have the same result:\n\n     \"x == y\" and \"y == x\"\n\n     \"x != y\" and \"y != x\"\n\n     \"x < y\" and \"y > x\"\n\n     \"x <= y\" and \"y >= x\"\n\n* Comparison should be transitive. The following (non-exhaustive)\n  examples illustrate that:\n\n     \"x > y and y > z\" implies \"x > z\"\n\n     \"x < y and y <= z\" implies \"x < z\"\n\n* Inverse comparison should result in the boolean negation. In other\n  words, the following expressions should have the same result:\n\n     \"x == y\" and \"not x != y\"\n\n     \"x < y\" and \"not x >= y\" (for total ordering)\n\n     \"x > y\" and \"not x <= y\" (for total ordering)\n\n  The last two expressions apply to totally ordered collections (e.g.\n  to sequences, but not to sets or mappings). See also the\n  \"total_ordering()\" decorator.\n\n* The \"hash()\" result should be consistent with equality. Objects that\n  are equal should either have the same hash value, or be marked as\n  unhashable.\n\nPython does not enforce these consistency rules. In fact, the\nnot-a-number values are an example for not following these rules.\n\n\nMembership test operations\n==========================\n\nThe operators \"in\" and \"not in\" test for membership.  \"x in s\"\nevaluates to \"True\" if *x* is a member of *s*, and \"False\" otherwise.\n\"x not in s\" returns the negation of \"x in s\".  All built-in sequences\nand set types support this as well as dictionary, for which \"in\" tests\nwhether the dictionary has a given key. For container types such as\nlist, tuple, set, frozenset, dict, or collections.deque, the\nexpression \"x in y\" is equivalent to \"any(x is e or x == e for e in\ny)\".\n\nFor the string and bytes types, \"x in y\" is \"True\" if and only if *x*\nis a substring of *y*.  An equivalent test is \"y.find(x) != -1\".\nEmpty strings are always considered to be a substring of any other\nstring, so \"\"\" in \"abc\"\" will return \"True\".\n\nFor user-defined classes which define the \"__contains__()\" method, \"x\nin y\" returns \"True\" if \"y.__contains__(x)\" returns a true value, and\n\"False\" otherwise.\n\nFor user-defined classes which do not define \"__contains__()\" but do\ndefine \"__iter__()\", \"x in y\" is \"True\" if some value \"z\", for which\nthe expression \"x is z or x == z\" is true, is produced while iterating\nover \"y\". If an exception is raised during the iteration, it is as if\n\"in\" raised that exception.\n\nLastly, the old-style iteration protocol is tried: if a class defines\n\"__getitem__()\", \"x in y\" is \"True\" if and only if there is a non-\nnegative integer index *i* such that \"x is y[i] or x == y[i]\", and no\nlower integer index raises the \"IndexError\" exception.  (If any other\nexception is raised, it is as if \"in\" raised that exception).\n\nThe operator \"not in\" is defined to have the inverse truth value of\n\"in\".\n\n\nIdentity comparisons\n====================\n\nThe operators \"is\" and \"is not\" test for an object’s identity: \"x is\ny\" is true if and only if *x* and *y* are the same object.  An\nObject’s identity is determined using the \"id()\" function.  \"x is not\ny\" yields the inverse truth value. [4]\n\nRelated help topics: EXPRESSIONS, BASICMETHODS\n\n```\n:::\n:::\n\n\n## About assigments\n\n- Python never copies an object\n- Unless you ask him to\n\nWhen you code\n```python\nx = [1, 2, 3]\ny = x\n```\nyou just\n- **bind** the variable name `x` to a list `[1, 2, 3]`\n- give another name `y` to the same object\n\n**Important remarks**\n\n- **Everything** is an object in Python\n- Either **immutable** or **mutable**\n\n::: {#3781b056 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:48.640520Z\",\"start_time\":\"2021-01-15T08:34:48.635298Z\"}' execution_count=132}\n``` {.python .cell-code}\nid(1), id(1+1), id(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=131}\n```\n(11757992, 11758024, 11758024)\n```\n:::\n:::\n\n\n**A `list` is mutable**\n\n::: {#041f91e5 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:48.849673Z\",\"start_time\":\"2021-01-15T08:34:48.845469Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=133}\n``` {.python .cell-code}\nx = [1, 2, 3]\nprint(id(x), x)\nx[0] += 42; x.append(3.14)\nprint(id(x), x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n132790603034624 [1, 2, 3]\n132790603034624 [43, 2, 3, 3.14]\n```\n:::\n:::\n\n\n**A `str` is immutable**\n\nIn order to \"change\" an **immutable** object, Python creates a new one\n\n::: {#3fccfcf0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:48.989090Z\",\"start_time\":\"2021-01-15T08:34:48.984655Z\"}' execution_count=134}\n``` {.python .cell-code}\ns = 'to'\nprint(id(s), s)\ns += 'to'\nprint(id(s), s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n132790696648864 to\n132790602609984 toto\n```\n:::\n:::\n\n\n**Once again, a `list` is mutable**\n\n::: {#eea02a35 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:49.185045Z\",\"start_time\":\"2021-01-15T08:34:49.179743Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=135}\n``` {.python .cell-code}\nsuper_list = [3.14, (1, 2, 3), 'tintin']\nother_list = super_list\nid(other_list), id(super_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=134}\n```\n(132790603134080, 132790603134080)\n```\n:::\n:::\n\n\n- `other_list` and `super_list` are the same list\n- If you change one, you change the other.\n- `id` returns the identity of an object. Two objects with the same idendity are the same (not only the same type, but the same instance)\n\n::: {#1687e752 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:49.490066Z\",\"start_time\":\"2021-01-15T08:34:49.483598Z\"}' execution_count=136}\n``` {.python .cell-code}\nother_list[1] = 'youps'\nother_list, super_list\n```\n\n::: {.cell-output .cell-output-display execution_count=135}\n```\n([3.14, 'youps', 'tintin'], [3.14, 'youps', 'tintin'])\n```\n:::\n:::\n\n\n::: {#e7adb079 .cell execution_count=137}\n``` {.python .cell-code}\nid(super_list), id(other_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=136}\n```\n(132790603134080, 132790603134080)\n```\n:::\n:::\n\n\n## If you want a copy, to need to ask for one\n\n::: {#d0108085 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:49.810775Z\",\"start_time\":\"2021-01-15T08:34:49.804825Z\"}' execution_count=138}\n``` {.python .cell-code}\nother_list = super_list.copy()\nid(other_list), id(super_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=137}\n```\n(132790603064256, 132790603134080)\n```\n:::\n:::\n\n\n::: {#a7640f99 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:50.044319Z\",\"start_time\":\"2021-01-15T08:34:50.038631Z\"}' execution_count=139}\n``` {.python .cell-code}\nother_list[1] = 'copy'\nother_list, super_list\n```\n\n::: {.cell-output .cell-output-display execution_count=138}\n```\n([3.14, 'copy', 'tintin'], [3.14, 'youps', 'tintin'])\n```\n:::\n:::\n\n\nOnly `other_list` is modified. \n\nBut... what if you have a `list` of `list` ? (or a mutable object containing mutable objects)\n\n::: {#87785a4c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:50.522523Z\",\"start_time\":\"2021-01-15T08:34:50.515916Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=140}\n``` {.python .cell-code}\nl1, l2 = [1, 2, 3], [4, 5, 6]\nlist_list = [l1, l2]\nlist_list\n```\n\n::: {.cell-output .cell-output-display execution_count=139}\n```\n[[1, 2, 3], [4, 5, 6]]\n```\n:::\n:::\n\n\n::: {#84f42d10 .cell execution_count=141}\n``` {.python .cell-code}\nid(list_list), id(list_list[0]), id(l1), list_list[0] is l1\n```\n\n::: {.cell-output .cell-output-display execution_count=140}\n```\n(132790602967360, 132790602760896, 132790602760896, True)\n```\n:::\n:::\n\n\nLet's make a copy of `list_list`\n\n::: {#11fb31d0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:50.900506Z\",\"start_time\":\"2021-01-15T08:34:50.894593Z\"}' execution_count=142}\n``` {.python .cell-code}\ncopy_list = list_list.copy()\ncopy_list.append('super')\nlist_list, copy_list\n```\n\n::: {.cell-output .cell-output-display execution_count=141}\n```\n([[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6], 'super'])\n```\n:::\n:::\n\n\n::: {#ad0e0dce .cell execution_count=143}\n``` {.python .cell-code}\nid(list_list[0]), id(copy_list[0])\n```\n\n::: {.cell-output .cell-output-display execution_count=142}\n```\n(132790602760896, 132790602760896)\n```\n:::\n:::\n\n\nOK, only `copy_list` is modified, as expected\n\nBut now...\n\n::: {#989b1838 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:51.550226Z\",\"start_time\":\"2021-01-15T08:34:51.545049Z\"}' execution_count=144}\n``` {.python .cell-code}\ncopy_list[0][1] = 'oups'\ncopy_list, list_list\n```\n\n::: {.cell-output .cell-output-display execution_count=143}\n```\n([[1, 'oups', 3], [4, 5, 6], 'super'], [[1, 'oups', 3], [4, 5, 6]])\n```\n:::\n:::\n\n\n**Question.** What happened ?!?\n\n- The `list_list` object is copied\n- But NOT what it's containing !\n- By default `copy` does a *shallow* copy, not a *deep* copy\n- It does not build copies of what is contained\n- If you want to copy an object and all that is contained in it, you need to use `deepcopy`.\n\n::: {#935f3741 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:52.242785Z\",\"start_time\":\"2021-01-15T08:34:52.236814Z\"}' execution_count=145}\n``` {.python .cell-code}\nfrom copy import deepcopy\n\ncopy_list = deepcopy(list_list)\ncopy_list[0][1] = 'incredible !'\nlist_list, copy_list\n```\n\n::: {.cell-output .cell-output-display execution_count=144}\n```\n([[1, 'oups', 3], [4, 5, 6]], [[1, 'incredible !', 3], [4, 5, 6]])\n```\n:::\n:::\n\n\n## Final remarks\n\n::: {#5e2844e0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:52.389405Z\",\"start_time\":\"2021-01-15T08:34:52.384515Z\"}' execution_count=146}\n``` {.python .cell-code}\ntt = ([1, 2, 3], [4, 5, 6])\nprint(id(tt), tt)\nprint(list(map(id, tt)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n132790602767488 ([1, 2, 3], [4, 5, 6])\n[132790602956544, 132790603026496]\n```\n:::\n:::\n\n\n::: {#31bb5386 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:52.490073Z\",\"start_time\":\"2021-01-15T08:34:52.483857Z\"}' execution_count=147}\n``` {.python .cell-code}\ntt[0][1] = '42'\nprint(id(tt), tt)\nprint(list(map(id, tt)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n132790602767488 ([1, '42', 3], [4, 5, 6])\n[132790602956544, 132790603026496]\n```\n:::\n:::\n\n\n::: {#0edce4c7 .cell execution_count=148}\n``` {.python .cell-code}\ns = [1, 2, 3]\n```\n:::\n\n\n::: {#1cb6522d .cell execution_count=149}\n``` {.python .cell-code}\ns2 = s\n```\n:::\n\n\n::: {#2a5f49d5 .cell execution_count=150}\n``` {.python .cell-code}\ns2 is s\n```\n\n::: {.cell-output .cell-output-display execution_count=149}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#d4718b71 .cell execution_count=151}\n``` {.python .cell-code}\nid(s2), id(s)\n```\n\n::: {.cell-output .cell-output-display execution_count=150}\n```\n(132790603025600, 132790603025600)\n```\n:::\n:::\n\n\n# Control flow and other stuff...\n\nNamely tests, loops, again booleans, etc.\n\n::: {#be1c9972 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:52.822274Z\",\"start_time\":\"2021-01-15T08:34:52.818018Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=152}\n``` {.python .cell-code}\nif 2 ** 2 == 5:\n    print('Obvious')\nelse:\n    print('YES')\nprint('toujours')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYES\ntoujours\n```\n:::\n:::\n\n\n## Blocks are delimited by indentation!\n\n::: {#4e414886 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:53.244482Z\",\"start_time\":\"2021-01-15T08:34:53.240054Z\"}' execution_count=153}\n``` {.python .cell-code}\na = 3\nif a > 0:\n    if a == 1:\n        print(1)\n    elif a == 2:\n        print(2)\nelif a == 2:\n    print(2)\nelif a == 3:\n    print(3)\nelse:\n    print(a)\n```\n:::\n\n\n## Anything can be understood as a boolean\n\nFor example, don't do this to test if a list is empty\n\n::: {#0479e25f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:53.660533Z\",\"start_time\":\"2021-01-15T08:34:53.655820Z\"}' execution_count=154}\n``` {.python .cell-code}\nl2 = ['hello', 'everybody']\n\nif len(l2) > 0:\n    print(l2[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello\n```\n:::\n:::\n\n\nbut this\n\n::: {#e9bfc945 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:54.244191Z\",\"start_time\":\"2021-01-15T08:34:54.239801Z\"}' execution_count=155}\n``` {.python .cell-code}\nif l2:\n    print(l2[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello\n```\n:::\n:::\n\n\n**Some poetry**\n\n- An empty `dict` is `False`\n- An empty `string` is `False`\n- An empty `list` is `False`\n- An empty `tuple` is `False`\n- An empty `set` is `False`\n- `0` is `False`\n- `.0` is `False`\n- etc...\n- everything else is `True`\n\n## While loops\n\n::: {#16bc2298 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:55.427330Z\",\"start_time\":\"2021-01-15T08:34:55.422079Z\"}' execution_count=156}\n``` {.python .cell-code}\na = 10\nb = 1\nwhile b < a:\n    b = b + 1\n    print(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n:::\n:::\n\n\nCompute the decimals of Pi using the Wallis formula\n\n$$\n\\pi = 2 \\prod_{i=1}^{100} \\frac{4i^2}{4i^2 - 1}\n$$\n\n::: {#7006e375 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:55.901297Z\",\"start_time\":\"2021-01-15T08:34:55.815952Z\"}' execution_count=157}\n``` {.python .cell-code}\npi = 2\neps = 1e-10\ndif = 2 * eps\ni = 1\nwhile dif > eps:\n    pi, i, old_pi = pi * 4 * i ** 2 / (4 * i ** 2 - 1), i + 1, pi\n    dif = pi - old_pi\n```\n:::\n\n\n::: {#fadb9995 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:55.998039Z\",\"start_time\":\"2021-01-15T08:34:55.993033Z\"}' execution_count=158}\n``` {.python .cell-code}\npi\n```\n\n::: {.cell-output .cell-output-display execution_count=157}\n```\n3.1415837914138556\n```\n:::\n:::\n\n\n::: {#1cc2c433 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:56.672400Z\",\"start_time\":\"2021-01-15T08:34:56.667181Z\"}' execution_count=159}\n``` {.python .cell-code}\nfrom math import pi\n\npi\n```\n\n::: {.cell-output .cell-output-display execution_count=158}\n```\n3.141592653589793\n```\n:::\n:::\n\n\n##  `for` loop with `range`\n- Iteration with an index, with a list, with many things !\n- `range` has the same parameters as with slicing `start:end:stride`, all parameters being optional\n\n::: {#bf8aa93b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:57.074626Z\",\"start_time\":\"2021-01-15T08:34:57.068953Z\"}' execution_count=160}\n``` {.python .cell-code}\nfor i in range(10):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n:::\n:::\n\n\n::: {#346bcd63 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:34:57.288732Z\",\"start_time\":\"2021-01-15T08:34:57.283152Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=161}\n``` {.python .cell-code}\nfor i in range(4):\n    print(i + 1)\nprint('-')\n\nfor i in range(1, 5):\n    print(i)\nprint('-')\n\nfor i in range(1, 10, 3):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n-\n1\n2\n3\n4\n-\n1\n4\n7\n```\n:::\n:::\n\n\n**Something for nerds**. You can use `else` in a `for` loop\n\n::: {#b798f613 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:03.792632Z\",\"start_time\":\"2021-01-15T08:35:03.788211Z\"}' execution_count=162}\n``` {.python .cell-code}\nnames = ['stephane', 'mokhtar', 'jaouad', 'simon', 'yiyang']\n\nfor name in names:\n    if name.startswith('u'):\n        print(name)\n        break\nelse:\n    print('Not found.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNot found.\n```\n:::\n:::\n\n\n::: {#9b5eae42 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:11.089072Z\",\"start_time\":\"2021-01-15T08:35:11.084070Z\"}' execution_count=163}\n``` {.python .cell-code}\nnames = ['stephane', 'mokhtar', 'jaouad', 'ulysse', 'simon', 'yiyang']\n\nfor name in names:\n    if name.startswith('u'):\n        print(name)\n        break\nelse:\n    print('Not found.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nulysse\n```\n:::\n:::\n\n\n## For loops over iterable objects\n\nYou can iterate using `for` over any container: `list`, `tuple`, `dict`, `str`, `set` among others...\n\n::: {#85a0cb00 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:14.358404Z\",\"start_time\":\"2021-01-15T08:35:14.354354Z\"}' execution_count=164}\n``` {.python .cell-code}\ncolors = ['red', 'blue', 'black', 'white']\npeoples = ['stephane', 'jaouad', 'mokhtar', 'yiyang', 'rémi']\n```\n:::\n\n\n::: {#5bc09665 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:14.546348Z\",\"start_time\":\"2021-01-15T08:35:14.541964Z\"}' execution_count=165}\n``` {.python .cell-code}\n# This is stupid\nfor i in range(len(colors)):\n    print(colors[i])\n    \n# This is better\nfor color in colors:\n    print(color)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nred\nblue\nblack\nwhite\nred\nblue\nblack\nwhite\n```\n:::\n:::\n\n\nTo iterate over several sequences at the same time, use `zip`\n\n::: {#e67a4e04 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:15.578703Z\",\"start_time\":\"2021-01-15T08:35:15.574575Z\"}' execution_count=166}\n``` {.python .cell-code}\nfor color, people in zip(colors, peoples):\n    print(color, people)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nred stephane\nblue jaouad\nblack mokhtar\nwhite yiyang\n```\n:::\n:::\n\n\n::: {#a531f0f0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:15.787784Z\",\"start_time\":\"2021-01-15T08:35:15.781691Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=167}\n``` {.python .cell-code}\nl = [\"Bonjour\", {'francis': 5214, 'stephane': 5123}, ('truc', 3)]\nfor e in l:\n    print(e, len(e))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBonjour 7\n{'francis': 5214, 'stephane': 5123} 2\n('truc', 3) 2\n```\n:::\n:::\n\n\n**Loop over a `str`**\n\n::: {#f4e15ceb .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:16.284944Z\",\"start_time\":\"2021-01-15T08:35:16.279583Z\"}' execution_count=168}\n``` {.python .cell-code}\ns = 'Bonjour'\nfor c in s:\n    print(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nB\no\nn\nj\no\nu\nr\n```\n:::\n:::\n\n\n**Loop over a `dict`**\n\n::: {#0b5f0a4a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:24.915816Z\",\"start_time\":\"2021-01-15T08:35:24.910552Z\"}' execution_count=169}\n``` {.python .cell-code}\ndd = {(1, 3): {'hello', 'world'}, 'truc': [1, 2, 3], 5: (1, 4, 2)}\n\n# Default is to loop over keys\nfor key in dd:\n    print(key)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 3)\ntruc\n5\n```\n:::\n:::\n\n\n::: {#753f564a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:25.116664Z\",\"start_time\":\"2021-01-15T08:35:25.112459Z\"}' execution_count=170}\n``` {.python .cell-code}\n# Loop over values\nfor e in dd.values():\n    print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'world', 'hello'}\n[1, 2, 3]\n(1, 4, 2)\n```\n:::\n:::\n\n\n::: {#7c778d09 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:25.253625Z\",\"start_time\":\"2021-01-15T08:35:25.248561Z\"}' execution_count=171}\n``` {.python .cell-code}\n# Loop over items (key, value) pairs\nfor key, val in dd.items():\n    print(key, val)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 3) {'world', 'hello'}\ntruc [1, 2, 3]\n5 (1, 4, 2)\n```\n:::\n:::\n\n\n::: {#9da45951 .cell execution_count=172}\n``` {.python .cell-code}\nfor t in dd.items():\n    print(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n((1, 3), {'world', 'hello'})\n('truc', [1, 2, 3])\n(5, (1, 4, 2))\n```\n:::\n:::\n\n\n## Comprehensions\n\nYou can construct a `list`, `dict`, `set` and others using the **comprehension** syntax\n\n**`list` comprehension**\n\n::: {#ce79b90e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:27.023136Z\",\"start_time\":\"2021-01-15T08:35:27.016816Z\"}' execution_count=173}\n``` {.python .cell-code}\nprint(colors)\nprint(peoples)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['red', 'blue', 'black', 'white']\n['stephane', 'jaouad', 'mokhtar', 'yiyang', 'rémi']\n```\n:::\n:::\n\n\n::: {#086b0618 .cell execution_count=174}\n``` {.python .cell-code}\nl = []\nfor p, c in zip(peoples, colors):\n    if len(c)<=4 :\n        l.append(p)\nprint(l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['stephane', 'jaouad']\n```\n:::\n:::\n\n\n::: {#72b14c60 .cell execution_count=175}\n``` {.python .cell-code}\n# The list of people with favorite color that has no more than 4 characters\n\n[people for color, people in zip(colors, peoples) if len(color) <= 4]\n```\n\n::: {.cell-output .cell-output-display execution_count=174}\n```\n['stephane', 'jaouad']\n```\n:::\n:::\n\n\n**`dict` comprehension**\n\n::: {#f29d1d3d .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:29.425720Z\",\"start_time\":\"2021-01-15T08:35:29.418729Z\"}' execution_count=176}\n``` {.python .cell-code}\n{people: color for color, people in zip(colors, peoples) if len(color) <= 4}\n```\n\n::: {.cell-output .cell-output-display execution_count=175}\n```\n{'stephane': 'red', 'jaouad': 'blue'}\n```\n:::\n:::\n\n\n::: {#eb38815f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:29.650791Z\",\"start_time\":\"2021-01-15T08:35:29.645099Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=177}\n``` {.python .cell-code}\n# Allows to build a dict from two lists (for keys and values)\n{key: value for (key, value) in zip(peoples, colors)}\n```\n\n::: {.cell-output .cell-output-display execution_count=176}\n```\n{'stephane': 'red', 'jaouad': 'blue', 'mokhtar': 'black', 'yiyang': 'white'}\n```\n:::\n:::\n\n\n::: {#ae45c333 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:29.733037Z\",\"start_time\":\"2021-01-15T08:35:29.728275Z\"}' execution_count=178}\n``` {.python .cell-code}\n# But it's simpler (so better) to use\ndict(zip(peoples, colors))\n```\n\n::: {.cell-output .cell-output-display execution_count=177}\n```\n{'stephane': 'red', 'jaouad': 'blue', 'mokhtar': 'black', 'yiyang': 'white'}\n```\n:::\n:::\n\n\nSomething very convenient is `enumerate`\n\n::: {#bd553961 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:34.108535Z\",\"start_time\":\"2021-01-15T08:35:34.101660Z\"}' execution_count=179}\n``` {.python .cell-code}\nfor i, color in enumerate(colors):\n    print(i, color)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 red\n1 blue\n2 black\n3 white\n```\n:::\n:::\n\n\n::: {#70e53dc7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:34.308091Z\",\"start_time\":\"2021-01-15T08:35:34.302386Z\"}' execution_count=180}\n``` {.python .cell-code}\nlist(enumerate(colors))\n```\n\n::: {.cell-output .cell-output-display execution_count=179}\n```\n[(0, 'red'), (1, 'blue'), (2, 'black'), (3, 'white')]\n```\n:::\n:::\n\n\n::: {#753af38d .cell execution_count=181}\n``` {.python .cell-code}\ndict(enumerate(s))\n```\n\n::: {.cell-output .cell-output-display execution_count=180}\n```\n{0: 'B', 1: 'o', 2: 'n', 3: 'j', 4: 'o', 5: 'u', 6: 'r'}\n```\n:::\n:::\n\n\n::: {#352e819a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:34.436719Z\",\"start_time\":\"2021-01-15T08:35:34.432315Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=182}\n``` {.python .cell-code}\nprint(dict(enumerate(s)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{0: 'B', 1: 'o', 2: 'n', 3: 'j', 4: 'o', 5: 'u', 6: 'r'}\n```\n:::\n:::\n\n\n::: {#2f9bed2b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:35.307514Z\",\"start_time\":\"2021-01-15T08:35:35.302402Z\"}' execution_count=183}\n``` {.python .cell-code}\ns = 'Hey everyone'\n{c: i for i, c in enumerate(s)}\n```\n\n::: {.cell-output .cell-output-display execution_count=182}\n```\n{'H': 0, 'e': 11, 'y': 8, ' ': 3, 'v': 5, 'r': 7, 'o': 9, 'n': 10}\n```\n:::\n:::\n\n\n## About functional programming\n\nWe can use `lambda` to define **anonymous** functions, and use them in the `map` and `reduce` functions\n\n::: {#d6037c82 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:37.077273Z\",\"start_time\":\"2021-01-15T08:35:37.071704Z\"}' execution_count=184}\n``` {.python .cell-code}\nsquare = lambda x: x ** 2\nsquare(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=183}\n```\n4\n```\n:::\n:::\n\n\n::: {#a739505d .cell execution_count=185}\n``` {.python .cell-code}\ntype(square)\n```\n\n::: {.cell-output .cell-output-display execution_count=184}\n```\nfunction\n```\n:::\n:::\n\n\n::: {#55ae0e8f .cell execution_count=186}\n``` {.python .cell-code}\ndir(square)\n```\n\n::: {.cell-output .cell-output-display execution_count=185}\n```\n['__annotations__',\n '__builtins__',\n '__call__',\n '__class__',\n '__closure__',\n '__code__',\n '__defaults__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__get__',\n '__getattribute__',\n '__getstate__',\n '__globals__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__kwdefaults__',\n '__le__',\n '__lt__',\n '__module__',\n '__name__',\n '__ne__',\n '__new__',\n '__qualname__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__type_params__']\n```\n:::\n:::\n\n\n::: {#45a90462 .cell execution_count=187}\n``` {.python .cell-code}\ns = \"a\"\n```\n:::\n\n\n::: {#bac23306 .cell execution_count=188}\n``` {.python .cell-code}\ntry:\n    square(\"a\")\nexcept TypeError:\n    print(\"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\n```\n:::\n:::\n\n\n::: {#0cd65531 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:37.269771Z\",\"start_time\":\"2021-01-15T08:35:37.265389Z\"}' execution_count=189}\n``` {.python .cell-code}\nsum2 = lambda a, b: a + b\nprint(sum2('Hello', ' world'))\nprint(sum2(1, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world\n3\n```\n:::\n:::\n\n\nIntended for short and one-line function. \n\nMore complex functions use `def` (see below)\n\n## Exercise\n\nPrint the squares of even numbers between 0 et 15\n\n1. Using a list comprehension as before\n2. Using `map`\n\n::: {.content-visible when-profile='solution'} \n\n::: {#c3c7e05f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:45.251215Z\",\"start_time\":\"2021-01-15T08:35:45.245421Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=190}\n``` {.python .cell-code}\n# Answer to 1.\n[i ** 2 for i in range(15) if i % 2 == 0]\n```\n\n::: {.cell-output .cell-output-display execution_count=189}\n```\n[0, 4, 16, 36, 64, 100, 144, 196]\n```\n:::\n:::\n\n\n::: {#a0343cc2 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:46.363026Z\",\"start_time\":\"2021-01-15T08:35:46.357149Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=191}\n``` {.python .cell-code}\n# Answer to 2. \nlist(map(lambda x: x ** 2, range(0, 15, 2)))\n```\n\n::: {.cell-output .cell-output-display execution_count=190}\n```\n[0, 4, 16, 36, 64, 100, 144, 196]\n```\n:::\n:::\n\n\n**Remark**. We will see later why we need to use `list` above\n\n::: {#6d01051d .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:49.386681Z\",\"start_time\":\"2021-01-15T08:35:49.380699Z\"}' execution_count=192}\n``` {.python .cell-code}\nmap(lambda x: x ** 2, range(0, 15, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=191}\n```\n<map at 0x78c55e7b55d0>\n```\n:::\n:::\n\n\nNow, to get the sum of these squares, we can use `sum`\n\n::: {#4117cdc5 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:49.730719Z\",\"start_time\":\"2021-01-15T08:35:49.725389Z\"}' execution_count=193}\n``` {.python .cell-code}\nsum(map(lambda x: x ** 2, range(0, 15, 2)))\n```\n\n::: {.cell-output .cell-output-display execution_count=192}\n```\n560\n```\n:::\n:::\n\n\nWe can also use `reduce` (not a good idea here, but it's good to know that it exists)\n\n::: {#88ca7b52 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:50.125792Z\",\"start_time\":\"2021-01-15T08:35:50.119351Z\"}' execution_count=194}\n``` {.python .cell-code}\nfrom functools import reduce\n\nreduce(lambda a, b: a + b, map(lambda x: x ** 2, range(0, 15, 2)))\n```\n\n::: {.cell-output .cell-output-display execution_count=193}\n```\n560\n```\n:::\n:::\n\n\nThere is also something that can be useful in `functool` called `partial`\n\nIt allows to **simplify** functions by freezing some arguments\n\n::: {#15ba7b40 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:51.690112Z\",\"start_time\":\"2021-01-15T08:35:51.683874Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=195}\n``` {.python .cell-code}\nfrom functools import partial\n\ndef mult(a, b):\n    return a * b\n\ndouble = partial(mult, b=2)\ndouble(2) \n```\n\n::: {.cell-output .cell-output-display execution_count=194}\n```\n4\n```\n:::\n:::\n\n\n:::\n\n## Brain-teasing\n\nWhat is the output of\n\n::: {#a86fd2a4 .cell execution_count=196}\n``` {.python .cell-code}\nreduce(lambda a, b: a + b[0] * b[1], enumerate('abcde'), 'A')\n```\n:::\n\n\n::: {.content-visible when-profile='solution'} \n\n::: {#a1b86d11 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:53.480678Z\",\"start_time\":\"2021-01-15T08:35:53.474794Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=197}\n``` {.python .cell-code}\nreduce(lambda a, b: a + b[0] * b[1], enumerate('abcde'), 'A')\n```\n\n::: {.cell-output .cell-output-display execution_count=195}\n```\n'Abccdddeeee'\n```\n:::\n:::\n\n\nThis does the following\n\n::: {#ec5f0b0f .cell execution_count=198}\n``` {.python .cell-code}\nlist(enumerate('abcde'))\n```\n\n::: {.cell-output .cell-output-display execution_count=196}\n```\n[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e')]\n```\n:::\n:::\n\n\n::: {#597fd4cb .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:35:55.504410Z\",\"start_time\":\"2021-01-15T08:35:55.498980Z\"}' execution_count=199}\n``` {.python .cell-code}\n((((('A' + 0 * 'a') + 1 * 'b') + 2 * 'c') + 3 * 'd') + 4 * 'e')\n```\n\n::: {.cell-output .cell-output-display execution_count=197}\n```\n'Abccdddeeee'\n```\n:::\n:::\n\n\n:::\n\n\n# Generators\n\n::: {#5a9ce89f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:00.984160Z\",\"start_time\":\"2021-01-15T08:36:00.402833Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=200}\n``` {.python .cell-code}\nimport sys\nimport matplotlib.pyplot as plt\n%matplotlib inline\n```\n:::\n\n\n::: {#7654856b .cell execution_count=201}\n``` {.python .cell-code}\nplt.figure(figsize=(6, 6))\nplt.plot([sys.getsizeof(list(range(i))) for i in range(10000)], lw=3)\nplt.plot([sys.getsizeof(range(i)) for i in range(10000)], lw=3)\nplt.xlabel('Number of elements (value of i)', fontsize=14)\nplt.ylabel('Size (in bytes)', fontsize=14)\n_ = plt.legend(['list(range(i))', 'range(i)'], fontsize=16)\n```\n\n::: {.cell-output .cell-output-display}\n![](notebook01_python_files/figure-html/cell-202-output-1.png){width=542 height=509}\n:::\n:::\n\n\n## Why generators ?\n\nThe memory used by `range(i)` does not scale linearly with `i`\n\nWhat is happening ?\n\n- `range(n)` does not allocate a list of `n` elements ! \n- It **generates on the fly** the list of required integers\n- We say that such an object behaves like a **generator** in `Python`\n- Many things in the `Python` standard library behaves like this\n\n\n**Warning.** Getting the real memory footprint of a `Python` object is difficult. \nNote that `sizeof` calls the `__sizeof__` method of `r`, which does not give in general the actual memory used by an object. But nevermind here.\n\nThe following computation has no memory footprint:\n\n::: {#e8cdf191 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:17.535131Z\",\"start_time\":\"2021-01-15T08:36:16.258179Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=202}\n``` {.python .cell-code}\nsum(range(10**8))\n```\n\n::: {.cell-output .cell-output-display execution_count=200}\n```\n4999999950000000\n```\n:::\n:::\n\n\n::: {#cee6542b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:17.541785Z\",\"start_time\":\"2021-01-15T08:36:17.537229Z\"}' execution_count=203}\n``` {.python .cell-code}\nmap(lambda x: x**2, range(10**7))\n```\n\n::: {.cell-output .cell-output-display execution_count=201}\n```\n<map at 0x78c55e7eff40>\n```\n:::\n:::\n\n\n`map` does not return a `list` for the same reason\n\n::: {#96cb6bf0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:17.817857Z\",\"start_time\":\"2021-01-15T08:36:17.544451Z\"}' execution_count=204}\n``` {.python .cell-code}\nsum(map(lambda x: x**2, range(10**6)))\n```\n\n::: {.cell-output .cell-output-display execution_count=202}\n```\n333332833333500000\n```\n:::\n:::\n\n\n## Generator expression\n\nNamely generators defined through comprehensions.\nJust replace `[]` by `()` in the comprehension.\n\nA generator can be iterated on only **once**\n\n::: {#f7edfa94 .cell execution_count=205}\n``` {.python .cell-code}\nrange(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=203}\n```\nrange(0, 10)\n```\n:::\n:::\n\n\n::: {#5ec50e47 .cell execution_count=206}\n``` {.python .cell-code}\ncarres = (i**2 for i in range(10))\n```\n:::\n\n\n::: {#8a3039a8 .cell execution_count=207}\n``` {.python .cell-code}\ncarres\n```\n\n::: {.cell-output .cell-output-display execution_count=205}\n```\n<generator object <genexpr> at 0x78c5b8b3a9b0>\n```\n:::\n:::\n\n\n::: {#0f66d19f .cell execution_count=208}\n``` {.python .cell-code}\nfor c in carres:\n    print(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n4\n9\n16\n25\n36\n49\n64\n81\n```\n:::\n:::\n\n\n::: {#97bc796d .cell execution_count=209}\n``` {.python .cell-code}\nfor i in range(4):\n    for j in range(3):\n        print(i, j)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n3 0\n3 1\n3 2\n```\n:::\n:::\n\n\n::: {#556eb2b1 .cell execution_count=210}\n``` {.python .cell-code}\nfrom itertools import product\n\nfor t in product(range(4), range(3)):\n    print(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(0, 0)\n(0, 1)\n(0, 2)\n(1, 0)\n(1, 1)\n(1, 2)\n(2, 0)\n(2, 1)\n(2, 2)\n(3, 0)\n(3, 1)\n(3, 2)\n```\n:::\n:::\n\n\n::: {#5ed813c2 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:19.688387Z\",\"start_time\":\"2021-01-15T08:36:19.683024Z\"}' execution_count=211}\n``` {.python .cell-code}\nfrom itertools import product\n\ngene = (i + j for i, j in product(range(3), range(3)))\ngene\n```\n\n::: {.cell-output .cell-output-display execution_count=209}\n```\n<generator object <genexpr> at 0x78c5b8b3ae90>\n```\n:::\n:::\n\n\n::: {#9d044349 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:19.886398Z\",\"start_time\":\"2021-01-15T08:36:19.879904Z\"}' execution_count=212}\n``` {.python .cell-code}\nprint(list(gene))\nprint(list(gene))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 1, 2, 1, 2, 3, 2, 3, 4]\n[]\n```\n:::\n:::\n\n\n## `yield`\n\nSomething very powerful\n\n::: {#9f5c7a63 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:21.518680Z\",\"start_time\":\"2021-01-15T08:36:21.514939Z\"}' execution_count=213}\n``` {.python .cell-code}\ndef startswith(words, letter):\n    for word in words:\n        if word.startswith(letter):\n            yield word\n```\n:::\n\n\n::: {#7b28c7c1 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:21.681758Z\",\"start_time\":\"2021-01-15T08:36:21.676154Z\"}' execution_count=214}\n``` {.python .cell-code}\nwords = [\n    'Python', \"is\", 'awesome', 'in', 'particular', 'generators', \n    'are', 'really', 'cool'\n]\n```\n:::\n\n\n::: {#72234189 .cell execution_count=215}\n``` {.python .cell-code}\nlist(word for word in words if word.startswith(\"a\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=213}\n```\n['awesome', 'are']\n```\n:::\n:::\n\n\n::: {#65b89eb4 .cell execution_count=216}\n``` {.python .cell-code}\na = 2\n```\n:::\n\n\n::: {#b0025f89 .cell execution_count=217}\n``` {.python .cell-code}\nfloat(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=215}\n```\n2.0\n```\n:::\n:::\n\n\nBut also with a `for` loop\n\n::: {#dc929057 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:25.112354Z\",\"start_time\":\"2021-01-15T08:36:25.107107Z\"}' execution_count=218}\n``` {.python .cell-code}\nfor word in startswith(words, letter='a'):\n    print(word)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nawesome\nare\n```\n:::\n:::\n\n\n::: {#652a5650 .cell execution_count=219}\n``` {.python .cell-code}\nit = startswith(words, letter='a')\n```\n:::\n\n\n::: {#158c21cb .cell execution_count=220}\n``` {.python .cell-code}\ntype(it)\n```\n\n::: {.cell-output .cell-output-display execution_count=218}\n```\ngenerator\n```\n:::\n:::\n\n\n::: {#86695790 .cell execution_count=221}\n``` {.python .cell-code}\nnext(it)\n```\n\n::: {.cell-output .cell-output-display execution_count=219}\n```\n'awesome'\n```\n:::\n:::\n\n\n::: {#6b501c5f .cell execution_count=222}\n``` {.python .cell-code}\nnext(it)\n```\n\n::: {.cell-output .cell-output-display execution_count=220}\n```\n'are'\n```\n:::\n:::\n\n\n::: {#dcfc490f .cell execution_count=223}\n``` {.python .cell-code}\ntry:\n    next(it)\nexcept StopIteration:\n    print(\"StopIteration exception!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStopIteration exception!\n```\n:::\n:::\n\n\n# A glimpse at the ` collections` module\n\n(This is where the good stuff hides)\n\n::: {#cdea0eb9 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:26.046700Z\",\"start_time\":\"2021-01-15T08:36:26.041712Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=224}\n``` {.python .cell-code}\ntexte = \"\"\"             \nBonjour,\nPython c'est super.\nPython ca a l'air quand même un peu compliqué.\nMais bon, ca a l'air pratique.\nPeut-être que je pourrais m'en servir pour faire des trucs super.\n\"\"\"\ntexte\n```\n\n::: {.cell-output .cell-output-display execution_count=222}\n```\n\"             \\nBonjour,\\nPython c'est super.\\nPython ca a l'air quand même un peu compliqué.\\nMais bon, ca a l'air pratique.\\nPeut-être que je pourrais m'en servir pour faire des trucs super.\\n\"\n```\n:::\n:::\n\n\n::: {#e111d97f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:28.485696Z\",\"start_time\":\"2021-01-15T08:36:28.481795Z\"}' execution_count=225}\n``` {.python .cell-code}\nprint(texte)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             \nBonjour,\nPython c'est super.\nPython ca a l'air quand même un peu compliqué.\nMais bon, ca a l'air pratique.\nPeut-être que je pourrais m'en servir pour faire des trucs super.\n\n```\n:::\n:::\n\n\n::: {#95d28140 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:28.891498Z\",\"start_time\":\"2021-01-15T08:36:28.886862Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=226}\n``` {.python .cell-code}\n# Some basic text preprocessing \nnew_text = (\n    texte\n    .strip()\n    .replace('\\n', ' ')\n    .replace(',', ' ')\n    .replace('.', ' ')\n    .replace(\"'\", ' ')\n)\n\nprint(new_text)\nprint('-' * 8)\n\nwords = new_text.split()\nprint(words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBonjour  Python c est super  Python ca a l air quand même un peu compliqué  Mais bon  ca a l air pratique  Peut-être que je pourrais m en servir pour faire des trucs super \n--------\n['Bonjour', 'Python', 'c', 'est', 'super', 'Python', 'ca', 'a', 'l', 'air', 'quand', 'même', 'un', 'peu', 'compliqué', 'Mais', 'bon', 'ca', 'a', 'l', 'air', 'pratique', 'Peut-être', 'que', 'je', 'pourrais', 'm', 'en', 'servir', 'pour', 'faire', 'des', 'trucs', 'super']\n```\n:::\n:::\n\n\n## Exercise \n\nCount the number of occurences of all the words in `words`. \n\nOutput must be a dictionary containg ``word: count``\n\n::: {#9a1b460c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:30.579563Z\",\"start_time\":\"2021-01-15T08:36:30.573645Z\"}' execution_count=227}\n``` {.python .cell-code}\nprint(words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Bonjour', 'Python', 'c', 'est', 'super', 'Python', 'ca', 'a', 'l', 'air', 'quand', 'même', 'un', 'peu', 'compliqué', 'Mais', 'bon', 'ca', 'a', 'l', 'air', 'pratique', 'Peut-être', 'que', 'je', 'pourrais', 'm', 'en', 'servir', 'pour', 'faire', 'des', 'trucs', 'super']\n```\n:::\n:::\n\n\n::: {.content-visible when-profile='solution'} \n\n### Solution 1: hand-made\n\n::: {#52f03ad0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:32.221188Z\",\"start_time\":\"2021-01-15T08:36:32.216317Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=228}\n``` {.python .cell-code}\nwords_counts = {}\nfor word in words:\n    if word in words_counts:\n        words_counts[word] += 1\n    else:\n        words_counts[word] = 1\n\nprint(words_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'Bonjour': 1, 'Python': 2, 'c': 1, 'est': 1, 'super': 2, 'ca': 2, 'a': 2, 'l': 2, 'air': 2, 'quand': 1, 'même': 1, 'un': 1, 'peu': 1, 'compliqué': 1, 'Mais': 1, 'bon': 1, 'pratique': 1, 'Peut-être': 1, 'que': 1, 'je': 1, 'pourrais': 1, 'm': 1, 'en': 1, 'servir': 1, 'pour': 1, 'faire': 1, 'des': 1, 'trucs': 1}\n```\n:::\n:::\n\n\n:::\n\n::: {.content-visible when-profile='solution'} \n\n### Solution 2: using `defaultdict`\n\n::: {#b7fc7d74 .cell execution_count=229}\n``` {.python .cell-code}\nint()\n```\n\n::: {.cell-output .cell-output-display execution_count=227}\n```\n0\n```\n:::\n:::\n\n\n::: {#89e13e72 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:32.539800Z\",\"start_time\":\"2021-01-15T08:36:32.534351Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=230}\n``` {.python .cell-code}\nfrom collections import defaultdict\n\nwords_counts = defaultdict(int)\nfor word in words:\n    words_counts[word] += 1\n\nprint(words_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndefaultdict(<class 'int'>, {'Bonjour': 1, 'Python': 2, 'c': 1, 'est': 1, 'super': 2, 'ca': 2, 'a': 2, 'l': 2, 'air': 2, 'quand': 1, 'même': 1, 'un': 1, 'peu': 1, 'compliqué': 1, 'Mais': 1, 'bon': 1, 'pratique': 1, 'Peut-être': 1, 'que': 1, 'je': 1, 'pourrais': 1, 'm': 1, 'en': 1, 'servir': 1, 'pour': 1, 'faire': 1, 'des': 1, 'trucs': 1})\n```\n:::\n:::\n\n\n- `defaultdict` can be extremely useful\n- A dict with a default value: here an `int` is created (defaults to 0) if key is not found\n- Allows to avoid a test\n\n### About `defaultdict`\n\n- the argument must be a \"callable\" (something that can be called)\n- Beware: as soon as a key is searched, a default value is added to the `defaultdict`\n\n::: {#2c505a6f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:43.344984Z\",\"start_time\":\"2021-01-15T08:36:43.340012Z\"}' execution_count=231}\n``` {.python .cell-code}\naddresses = defaultdict(lambda: 'unknown')\naddresses['huyen']\naddresses['stephane'] = '8 place Aurelie Nemours'\nprint(addresses)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndefaultdict(<function <lambda> at 0x78c55dd6cf40>, {'huyen': 'unknown', 'stephane': '8 place Aurelie Nemours'})\n```\n:::\n:::\n\n\n::: {#4b385083 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:43.539021Z\",\"start_time\":\"2021-01-15T08:36:43.533855Z\"}' execution_count=232}\n``` {.python .cell-code}\n# Somewhat nasty...\nprint('jean-francois' in addresses)\nprint(addresses['jean-francois'])\nprint('jean-francois' in addresses)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nunknown\nTrue\n```\n:::\n:::\n\n\n:::\n\n::: {.content-visible when-profile='solution'} \n\n### Solution 3. Don't do it by hand ! Use `counter`\n\n::: {#fd701098 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:47.448243Z\",\"start_time\":\"2021-01-15T08:36:47.442365Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=233}\n``` {.python .cell-code}\nfrom collections import Counter\n\nprint(dict(Counter(words)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'Bonjour': 1, 'Python': 2, 'c': 1, 'est': 1, 'super': 2, 'ca': 2, 'a': 2, 'l': 2, 'air': 2, 'quand': 1, 'même': 1, 'un': 1, 'peu': 1, 'compliqué': 1, 'Mais': 1, 'bon': 1, 'pratique': 1, 'Peut-être': 1, 'que': 1, 'je': 1, 'pourrais': 1, 'm': 1, 'en': 1, 'servir': 1, 'pour': 1, 'faire': 1, 'des': 1, 'trucs': 1}\n```\n:::\n:::\n\n\n`Counter` counts the number of occurences of all objects in an iterable\n\n**Question.** Which one do you prefer ?\n\n- The `Counter` one right ?\n\n### Morality\n\n- When you need to do something, assume that there is a tool to do it directly \n\n- If you can't find it, ask `google` or `stackoverflow`\n\n- Otherwise, try to do it as simply as possible\n\n:::\n\n## Exercise \n\nCompute the number of occurences AND the length of each word in `words`.\n\nOutput must be a dictionary containing ``word: (count, length)``\n\n::: {.content-visible when-profile='solution'} \n\n### Solution\n\n::: {#b46521ad .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:36:59.414057Z\",\"start_time\":\"2021-01-15T08:36:59.406260Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=234}\n``` {.python .cell-code}\nfrom collections import Counter\n\n{word: (count, len(word)) for word, count in Counter(words).items()}\n```\n\n::: {.cell-output .cell-output-display execution_count=232}\n```\n{'Bonjour': (1, 7),\n 'Python': (2, 6),\n 'c': (1, 1),\n 'est': (1, 3),\n 'super': (2, 5),\n 'ca': (2, 2),\n 'a': (2, 1),\n 'l': (2, 1),\n 'air': (2, 3),\n 'quand': (1, 5),\n 'même': (1, 4),\n 'un': (1, 2),\n 'peu': (1, 3),\n 'compliqué': (1, 9),\n 'Mais': (1, 4),\n 'bon': (1, 3),\n 'pratique': (1, 8),\n 'Peut-être': (1, 9),\n 'que': (1, 3),\n 'je': (1, 2),\n 'pourrais': (1, 8),\n 'm': (1, 1),\n 'en': (1, 2),\n 'servir': (1, 6),\n 'pour': (1, 4),\n 'faire': (1, 5),\n 'des': (1, 3),\n 'trucs': (1, 5)}\n```\n:::\n:::\n\n\n## The `namedtuple`\n\nThere is also the `namedtuple`. It's a `tuple` but with named attributes\n\n::: {#3b26d617 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:37:03.255687Z\",\"start_time\":\"2021-01-15T08:37:03.249481Z\"}' execution_count=235}\n``` {.python .cell-code}\nfrom collections import namedtuple\n\nJedi = namedtuple('Jedi', ['firstname', 'lastname', 'age', 'color'])\nyoda = Jedi('Minch', 'Yoda', 900, 'green')\nyoda\n```\n\n::: {.cell-output .cell-output-display execution_count=233}\n```\nJedi(firstname='Minch', lastname='Yoda', age=900, color='green')\n```\n:::\n:::\n\n\n::: {#78912eb2 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:37:03.466246Z\",\"start_time\":\"2021-01-15T08:37:03.460414Z\"}' execution_count=236}\n``` {.python .cell-code}\nyoda.firstname\n```\n\n::: {.cell-output .cell-output-display execution_count=234}\n```\n'Minch'\n```\n:::\n:::\n\n\n::: {#0347dca5 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:37:03.594771Z\",\"start_time\":\"2021-01-15T08:37:03.589467Z\"}' execution_count=237}\n``` {.python .cell-code}\nyoda[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=235}\n```\n'Yoda'\n```\n:::\n:::\n\n\n**Remark.** A better alternative since `Python 3.7` is dataclasses. We will talk about it later\n\n:::\n\n# I/O, reading and writing files\n\nNext, put a text file `miserables.txt` in the folder containing \nthis notebook.  If it is not there, the next cell downloads it, if is it there, then we do nothing.\n\n::: {#2bc12285 .cell ExecuteTime='{\"end_time\":\"2021-01-15T09:18:44.977524Z\",\"start_time\":\"2021-01-15T09:18:44.691253Z\"}' execution_count=238}\n``` {.python .cell-code}\nimport requests\nimport os\n\n# The path containing your notebook\npath_data = './'\n# The name of the file\nfilename = 'miserables.txt'\n\nif os.path.exists(os.path.join(path_data, filename)):\n    print('The file %s already exists.' % os.path.join(path_data, filename))\nelse:\n    url = 'https://stephanegaiffas.github.io/big_data_course/data/miserables.txt'\n    r = requests.get(url)\n    with open(os.path.join(path_data, filename), 'wb') as f:\n        f.write(r.content)\n    print('Downloaded file %s.' % os.path.join(path_data, filename))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe file ./miserables.txt already exists.\n```\n:::\n:::\n\n\n::: {#1de2ac7a .cell execution_count=239}\n``` {.python .cell-code}\nls -alh\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal 676K\r\ndrwxrwxr-x 11 boucheron boucheron 4,0K févr.  3 23:19 ./\r\ndrwxrwxr-x  8 boucheron boucheron 4,0K janv. 20 14:21 ../\r\ndrwxr-xr-x  2 boucheron boucheron 4,0K janv.  1 00:19 970101f4-6bc5-4932-ad58-30477664f5ed/\r\ndrwxr-xr-x  2 boucheron boucheron 4,0K janv. 15 22:40 a6dced1b-120d-4b33-b2df-f0e3de8b679c/\r\ndrwxr-xr-x  2 boucheron boucheron 4,0K janv. 14 22:38 c62a502b-1c73-488b-8369-4a2015a3167f/\r\ndrwxr-xr-x  2 boucheron boucheron 4,0K janv. 18 14:18 c860dc3b-29d3-4531-9456-6e93bbf62477/\r\n-rw-rw-r--  1 boucheron boucheron  69K févr.  3 23:19 checking_parquet_citibike.html\r\n-rw-rw-r--  1 boucheron boucheron 3,7K janv. 15 22:44 checking_parquet_citibike.qmd\r\ndrwxr-xr-x  2 boucheron boucheron 4,0K janv. 17 22:43 f6b9ab48-3ee2-4045-965e-55da816d6774/\r\n-rw-rw-r--  1 boucheron boucheron  163 janv. 24 21:27 fruits.csv\r\n-rw-rw-r--  1 boucheron boucheron 9,0K janv. 14 22:37 gro.csv.gz\r\ndrwxrwxr-x  2 boucheron boucheron 4,0K févr.  3 21:21 .ipynb_checkpoints/\r\ndrwxrwxr-x  3 boucheron boucheron 4,0K févr.  3 23:19 .jupyter_cache/\r\n-rw-rw-r--  1 boucheron boucheron  128 févr.  3 23:00 _metadata.yml\r\n-rw-rw-r--  1 boucheron boucheron 9,0K janv. 14 22:36 miserables.txt\r\n-rw-rw-r--  1 boucheron boucheron 8,5K janv. 18 14:17 miserable_word_counts.pkl\r\ndrwxrwxr-x  3 boucheron boucheron 4,0K févr.  3 23:19 notebook01_python_files/\r\n-rw-rw-r--  1 boucheron boucheron  71K janv. 17 22:18 notebook01_python.qmd\r\n-rw-rw-r--  1 boucheron boucheron 164K févr.  3 23:19 notebook01_python.quarto_ipynb\r\ndrwxrwxr-x  3 boucheron boucheron 4,0K févr.  3 23:19 notebook02_numpy_files/\r\n-rw-rw-r--  1 boucheron boucheron  29K janv. 17 22:18 notebook02_numpy.qmd\r\n-rw-rw-r--  1 boucheron boucheron  22K janv. 24 21:27 notebook03_pandas.qmd\r\n-rw-rw-r--  1 boucheron boucheron  19K janv. 15 22:44 notebook04_pandas_spark.qmd\r\n-rw-rw-r--  1 boucheron boucheron 9,3K févr.  3 23:10 notebook05_sparkrdd.qmd\r\n-rw-rw-r--  1 boucheron boucheron  20K janv. 15 22:44 notebook06_sparksql.qmd\r\n-rw-rw-r--  1 boucheron boucheron  24K janv. 15 22:44 notebook07_json-format.qmd\r\n-rw-rw-r--  1 boucheron boucheron  25K janv. 15 22:44 notebook08_webdata-II.qmd\r\n-rw-rw-r--  1 boucheron boucheron  36K févr.  3 23:19 notebook-0.html\r\n-rw-rw-r--  1 boucheron boucheron  153 janv. 15 22:44 notebook-0.qmd\r\n-rw-rw-r--  1 boucheron boucheron  755 janv. 15 22:44 notebook10_graphx.qmd\r\n-rw-rw-r--  1 boucheron boucheron  19K janv. 15 22:44 notebook11_dive.qmd\r\n-rw-rw-r--  1 boucheron boucheron 7,1K janv. 15 22:44 notebook14.qmd\r\n-rw-rw-r--  1 boucheron boucheron 1019 janv. 19 23:17 notebook15_polars.qmd\r\n-rw-rw-r--  1 boucheron boucheron 2,0K janv. 15 22:44 notebookxx_pg_pandas_spark.qmd\r\n-rw-rw-r--  1 boucheron boucheron 9,6K janv. 18 13:38 tips.csv\r\n-rw-rw-r--  1 boucheron boucheron 4,7K janv. 15 22:44 xcitibike_spark.qmd\r\n-rw-rw-r--  1 boucheron boucheron  15K janv. 15 22:44 xciti_pandas.qmd\r\n```\n:::\n:::\n\n\n::: {#38999751 .cell execution_count=240}\n``` {.python .cell-code}\n# !rm -f miserables.txt\n```\n:::\n\n\n::: {#3b45df4e .cell execution_count=241}\n``` {.python .cell-code}\nos.path.join(path_data, filename)\n```\n\n::: {.cell-output .cell-output-display execution_count=239}\n```\n'./miserables.txt'\n```\n:::\n:::\n\n\nIn `jupyter` and `ipython` you can run terminal command lines using `!`\n\nLet's count number of lines and number of words with the `wc` command-line tool (linux or mac only, don't ask me how on windows)\n\n::: {#cd0e8611 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:39:34.789525Z\",\"start_time\":\"2021-01-15T08:39:34.498167Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=242}\n``` {.python .cell-code}\n# Lines count\n!wc -l miserables.txt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n79 miserables.txt\r\n```\n:::\n:::\n\n\n::: {#b6d1b55d .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:39:35.525235Z\",\"start_time\":\"2021-01-15T08:39:35.244691Z\"}' execution_count=243}\n``` {.python .cell-code}\n# Word count\n!wc -w miserables.txt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n277 miserables.txt\r\n```\n:::\n:::\n\n\n## Exercise\n\nCount the number of occurences of each word in the text file `miserables.txt`.\nWe use a `open` *context* and the `Counter` from before.\n\n::: {.content-visible when-profile='solution'} \n\n### Solution\n\n::: {#95d6ce1c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:39:38.300109Z\",\"start_time\":\"2021-01-15T08:39:38.073213Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=244}\n``` {.python .cell-code}\nfrom collections import Counter\n\ncounter = Counter()\n\nwith open('miserables.txt', encoding='utf8') as f:\n    for line_idx, line in enumerate(f):\n        line = line.strip().replace('\\n', ' ')\\\n            .replace(',', ' ')\\\n            .replace('.', ' ')\\\n            .replace('»', ' ')\\\n            .replace('-', ' ')\\\n            .replace('!', ' ')\\\n            .replace('(', ' ')\\\n            .replace(')', ' ')\\\n            .replace('?', ' ').split()\n\n        counter.update(line)\n```\n:::\n\n\n::: {#b457598a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:39:40.361408Z\",\"start_time\":\"2021-01-15T08:39:40.332944Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=245}\n``` {.python .cell-code}\ncounter\n```\n\n::: {.cell-output .cell-output-display execution_count=243}\n```\nCounter({'{': 15,\n         '}': 15,\n         '0': 8,\n         'img': 6,\n         'margin:': 6,\n         'font': 6,\n         'logo': 6,\n         'only': 6,\n         'screen': 6,\n         'and': 6,\n         'min': 6,\n         'color:': 5,\n         '0;': 5,\n         'display:': 5,\n         '<a': 5,\n         'src': 4,\n         'text': 4,\n         'none;': 4,\n         'device': 4,\n         'pixel': 4,\n         'ratio:': 4,\n         'width:': 3,\n         'a': 3,\n         'weight:': 3,\n         '2': 3,\n         'to': 3,\n         '<meta': 2,\n         'http': 2,\n         'equiv=\"Content': 2,\n         'GitHub': 2,\n         '50px': 2,\n         'decoration:': 2,\n         'line': 2,\n         'height:': 2,\n         '60px;': 2,\n         'size:': 2,\n         'inline': 2,\n         'block;': 2,\n         'margin': 2,\n         'top:': 2,\n         '35px;': 2,\n         '2x': 2,\n         'resolution:': 2,\n         '#suggestions': 2,\n         '<div': 2,\n         '</div>': 2,\n         'href=\"/\"': 2,\n         'class=\"logo': 2,\n         '<img': 2,\n         'width=\"32\"': 2,\n         'height=\"32\"': 2,\n         'title=\"\"': 2,\n         'alt=\"\"': 2,\n         'src=\"data:image/png;base64': 2,\n         '</a>': 2,\n         '<': 1,\n         'DOCTYPE': 1,\n         'html>': 1,\n         '<html>': 1,\n         '<head>': 1,\n         'type\"': 1,\n         'content=\"text/html;': 1,\n         'charset=utf': 1,\n         '8\">': 1,\n         'Security': 1,\n         'Policy\"': 1,\n         'content=\"default': 1,\n         \"'none';\": 1,\n         'style': 1,\n         \"'unsafe\": 1,\n         \"inline';\": 1,\n         'data:;': 1,\n         'connect': 1,\n         '\\'self\\'\">': 1,\n         '<title>Site': 1,\n         'not': 1,\n         'found': 1,\n         '&middot;': 1,\n         'Pages</title>': 1,\n         '<style': 1,\n         'type=\"text/css\"': 1,\n         'media=\"screen\">': 1,\n         'body': 1,\n         'background': 1,\n         '#f1f1f1;': 1,\n         'family:': 1,\n         '\"Helvetica': 1,\n         'Neue\"': 1,\n         'Helvetica': 1,\n         'Arial': 1,\n         'sans': 1,\n         'serif;': 1,\n         'container': 1,\n         'auto': 1,\n         '40px': 1,\n         'auto;': 1,\n         '600px;': 1,\n         'align:': 1,\n         'center;': 1,\n         '#4183c4;': 1,\n         'a:hover': 1,\n         'underline;': 1,\n         'h1': 1,\n         '800px;': 1,\n         'position:relative;': 1,\n         'left:': 1,\n         '100px;': 1,\n         'letter': 1,\n         'spacing:': 1,\n         '1px;': 1,\n         '100;': 1,\n         '0px': 1,\n         'shadow:': 1,\n         '1px': 1,\n         '#fff;': 1,\n         'p': 1,\n         'rgba': 1,\n         '5': 1,\n         ';': 1,\n         '20px': 1,\n         '1': 1,\n         '6;': 1,\n         'ul': 1,\n         'list': 1,\n         'style:': 1,\n         '25px': 1,\n         'padding:': 1,\n         'li': 1,\n         'table': 1,\n         'cell;': 1,\n         'bold;': 1,\n         '1%;': 1,\n         '@media': 1,\n         'webkit': 1,\n         'moz': 1,\n         'o': 1,\n         '2/1': 1,\n         '192dpi': 1,\n         '2dppx': 1,\n         '1x': 1,\n         '#ccc;': 1,\n         '#666666;': 1,\n         '200;': 1,\n         '14px;': 1,\n         '10px;': 1,\n         '</style>': 1,\n         '</head>': 1,\n         '<body>': 1,\n         'class=\"container\">': 1,\n         '<h1>404</h1>': 1,\n         '<p><strong>There': 1,\n         \"isn't\": 1,\n         'Pages': 1,\n         'site': 1,\n         'here': 1,\n         '</strong></p>': 1,\n         '<p>': 1,\n         'If': 1,\n         \"you're\": 1,\n         'trying': 1,\n         'publish': 1,\n         'one': 1,\n         'href=\"https://help': 1,\n         'github': 1,\n         'com/pages/\">read': 1,\n         'the': 1,\n         'full': 1,\n         'documentation</a>': 1,\n         'learn': 1,\n         'how': 1,\n         'set': 1,\n         'up': 1,\n         '<strong>GitHub': 1,\n         'Pages</strong>': 1,\n         'for': 1,\n         'your': 1,\n         'repository': 1,\n         'organization': 1,\n         'or': 1,\n         'user': 1,\n         'account': 1,\n         '</p>': 1,\n         'id=\"suggestions\">': 1,\n         'href=\"https://githubstatus': 1,\n         'com\">GitHub': 1,\n         'Status</a>': 1,\n         '&mdash;': 1,\n         'href=\"https://twitter': 1,\n         'com/githubstatus\">@githubstatus</a>': 1,\n         '1x\">': 1,\n         'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoTWFjaW50b3NoKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTZCRDY3REIzRjAxMUUyQUQzREIxQzRENUFFNUM5NiIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTZCRDY3RUIzRjAxMUUyQUQzREIxQzRENUFFNUM5NiI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkUxNkJENjdCQjNGMDExRTJBRDNEQjFDNEQ1QUU1Qzk2IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkUxNkJENjdDQjNGMDExRTJBRDNEQjFDNEQ1QUU1Qzk2Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+SM9MCAAAA+5JREFUeNrEV11Ik1EY3s4+ddOp29Q5b0opCgKFsoKoi5Kg6CIhuwi6zLJLoYLopq4qsKKgi4i6CYIoU/q5iDAKs6syoS76IRWtyJ+p7cdt7sf1PGOD+e0c3dygAx/67ZzzPM95/877GYdHRg3ZjMXFxepQKNS6sLCwJxqNNuFpiMfjVs4ZjUa/pmmjeD6VlJS8NpvNT4QQ7mxwjSsJiEQim/1+/9lgMHgIr5ohuxG1WCw9Vqv1clFR0dCqBODElV6v90ogEDjGdYbVjXhpaendioqK07CIR7ZAqE49PT09BPL2PMgTByQGsYiZlQD4uMXtdr+JxWINhgINYhGT2MsKgMrm2dnZXgRXhaHAg5jEJodUAHxux4LudHJE9RdEdA+i3Juz7bGHe4mhE9FNrgwBCLirMFV9Okh5eflFh8PR5nK5nDabrR2BNJlKO0T35+Li4n4+/J+/JQCxhmu5h3uJoXNHPbmWZAHMshWB8l5/ipqammaAf0zPDDx1ONV3vurdidqwAQL+pEc8sLcAe1CCvQ3YHxIW8Pl85xSWNC1hADDIv0rIE/o4J0k3kww4xSlwIhcq3EFFOm7KN/hUGOQkt0CFa5WpNJlMvxBEz/IVQAxg/ZRZl9wiHA63yDYieM7DnLP5CiAGsC7I5sgtYKJGWe2A8seFqgFJrJjEPY1Cn3pJ8/9W1e5VWsFDTEmFrBcoDhZJEQkXuhICMyKpjhahqN21hRYATKfUOlDmkygrR4o4C0VOLGJKrOITKB4jijzdXygBKixyC5TDQdnk/Pz8qRw6oOWGlsTKGOQW6OH6FBWsyePxdOXLTgxiyebILZCjz+GLgMIKnXNzc49YMlcRdHXcSwxFVgTInQhC9G33UhNoJLuqq6t345p9y3eUy8OTk5PjAHuI9uo4b07FBaOhsu0A4Unc+T1TU1Nj3KsSSE5yJ65jqF2DDd8QqWYmAZrIM2VlZTdnZmb6AbpdV9V6ec9znf5Q7HjYumdRE0JOp3MjitO4SFa+cZz8Umqe3TCbSLvdfkR/kWDdNQl5InuTcysOcpFT35ZrbBxx4p3JAHlZVVW1D/634VRt+FvLBgK/v5LV9WS+10xMTEwtRw7XvqOL+e2Q8V3AYIOIAXQ26/heWVnZCVfcyKHg2CBgTpmPmjYM8l24GyaUHyaIh7XwfR9ErE8qHoDfn2LTNAVC0HX6MFcBIP8Bi+6F6cdW/DICkANRfx99fEYFQ7Nph5i/uQiA214gno7K+guhaiKg9gC62+M8eR7XsBsYJ4ilam60Fb7r7uAj8wFyuwM1oIOWgfmDy6RXEEQzJMPe23DXrVS7rtyD3Df8z/FPgAEAzWU5Ku59ZAUAAAAASUVORK5CYII=\">': 1,\n         '2x\">': 1,\n         'iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoTWFjaW50b3NoKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpEQUM1QkUxRUI0MUMxMUUyQUQzREIxQzRENUFFNUM5NiIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpEQUM1QkUxRkI0MUMxMUUyQUQzREIxQzRENUFFNUM5NiI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkUxNkJENjdGQjNGMDExRTJBRDNEQjFDNEQ1QUU1Qzk2IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkUxNkJENjgwQjNGMDExRTJBRDNEQjFDNEQ1QUU1Qzk2Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+hfPRaQAAB6lJREFUeNrsW2mME2UYbodtt+2222u35QheoCCYGBQligIJgkZJNPzgigoaTEj8AdFEMfADfyABkgWiiWcieK4S+QOiHAYUj2hMNKgYlEujpNttu9vttbvdw+chU1K6M535pt3ubHCSyezR+b73eb73+t7vrfXsufOW4bz6+vom9/b23ovnNNw34b5xYGAgODg46Mbt4mesVmsWd1qSpHhdXd2fuP/Afcput5/A88xwymcdBgLqenp6FuRyuWV4zu/v759QyWBjxoz5t76+/gun09mK5xFyakoCAPSaTCazNpvNPoYVbh6O1YKGRF0u13sNDQ27QMzfpiAAKj0lnU6/gBVfAZW2WWpwwVzy0IgP3G73FpjI6REhAGA9qVRqA1b9mVoBVyIC2tDi8Xg24+dUzQiAbS/s7Ox8G2o/3mKCC+Zw0efzPQEfcVjYrARX3dbV1bUtHo8fMgt42f+Mp0yUTVQbdWsAHVsikdiHkHaPxcQXQufXgUBgMRxme9U0AAxfH4vFvjM7eF6UkbJS5qoQwEQGA57Ac5JllFyUVZZ5ckUEgMVxsK2jlSYzI+QXJsiyjzNEAJyJAzb/KQa41jJKL8pODMQiTEAymXw5n8/P0IjD3bh7Rgog59aanxiIRTVvV/oj0tnHca/WMrVwODwB3raTGxzkBg/gnZVapFV62Wy2n5AO70HM/5wbJ0QnXyQSaVPDIuNZzY0V3ntHMwxiwHA0Gj2Np7ecIBDgaDAYXKCQJM1DhrgJ3nhulcPbl8j4NmHe46X/g60fwbz3aewjkqFQaAqebWU1AOqyQwt8Id6qEHMc97zu7u7FGGsn7HAiVuosVw7P35C1nccdgSCxop1dHeZswmfHMnxBo6ZTk+jN8dl/vF7vWofDsa+MLN9oEUBMxOb3+1eoEsBVw6Zmua49r8YmhAKDiEPcMwBsxMiqQ+ixzPFxZyqRpXARG/YOr1ObFJ0gUskXBbamcR1OKmMUvDxHRAu8/LmY3jFLMUpFqz9HxG65smYJdyKyECOxDiEAe/p1gjF2oonivZAsxVgl2daa4EQWCW6J55qFAFFZiJWYLxNQy2qOSUzGRsyXCUDIeliwAHEO4WSlWQBRFoZakXcKmCXmyXAKs0Ve9vl8q42WoIYpJU4hV3hKcNs8m9gl7p/xQ73eF5kB4j5mNrWmTJRNwAzqiV1CxjVTZCIkEq+Z1bZFZSN2CenmVAFVy4Plz8xKAGWjjAKFk6lCBMDR/MJjLLMSQNm43xAiQKTaA+9/wewhDjL+JVI1kkTSSOTcKbMTwPqESAot6dn6Fr1gHwVJju6IRuyiByPuUUBAg5DGkAgBmxlvdgIEK9gDkohdY/BJo4CAG0R8miRSsGABkgVQs4KXu098IgUXSSRsFAoKZiVAVDY2WUiiPTjYRi41KwGisrGsLtlsth8Fiwnz2fBkQvWfRtlE3iF2yW63/yCacXZ1dW02GwGyTFaRd4idJnCKHRaCxYRHoG5LTKT6SyiToP1fJHbmAYPYRR0UnZQtMnA6s0zg+GZBlt0Gdo7EPHgpE3Q6nZ8YyLhc8Xj8MJh/aKTAY+5FPAKHLE7RdwuYJZmNwzyCMkBCYyKROJBMJl9B/PXXCjjmCmDOVzH3fiPpObEWGqoKe4EBl8v1hlqsdLvd23mkxHM9pc9kMpmno9HoeTii7ewbHEZPPx1ztLS1tV3AnGuMjiNjvbQFuHw6zDo5By7dTPAQNBgMLrRarTkSls1mnwT7uwp9virx9QzbW/HuV/j5d/b+6jniKlllP8lkeONJDk+dq9GsQTnC4fB1heO0K47Hwe7WdDr9nAKgXwOBwHI+C45Htj1d6sd429TUNEcmUdc+PRaLHcvn87dXW4ugzdsaGxufL94NFv9zi1J7GVbhlvb2dnaJ3SVrxfc+n2+NTsZ7/H7/Mr3g5XdSIHyJSH1PZ+7fToyl2+ErqilgZ4NaLYB9goVGaHjR93Hv1ZrU4XDsFT20kH3PObzbWk0CgG1jacVIUnAQb9F+VexyLMzkpcLv0IJV7AHQIOCAUYHx7v5qgScmYHtTqSAyZLEJTK22Bie4iq3xsqpm4SAf9Hq9a2DnJ4uLK3SEULcdRvp3i3zHySqpficxEdsQc1NrlYXXvR+O7qASSezXB+h1SuUomgg9LL8BUoV4749EIolKh+EiqWmqVEZlDgHks2pxHw7xTqUQw9J5NcAXOK10AGIoZ6Zli6JY6Z1Q461KoZ4NiKLHarW+KDsxlDUPHZ5zPQZqUVDPJsTqb5n9malbpAh8C2XXDLl62+WZIDFRUlNVOiwencnNU3aQEkL+cDMSoLvZo2fQB7AJssNAuFuvorlDVVkkg2I87+jo2K2QAVphDrfyViK5VqtO34OkaxXCp+7drdDBCAdubm6eidX+2WwqT5komwh4YQLk+H4aE93h8Xg2gvHekQZOGSgLZTLyDTLJ4Lx9/KZWKBSainT4Iy3FqQBfnUZR42PKQFksBr9QKVXCPusD3OiA/RkQ5kP8qV/Jl1WywAp/6+dcmPM2zL1UrUahe4JqfnWWKXIul3uUbfP8njAFLW1OFr3gdFtZ72cNH+PtQT7/brW+NXqJAHh0y9V8/U/A1U7AfwIMAD7mS3pCbuWJAAAAAElFTkSuQmCC\">': 1,\n         '</body>': 1,\n         '</html>': 1})\n```\n:::\n:::\n\n\n::: {#857f896a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:39:40.577854Z\",\"start_time\":\"2021-01-15T08:39:40.547026Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=246}\n``` {.python .cell-code}\ncounter.most_common(500)\n```\n\n::: {.cell-output .cell-output-display execution_count=244}\n```\n[('{', 15),\n ('}', 15),\n ('0', 8),\n ('img', 6),\n ('margin:', 6),\n ('font', 6),\n ('logo', 6),\n ('only', 6),\n ('screen', 6),\n ('and', 6),\n ('min', 6),\n ('color:', 5),\n ('0;', 5),\n ('display:', 5),\n ('<a', 5),\n ('src', 4),\n ('text', 4),\n ('none;', 4),\n ('device', 4),\n ('pixel', 4),\n ('ratio:', 4),\n ('width:', 3),\n ('a', 3),\n ('weight:', 3),\n ('2', 3),\n ('to', 3),\n ('<meta', 2),\n ('http', 2),\n ('equiv=\"Content', 2),\n ('GitHub', 2),\n ('50px', 2),\n ('decoration:', 2),\n ('line', 2),\n ('height:', 2),\n ('60px;', 2),\n ('size:', 2),\n ('inline', 2),\n ('block;', 2),\n ('margin', 2),\n ('top:', 2),\n ('35px;', 2),\n ('2x', 2),\n ('resolution:', 2),\n ('#suggestions', 2),\n ('<div', 2),\n ('</div>', 2),\n ('href=\"/\"', 2),\n ('class=\"logo', 2),\n ('<img', 2),\n ('width=\"32\"', 2),\n ('height=\"32\"', 2),\n ('title=\"\"', 2),\n ('alt=\"\"', 2),\n ('src=\"data:image/png;base64', 2),\n ('</a>', 2),\n ('<', 1),\n ('DOCTYPE', 1),\n ('html>', 1),\n ('<html>', 1),\n ('<head>', 1),\n ('type\"', 1),\n ('content=\"text/html;', 1),\n ('charset=utf', 1),\n ('8\">', 1),\n ('Security', 1),\n ('Policy\"', 1),\n ('content=\"default', 1),\n (\"'none';\", 1),\n ('style', 1),\n (\"'unsafe\", 1),\n (\"inline';\", 1),\n ('data:;', 1),\n ('connect', 1),\n ('\\'self\\'\">', 1),\n ('<title>Site', 1),\n ('not', 1),\n ('found', 1),\n ('&middot;', 1),\n ('Pages</title>', 1),\n ('<style', 1),\n ('type=\"text/css\"', 1),\n ('media=\"screen\">', 1),\n ('body', 1),\n ('background', 1),\n ('#f1f1f1;', 1),\n ('family:', 1),\n ('\"Helvetica', 1),\n ('Neue\"', 1),\n ('Helvetica', 1),\n ('Arial', 1),\n ('sans', 1),\n ('serif;', 1),\n ('container', 1),\n ('auto', 1),\n ('40px', 1),\n ('auto;', 1),\n ('600px;', 1),\n ('align:', 1),\n ('center;', 1),\n ('#4183c4;', 1),\n ('a:hover', 1),\n ('underline;', 1),\n ('h1', 1),\n ('800px;', 1),\n ('position:relative;', 1),\n ('left:', 1),\n ('100px;', 1),\n ('letter', 1),\n ('spacing:', 1),\n ('1px;', 1),\n ('100;', 1),\n ('0px', 1),\n ('shadow:', 1),\n ('1px', 1),\n ('#fff;', 1),\n ('p', 1),\n ('rgba', 1),\n ('5', 1),\n (';', 1),\n ('20px', 1),\n ('1', 1),\n ('6;', 1),\n ('ul', 1),\n ('list', 1),\n ('style:', 1),\n ('25px', 1),\n ('padding:', 1),\n ('li', 1),\n ('table', 1),\n ('cell;', 1),\n ('bold;', 1),\n ('1%;', 1),\n ('@media', 1),\n ('webkit', 1),\n ('moz', 1),\n ('o', 1),\n ('2/1', 1),\n ('192dpi', 1),\n ('2dppx', 1),\n ('1x', 1),\n ('#ccc;', 1),\n ('#666666;', 1),\n ('200;', 1),\n ('14px;', 1),\n ('10px;', 1),\n ('</style>', 1),\n ('</head>', 1),\n ('<body>', 1),\n ('class=\"container\">', 1),\n ('<h1>404</h1>', 1),\n ('<p><strong>There', 1),\n (\"isn't\", 1),\n ('Pages', 1),\n ('site', 1),\n ('here', 1),\n ('</strong></p>', 1),\n ('<p>', 1),\n ('If', 1),\n (\"you're\", 1),\n ('trying', 1),\n ('publish', 1),\n ('one', 1),\n ('href=\"https://help', 1),\n ('github', 1),\n ('com/pages/\">read', 1),\n ('the', 1),\n ('full', 1),\n ('documentation</a>', 1),\n ('learn', 1),\n ('how', 1),\n ('set', 1),\n ('up', 1),\n ('<strong>GitHub', 1),\n ('Pages</strong>', 1),\n ('for', 1),\n ('your', 1),\n ('repository', 1),\n ('organization', 1),\n ('or', 1),\n ('user', 1),\n ('account', 1),\n ('</p>', 1),\n ('id=\"suggestions\">', 1),\n ('href=\"https://githubstatus', 1),\n ('com\">GitHub', 1),\n ('Status</a>', 1),\n ('&mdash;', 1),\n ('href=\"https://twitter', 1),\n ('com/githubstatus\">@githubstatus</a>', 1),\n ('1x\">', 1),\n ('iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoTWFjaW50b3NoKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTZCRDY3REIzRjAxMUUyQUQzREIxQzRENUFFNUM5NiIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTZCRDY3RUIzRjAxMUUyQUQzREIxQzRENUFFNUM5NiI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkUxNkJENjdCQjNGMDExRTJBRDNEQjFDNEQ1QUU1Qzk2IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkUxNkJENjdDQjNGMDExRTJBRDNEQjFDNEQ1QUU1Qzk2Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+SM9MCAAAA+5JREFUeNrEV11Ik1EY3s4+ddOp29Q5b0opCgKFsoKoi5Kg6CIhuwi6zLJLoYLopq4qsKKgi4i6CYIoU/q5iDAKs6syoS76IRWtyJ+p7cdt7sf1PGOD+e0c3dygAx/67ZzzPM95/877GYdHRg3ZjMXFxepQKNS6sLCwJxqNNuFpiMfjVs4ZjUa/pmmjeD6VlJS8NpvNT4QQ7mxwjSsJiEQim/1+/9lgMHgIr5ohuxG1WCw9Vqv1clFR0dCqBODElV6v90ogEDjGdYbVjXhpaendioqK07CIR7ZAqE49PT09BPL2PMgTByQGsYiZlQD4uMXtdr+JxWINhgINYhGT2MsKgMrm2dnZXgRXhaHAg5jEJodUAHxux4LudHJE9RdEdA+i3Juz7bGHe4mhE9FNrgwBCLirMFV9Okh5eflFh8PR5nK5nDabrR2BNJlKO0T35+Li4n4+/J+/JQCxhmu5h3uJoXNHPbmWZAHMshWB8l5/ipqammaAf0zPDDx1ONV3vurdidqwAQL+pEc8sLcAe1CCvQ3YHxIW8Pl85xSWNC1hADDIv0rIE/o4J0k3kww4xSlwIhcq3EFFOm7KN/hUGOQkt0CFa5WpNJlMvxBEz/IVQAxg/ZRZl9wiHA63yDYieM7DnLP5CiAGsC7I5sgtYKJGWe2A8seFqgFJrJjEPY1Cn3pJ8/9W1e5VWsFDTEmFrBcoDhZJEQkXuhICMyKpjhahqN21hRYATKfUOlDmkygrR4o4C0VOLGJKrOITKB4jijzdXygBKixyC5TDQdnk/Pz8qRw6oOWGlsTKGOQW6OH6FBWsyePxdOXLTgxiyebILZCjz+GLgMIKnXNzc49YMlcRdHXcSwxFVgTInQhC9G33UhNoJLuqq6t345p9y3eUy8OTk5PjAHuI9uo4b07FBaOhsu0A4Unc+T1TU1Nj3KsSSE5yJ65jqF2DDd8QqWYmAZrIM2VlZTdnZmb6AbpdV9V6ec9znf5Q7HjYumdRE0JOp3MjitO4SFa+cZz8Umqe3TCbSLvdfkR/kWDdNQl5InuTcysOcpFT35ZrbBxx4p3JAHlZVVW1D/634VRt+FvLBgK/v5LV9WS+10xMTEwtRw7XvqOL+e2Q8V3AYIOIAXQ26/heWVnZCVfcyKHg2CBgTpmPmjYM8l24GyaUHyaIh7XwfR9ErE8qHoDfn2LTNAVC0HX6MFcBIP8Bi+6F6cdW/DICkANRfx99fEYFQ7Nph5i/uQiA214gno7K+guhaiKg9gC62+M8eR7XsBsYJ4ilam60Fb7r7uAj8wFyuwM1oIOWgfmDy6RXEEQzJMPe23DXrVS7rtyD3Df8z/FPgAEAzWU5Ku59ZAUAAAAASUVORK5CYII=\">',\n  1),\n ('2x\">', 1),\n ('iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoTWFjaW50b3NoKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpEQUM1QkUxRUI0MUMxMUUyQUQzREIxQzRENUFFNUM5NiIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpEQUM1QkUxRkI0MUMxMUUyQUQzREIxQzRENUFFNUM5NiI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkUxNkJENjdGQjNGMDExRTJBRDNEQjFDNEQ1QUU1Qzk2IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkUxNkJENjgwQjNGMDExRTJBRDNEQjFDNEQ1QUU1Qzk2Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+hfPRaQAAB6lJREFUeNrsW2mME2UYbodtt+2222u35QheoCCYGBQligIJgkZJNPzgigoaTEj8AdFEMfADfyABkgWiiWcieK4S+QOiHAYUj2hMNKgYlEujpNttu9vttbvdw+chU1K6M535pt3ubHCSyezR+b73eb73+t7vrfXsufOW4bz6+vom9/b23ovnNNw34b5xYGAgODg46Mbt4mesVmsWd1qSpHhdXd2fuP/Afcput5/A88xwymcdBgLqenp6FuRyuWV4zu/v759QyWBjxoz5t76+/gun09mK5xFyakoCAPSaTCazNpvNPoYVbh6O1YKGRF0u13sNDQ27QMzfpiAAKj0lnU6/gBVfAZW2WWpwwVzy0IgP3G73FpjI6REhAGA9qVRqA1b9mVoBVyIC2tDi8Xg24+dUzQiAbS/s7Ox8G2o/3mKCC+Zw0efzPQEfcVjYrARX3dbV1bUtHo8fMgt42f+Mp0yUTVQbdWsAHVsikdiHkHaPxcQXQufXgUBgMRxme9U0AAxfH4vFvjM7eF6UkbJS5qoQwEQGA57Ac5JllFyUVZZ5ckUEgMVxsK2jlSYzI+QXJsiyjzNEAJyJAzb/KQa41jJKL8pODMQiTEAymXw5n8/P0IjD3bh7Rgog59aanxiIRTVvV/oj0tnHca/WMrVwODwB3raTGxzkBg/gnZVapFV62Wy2n5AO70HM/5wbJ0QnXyQSaVPDIuNZzY0V3ntHMwxiwHA0Gj2Np7ecIBDgaDAYXKCQJM1DhrgJ3nhulcPbl8j4NmHe46X/g60fwbz3aewjkqFQaAqebWU1AOqyQwt8Id6qEHMc97zu7u7FGGsn7HAiVuosVw7P35C1nccdgSCxop1dHeZswmfHMnxBo6ZTk+jN8dl/vF7vWofDsa+MLN9oEUBMxOb3+1eoEsBVw6Zmua49r8YmhAKDiEPcMwBsxMiqQ+ixzPFxZyqRpXARG/YOr1ObFJ0gUskXBbamcR1OKmMUvDxHRAu8/LmY3jFLMUpFqz9HxG65smYJdyKyECOxDiEAe/p1gjF2oonivZAsxVgl2daa4EQWCW6J55qFAFFZiJWYLxNQy2qOSUzGRsyXCUDIeliwAHEO4WSlWQBRFoZakXcKmCXmyXAKs0Ve9vl8q42WoIYpJU4hV3hKcNs8m9gl7p/xQ73eF5kB4j5mNrWmTJRNwAzqiV1CxjVTZCIkEq+Z1bZFZSN2CenmVAFVy4Plz8xKAGWjjAKFk6lCBMDR/MJjLLMSQNm43xAiQKTaA+9/wewhDjL+JVI1kkTSSOTcKbMTwPqESAot6dn6Fr1gHwVJju6IRuyiByPuUUBAg5DGkAgBmxlvdgIEK9gDkohdY/BJo4CAG0R8miRSsGABkgVQs4KXu098IgUXSSRsFAoKZiVAVDY2WUiiPTjYRi41KwGisrGsLtlsth8Fiwnz2fBkQvWfRtlE3iF2yW63/yCacXZ1dW02GwGyTFaRd4idJnCKHRaCxYRHoG5LTKT6SyiToP1fJHbmAYPYRR0UnZQtMnA6s0zg+GZBlt0Gdo7EPHgpE3Q6nZ8YyLhc8Xj8MJh/aKTAY+5FPAKHLE7RdwuYJZmNwzyCMkBCYyKROJBMJl9B/PXXCjjmCmDOVzH3fiPpObEWGqoKe4EBl8v1hlqsdLvd23mkxHM9pc9kMpmno9HoeTii7ewbHEZPPx1ztLS1tV3AnGuMjiNjvbQFuHw6zDo5By7dTPAQNBgMLrRarTkSls1mnwT7uwp9virx9QzbW/HuV/j5d/b+6jniKlllP8lkeONJDk+dq9GsQTnC4fB1heO0K47Hwe7WdDr9nAKgXwOBwHI+C45Htj1d6sd429TUNEcmUdc+PRaLHcvn87dXW4ugzdsaGxufL94NFv9zi1J7GVbhlvb2dnaJ3SVrxfc+n2+NTsZ7/H7/Mr3g5XdSIHyJSH1PZ+7fToyl2+ErqilgZ4NaLYB9goVGaHjR93Hv1ZrU4XDsFT20kH3PObzbWk0CgG1jacVIUnAQb9F+VexyLMzkpcLv0IJV7AHQIOCAUYHx7v5qgScmYHtTqSAyZLEJTK22Bie4iq3xsqpm4SAf9Hq9a2DnJ4uLK3SEULcdRvp3i3zHySqpficxEdsQc1NrlYXXvR+O7qASSezXB+h1SuUomgg9LL8BUoV4749EIolKh+EiqWmqVEZlDgHks2pxHw7xTqUQw9J5NcAXOK10AGIoZ6Zli6JY6Z1Q461KoZ4NiKLHarW+KDsxlDUPHZ5zPQZqUVDPJsTqb5n9malbpAh8C2XXDLl62+WZIDFRUlNVOiwencnNU3aQEkL+cDMSoLvZo2fQB7AJssNAuFuvorlDVVkkg2I87+jo2K2QAVphDrfyViK5VqtO34OkaxXCp+7drdDBCAdubm6eidX+2WwqT5komwh4YQLk+H4aE93h8Xg2gvHekQZOGSgLZTLyDTLJ4Lx9/KZWKBSainT4Iy3FqQBfnUZR42PKQFksBr9QKVXCPusD3OiA/RkQ5kP8qV/Jl1WywAp/6+dcmPM2zL1UrUahe4JqfnWWKXIul3uUbfP8njAFLW1OFr3gdFtZ72cNH+PtQT7/brW+NXqJAHh0y9V8/U/A1U7AfwIMAD7mS3pCbuWJAAAAAElFTkSuQmCC\">',\n  1),\n ('</body>', 1),\n ('</html>', 1)]\n```\n:::\n:::\n\n\n:::\n\n\n## Contexts \n\n- A *context* in Python is something that we use with the `with` keyword.\n\n- It allows to deal automatically with the opening and the closing of the file.\n\nNote the for loop:\n```python\nfor line in f:\n    ...\n```\nYou loop directly over the lines of the open file from **within** the `open` context\n\n## About `pickle`\n\nYou can save your computation with `pickle`. \n\n- `pickle` is a way of saving **almost anything** with Python.\n- It serializes the object in a binary format, and is usually the simplest and fastest way to go.\n\n::: {#d9bd945b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:19.146250Z\",\"start_time\":\"2021-01-15T08:40:19.105800Z\"}' execution_count=247}\n``` {.python .cell-code}\nimport pickle as pkl\n\n# Let's save it\nwith open('miserable_word_counts.pkl', 'wb') as f:\n    pkl.dump(counter, f)\n\n# And read it again\nwith open('miserable_word_counts.pkl', 'rb') as f:\n    counter = pkl.load(f)\n```\n:::\n\n\n::: {#633d8cc3 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:20.330093Z\",\"start_time\":\"2021-01-15T08:40:20.320482Z\"}' execution_count=248}\n``` {.python .cell-code}\ncounter.most_common(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=246}\n```\n[('{', 15),\n ('}', 15),\n ('0', 8),\n ('img', 6),\n ('margin:', 6),\n ('font', 6),\n ('logo', 6),\n ('only', 6),\n ('screen', 6),\n ('and', 6)]\n```\n:::\n:::\n\n\n# Defining functions\n\nYou **must** use function to order and reuse code\n\n## Function definition\n\nFunction blocks must be indented as other control-flow blocks.\n\n::: {#3874bfca .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:22.581564Z\",\"start_time\":\"2021-01-15T08:40:22.574422Z\"}' execution_count=249}\n``` {.python .cell-code}\ndef test():\n    return 'in test function'\n\ntest()\n```\n\n::: {.cell-output .cell-output-display execution_count=247}\n```\n'in test function'\n```\n:::\n:::\n\n\n## Return statement\n\nFunctions can *optionally* return values.\nBy default, functions return ``None``.\n\nThe syntax to define a function:\n\n- the ``def`` keyword;\n- is followed by the function's **name**, then\n- the arguments of the function are given between parentheses followed by a colon\n- the function body;\n- and ``return object`` for optionally returning values.\n\n::: {#c57cb990 .cell execution_count=250}\n``` {.python .cell-code}\nNone is None\n```\n\n::: {.cell-output .cell-output-display execution_count=248}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#c4ea35da .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:25.396369Z\",\"start_time\":\"2021-01-15T08:40:25.389580Z\"}' execution_count=251}\n``` {.python .cell-code}\ndef f(x):\n    return x + 10\nf(20)\n```\n\n::: {.cell-output .cell-output-display execution_count=249}\n```\n30\n```\n:::\n:::\n\n\nA function that returns several elements returns a `tuple`\n\n::: {#919d583e .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:25.827300Z\",\"start_time\":\"2021-01-15T08:40:25.821162Z\"}' execution_count=252}\n``` {.python .cell-code}\ndef f(x):\n    return x + 1, x + 4\n\nf(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=250}\n```\n(6, 9)\n```\n:::\n:::\n\n\n::: {#14c71b0b .cell execution_count=253}\n``` {.python .cell-code}\ntype(f)\n```\n\n::: {.cell-output .cell-output-display execution_count=251}\n```\nfunction\n```\n:::\n:::\n\n\n::: {#01882458 .cell execution_count=254}\n``` {.python .cell-code}\nf.truc = \"bonjour\"\n```\n:::\n\n\n::: {#a3fff9c7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:26.056197Z\",\"start_time\":\"2021-01-15T08:40:26.050039Z\"}' execution_count=255}\n``` {.python .cell-code}\ntype(f(5))\n```\n\n::: {.cell-output .cell-output-display execution_count=253}\n```\ntuple\n```\n:::\n:::\n\n\n## Parameters\n\nMandatory parameters (positional arguments)\n\n::: {#0fb6a4c0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:26.897893Z\",\"start_time\":\"2021-01-15T08:40:26.891052Z\"}' execution_count=256}\n``` {.python .cell-code}\ndef double_it(x):\n    return x * 2\n\ndouble_it(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=254}\n```\n4\n```\n:::\n:::\n\n\n::: {#42884534 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:27.154900Z\",\"start_time\":\"2021-01-15T08:40:27.127912Z\"}' execution_count=257}\n``` {.python .cell-code}\ntry:\n    double_it()\nexcept TypeError:\n    print(\"TypeError: double_it() missing 1 required positional argument: 'x'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTypeError: double_it() missing 1 required positional argument: 'x'\n```\n:::\n:::\n\n\nOptimal parameters\n\n::: {#0d801ad5 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:28.071546Z\",\"start_time\":\"2021-01-15T08:40:28.065551Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=258}\n``` {.python .cell-code}\ndef double_it(x=2):\n    return x * 2\n\ndouble_it()\n```\n\n::: {.cell-output .cell-output-display execution_count=256}\n```\n4\n```\n:::\n:::\n\n\n::: {#7c64900a .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:30.162845Z\",\"start_time\":\"2021-01-15T08:40:30.155840Z\"}' execution_count=259}\n``` {.python .cell-code}\ndouble_it(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=257}\n```\n6\n```\n:::\n:::\n\n\n::: {#7ea06112 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:30.451386Z\",\"start_time\":\"2021-01-15T08:40:30.446933Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=260}\n``` {.python .cell-code}\ndef f(x, y=2, z=10):\n    print(x, '+', y, '+', z, '=', x + y + z)\n```\n:::\n\n\n::: {#11719330 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:30.696765Z\",\"start_time\":\"2021-01-15T08:40:30.691179Z\"}' execution_count=261}\n``` {.python .cell-code}\nf(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 + 2 + 10 = 17\n```\n:::\n:::\n\n\n::: {#95d6f0f8 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:31.857293Z\",\"start_time\":\"2021-01-15T08:40:31.851956Z\"}' execution_count=262}\n``` {.python .cell-code}\nf(5, -2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 + -2 + 10 = 13\n```\n:::\n:::\n\n\n::: {#83d655b4 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:32.095421Z\",\"start_time\":\"2021-01-15T08:40:32.089684Z\"}' execution_count=263}\n``` {.python .cell-code}\nf(5, -2, 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 + -2 + 8 = 11\n```\n:::\n:::\n\n\n::: {#cd619733 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:32.310466Z\",\"start_time\":\"2021-01-15T08:40:32.304981Z\"}' execution_count=264}\n``` {.python .cell-code}\nf(z=5, x=-2, y=8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-2 + 8 + 5 = 11\n```\n:::\n:::\n\n\n## Argument unpacking and keyword argument unpacking\n\nYou can do stuff like this, using unpacking `*` notation\n\n::: {#59b0e197 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:32.767851Z\",\"start_time\":\"2021-01-15T08:40:32.762760Z\"}' execution_count=265}\n``` {.python .cell-code}\na, *b, c = 1, 2, 3, 4, 5\na, b, c\n```\n\n::: {.cell-output .cell-output-display execution_count=263}\n```\n(1, [2, 3, 4], 5)\n```\n:::\n:::\n\n\nBack to function `f` you can unpack a `tuple` as positional arguments\n\n::: {#45d8a4ee .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:33.123879Z\",\"start_time\":\"2021-01-15T08:40:33.117094Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=266}\n``` {.python .cell-code}\ntt = (1, 2, 3)\nf(*tt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 + 2 + 3 = 6\n```\n:::\n:::\n\n\n::: {#fb52e758 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:33.344119Z\",\"start_time\":\"2021-01-15T08:40:33.339429Z\"}' execution_count=267}\n``` {.python .cell-code}\ndd = {'y': 10, 'z': -5}\n```\n:::\n\n\n::: {#aaa913e2 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:33.503933Z\",\"start_time\":\"2021-01-15T08:40:33.497965Z\"}' execution_count=268}\n``` {.python .cell-code}\nf(3, **dd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3 + 10 + -5 = 8\n```\n:::\n:::\n\n\n::: {#97fc73bc .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:33.713710Z\",\"start_time\":\"2021-01-15T08:40:33.708290Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=269}\n``` {.python .cell-code}\ndef g(x, z, y, t=1, u=2):\n    print(x, '+', y, '+', z, '+', t, '+', \n          u, '=', x + y + z + t + u)\n```\n:::\n\n\n::: {#bdf0f0d4 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:33.853331Z\",\"start_time\":\"2021-01-15T08:40:33.847946Z\"}' execution_count=270}\n``` {.python .cell-code}\ntt = (1, -4, 2)\ndd = {'t': 10, 'u': -5}\ng(*tt, **dd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 + 2 + -4 + 10 + -5 = 4\n```\n:::\n:::\n\n\n## The prototype of all functions in `Python`\n\n::: {#6d2b8d2d .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:34.122929Z\",\"start_time\":\"2021-01-15T08:40:34.118269Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=271}\n``` {.python .cell-code}\ndef f(*args, **kwargs):\n    print('args=', args)\n    print('kwargs=', kwargs)\n\nf(1, 2, 'truc', lastname='gaiffas', firstname='stephane')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nargs= (1, 2, 'truc')\nkwargs= {'lastname': 'gaiffas', 'firstname': 'stephane'}\n```\n:::\n:::\n\n\n- Uses `*` for **argument unpacking** and `**` for **keyword argument unpacking**\n- The names `args` and `kwargs` are a convention, not mandatory \n- (but you are fired if you name these arguments otherwise)\n\n::: {#b259c047 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:34.735447Z\",\"start_time\":\"2021-01-15T08:40:34.728777Z\"}' slideshow='{\"slide_type\":\"fragment\"}' execution_count=272}\n``` {.python .cell-code}\n# How to get fired\ndef f(*aaa, **bbb):\n    print('args=', aaa)\n    print('kwargs=', bbb)\nf(1, 2, 'truc', lastname='gaiffas', firstname='stephane')    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nargs= (1, 2, 'truc')\nkwargs= {'lastname': 'gaiffas', 'firstname': 'stephane'}\n```\n:::\n:::\n\n\n**Remark**. A function is a regular an object... you can add attributes on it !\n\n::: {#43d1e650 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:34.887176Z\",\"start_time\":\"2021-01-15T08:40:34.884378Z\"}' execution_count=273}\n``` {.python .cell-code}\nf.truc = 4\n```\n:::\n\n\n::: {#6ccb71e7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:34.968083Z\",\"start_time\":\"2021-01-15T08:40:34.963229Z\"}' execution_count=274}\n``` {.python .cell-code}\nf(1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nargs= (1, 3)\nkwargs= {}\n```\n:::\n:::\n\n\n::: {#a18ecf75 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:35.082074Z\",\"start_time\":\"2021-01-15T08:40:35.076581Z\"}' execution_count=275}\n``` {.python .cell-code}\nf(3, -2, y='truc')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nargs= (3, -2)\nkwargs= {'y': 'truc'}\n```\n:::\n:::\n\n\n# Object-oriented programming (OOP)\n\nPython supports object-oriented programming (OOP). The goals of OOP are:\n\n- to organize the code, and\n- to re-use code in similar contexts.\n\nHere is a small example: we create a `Student` class, which is an object\ngathering several custom functions (called *methods*) and variables \n(called *attributes*).\n\n::: {#57ab0f81 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:35.228158Z\",\"start_time\":\"2021-01-15T08:40:35.221388Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=276}\n``` {.python .cell-code}\nclass Student(object):\n\n    def __init__(self, name, birthyear, major='computer science'):\n        self.name = name\n        self.birthyear = birthyear\n        self.major = major\n\n    def __repr__(self):\n        return \"Student(name='{name}', birthyear={birthyear}, major='{major}')\"\\\n                .format(name=self.name, birthyear=self.birthyear, major=self.major)\n\nanna = Student('anna', 1987)\nanna\n```\n\n::: {.cell-output .cell-output-display execution_count=274}\n```\nStudent(name='anna', birthyear=1987, major='computer science')\n```\n:::\n:::\n\n\nThe `__repr__` is what we call a 'magic method' in Python, that allows \nto display an object as a string easily. There is a very large number of such magic methods.\nThere are used to implement **interfaces**\n\n## Exercise \n\nAdd a `age` method to the Student class that computes the age of the student. \n- You  can (and should) use the `datetime` module. \n- Since we only know about the birth year, let's assume that the day of the birth is January, 1st.\n\n::: {.content-visible when-profile='solution'} \n\n### Correction\n\n::: {#dc690d4f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:38.739250Z\",\"start_time\":\"2021-01-15T08:40:38.731816Z\"}' execution_count=277}\n``` {.python .cell-code}\nfrom datetime import datetime\n\nclass Student(object):\n\n    def __init__(self, name, birthyear, major='computer science'):\n        self.name = name\n        self.birthyear = birthyear\n        self.major = major\n\n    def __repr__(self):\n        return \"Student(name='{name}', birthyear={birthyear}, major='{major}')\"\\\n                .format(name=self.name, birthyear=self.birthyear, major=self.major)\n\n    def age(self):\n        return datetime.now().year - self.birthyear\n        \nanna = Student('anna', 1987)\nanna.age()\n```\n\n::: {.cell-output .cell-output-display execution_count=275}\n```\n38\n```\n:::\n:::\n\n\n:::\n\n\n## Properties\n\nWe can make methods look like attributes using **properties**, as shown below\n\n::: {#f94c95e4 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:41.454538Z\",\"start_time\":\"2021-01-15T08:40:41.447007Z\"}' execution_count=278}\n``` {.python .cell-code}\nclass Student(object):\n\n    def __init__(self, name, birthyear, major='computer science'):\n        self.name = name\n        self.birthyear = birthyear\n        self.major = major\n\n    def __repr__(self):\n        return \"Student(name='{name}', birthyear={birthyear}, major='{major}')\"\\\n                .format(name=self.name, birthyear=self.birthyear, major=self.major)\n\n    @property\n    def age(self):\n        return datetime.now().year - self.birthyear\n        \nanna = Student('anna', 1987)\nanna.age\n```\n\n::: {.cell-output .cell-output-display execution_count=276}\n```\n38\n```\n:::\n:::\n\n\n## Inheritance \n\nA `MasterStudent` is a `Student` with a new extra mandatory `internship` attribute\n\n::: {#b9bfd0d4 .cell execution_count=279}\n``` {.python .cell-code}\n\"%d\" % 2\n```\n\n::: {.cell-output .cell-output-display execution_count=277}\n```\n'2'\n```\n:::\n:::\n\n\n::: {#30d0af20 .cell execution_count=280}\n``` {.python .cell-code}\nx = 2\n\nf\"truc {x}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=278}\n```\n'truc 2'\n```\n:::\n:::\n\n\n::: {#00e4ce59 .cell execution_count=281}\n``` {.python .cell-code}\nclass MasterStudent(Student):\n    \n    def __init__(self, name, age, internship, major='computer science'):\n        # Student.__init__(self, name, age, major)\n        Student.__init__(self, name, age, major)\n        self.internship = internship\n\n    def __repr__(self):\n        return f\"MasterStudent(name='{self.name}', internship={self.internship}, birthyear={self.birthyear}, major={self.major})\"\n    \nMasterStudent('djalil', 22, 'pwc')\n```\n\n::: {.cell-output .cell-output-display execution_count=279}\n```\nMasterStudent(name='djalil', internship=pwc, birthyear=22, major=computer science)\n```\n:::\n:::\n\n\n::: {#e6761194 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:44.047633Z\",\"start_time\":\"2021-01-15T08:40:44.039779Z\"}' execution_count=282}\n``` {.python .cell-code}\nclass MasterStudent(Student):\n    \n    def __init__(self, name, age, internship, major='computer science'):\n        # Student.__init__(self, name, age, major)\n        Student.__init__(self, name, age, major)\n        self.internship = internship\n\n    def __repr__(self):\n        return \"MasterStudent(name='{name}', internship='{internship}'\" \\\n               \", birthyear={birthyear}, major='{major}')\"\\\n                .format(name=self.name, internship=self.internship,\n                        birthyear=self.birthyear, major=self.major)\n    \ndjalil = MasterStudent('djalil', 1996, 'pwc')\n```\n:::\n\n\n::: {#1edc5573 .cell execution_count=283}\n``` {.python .cell-code}\ndjalil.__dict__\n```\n\n::: {.cell-output .cell-output-display execution_count=281}\n```\n{'name': 'djalil',\n 'birthyear': 1996,\n 'major': 'computer science',\n 'internship': 'pwc'}\n```\n:::\n:::\n\n\n::: {#c7423463 .cell execution_count=284}\n``` {.python .cell-code}\ndjalil.birthyear\n```\n\n::: {.cell-output .cell-output-display execution_count=282}\n```\n1996\n```\n:::\n:::\n\n\n::: {#a544a4f1 .cell execution_count=285}\n``` {.python .cell-code}\ndjalil.__dict__[\"birthyear\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=283}\n```\n1996\n```\n:::\n:::\n\n\n## Monkey patching\n\n- Classes in `Python`  are `objects` and actually `dict`s under the hood...\n- Therefore classes are objects that can be changed on the fly\n\n::: {#986b7c6c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:44.745686Z\",\"start_time\":\"2021-01-15T08:40:44.739499Z\"}' execution_count=286}\n``` {.python .cell-code}\nclass Monkey(object):\n    \n    def __init__(self, name):\n        self.name = name\n\n    def describe(self):\n        print(\"Old monkey %s\" % self.name)\n\ndef patch(self):\n    print(\"New monkey %s\" % self.name)\n\nmonkey = Monkey(\"Baloo\")\nmonkey.describe()\n\nMonkey.describe = patch\nmonkey.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOld monkey Baloo\nNew monkey Baloo\n```\n:::\n:::\n\n\n::: {#a3432905 .cell execution_count=287}\n``` {.python .cell-code}\nmonkeys = [Monkey(\"Baloo\"), Monkey(\"Super singe\")]\n\n\nmonkey_name = monkey.name\n\nfor i in range(1000):    \n    monkey_name\n```\n:::\n\n\n## Data classes\n\nSince `Python 3.7` you can use a dataclass for this\n\nDoes a lot of work for you (produces the `__repr__` among many other things for you)\n\n::: {#671d0beb .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:46.810275Z\",\"start_time\":\"2021-01-15T08:40:46.796524Z\"}' execution_count=288}\n``` {.python .cell-code}\nfrom dataclasses import dataclass\nfrom datetime import datetime \n\n@dataclass\nclass Student(object):\n    name: str\n    birthyear: int\n    major: str = 'computer science'\n\n    @property\n    def age(self):\n        return datetime.now().year - self.birthyear\n        \nanna = Student(name=\"anna\", birthyear=1987)\nanna\n```\n\n::: {.cell-output .cell-output-display execution_count=286}\n```\nStudent(name='anna', birthyear=1987, major='computer science')\n```\n:::\n:::\n\n\n::: {#1ca2150f .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:47.251530Z\",\"start_time\":\"2021-01-15T08:40:47.246324Z\"}' execution_count=289}\n``` {.python .cell-code}\nprint(anna.age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n38\n```\n:::\n:::\n\n\n# Most common mistakes\n\n- Let us wrap this up with the most common mistakes with `Python`\n\nFirst, best way to learn and practice:\n\n- Start with the official tutorial https://docs.python.org/fr/3/tutorial/index.html\n\n- Look at https://python-3-for-scientists.readthedocs.io/en/latest/index.html\n\n- Continue with the documentation at https://docs.python.org/fr/3/index.html and work!\n\n## Using a mutable value as a default value\n\n::: {#51c0130c .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:51.446805Z\",\"start_time\":\"2021-01-15T08:40:51.441178Z\"}' execution_count=290}\n``` {.python .cell-code}\ndef foo(bar=[]):\n    bar.append('oops')\n    return bar\n\nprint(foo())\nprint(foo())\nprint(foo())\n\nprint('-' * 8)\nprint(foo(['Ah ah']))\nprint(foo([]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['oops']\n['oops', 'oops']\n['oops', 'oops', 'oops']\n--------\n['Ah ah', 'oops']\n['oops']\n```\n:::\n:::\n\n\n::: {#d7309873 .cell execution_count=291}\n``` {.python .cell-code}\nprint(foo.__defaults__)\nfoo()\nprint(foo.__defaults__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(['oops', 'oops', 'oops'],)\n(['oops', 'oops', 'oops', 'oops'],)\n```\n:::\n:::\n\n\n- The default value for a function argument is evaluated once, when the function is defined\n- `the` bar argument is initialized to its default (i.e., an empty list) only when foo() is first defined\n- successive calls to `foo()` (with no a `bar` argument specified) use the same list!\n\nOne should use instead\n\n::: {#b80a432b .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:52.916162Z\",\"start_time\":\"2021-01-15T08:40:52.908617Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=292}\n``` {.python .cell-code}\ndef foo(bar=None):\n    if bar is None:\n        bar = []\n    bar.append('oops')\n    return bar\n\nprint(foo())\nprint(foo())\nprint(foo())\nprint(foo(['OK']))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['oops']\n['oops']\n['oops']\n['OK', 'oops']\n```\n:::\n:::\n\n\n::: {#90c24f6b .cell execution_count=293}\n``` {.python .cell-code}\nprint(foo.__defaults__)\nfoo()\nprint(foo.__defaults__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(None,)\n(None,)\n```\n:::\n:::\n\n\nNo problem with immutable types\n\n::: {#e509efd2 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:53.337268Z\",\"start_time\":\"2021-01-15T08:40:53.330411Z\"}' execution_count=294}\n``` {.python .cell-code}\ndef foo(bar=()):\n    bar += ('oops',)\n    return bar\n\nprint(foo())\nprint(foo())\nprint(foo())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('oops',)\n('oops',)\n('oops',)\n```\n:::\n:::\n\n\n::: {#773e637b .cell execution_count=295}\n``` {.python .cell-code}\nprint(foo.__defaults__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n((),)\n```\n:::\n:::\n\n\n## Class attributes VS object attributes\n\n::: {#0378a7c9 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:53.948439Z\",\"start_time\":\"2021-01-15T08:40:53.942319Z\"}' execution_count=296}\n``` {.python .cell-code}\nclass A(object):\n    x = 1\n\n    def __init__(self):\n        self.y = 2\n\nclass B(A):\n    def __init__(self):\n        super().__init__()\n\nclass C(A):\n    def __init__(self):\n        super().__init__()\n\na, b, c = A(), B(), C()\n```\n:::\n\n\n::: {#dfaa8bde .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:54.135498Z\",\"start_time\":\"2021-01-15T08:40:54.131029Z\"}' execution_count=297}\n``` {.python .cell-code}\nprint(a.x, b.x, c.x)\nprint(a.y, b.y, c.y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 1 1\n2 2 2\n```\n:::\n:::\n\n\n::: {#a364d951 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:54.858324Z\",\"start_time\":\"2021-01-15T08:40:54.853424Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=298}\n``` {.python .cell-code}\na.y = 3\nprint(a.y, b.y, c.y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3 2 2\n```\n:::\n:::\n\n\n::: {#a4e7e3d0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:55.058452Z\",\"start_time\":\"2021-01-15T08:40:55.050679Z\"}' execution_count=299}\n``` {.python .cell-code}\na.x = 3  # Adds a new attribute named x in object a\nprint(a.x, b.x, c.x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3 1 1\n```\n:::\n:::\n\n\n::: {#58e91ad2 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:55.812247Z\",\"start_time\":\"2021-01-15T08:40:55.805966Z\"}' execution_count=300}\n``` {.python .cell-code}\nA.x = 4 # Changes the class attribute x of class A\nprint(a.x, b.x, c.x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3 4 4\n```\n:::\n:::\n\n\n- Attribute `x` is not an **attribute** of `b` nor `c`\n- It is also not a **class attribute** of classes `B` and `C`\n- So, it is is looked up in the base class `A`, which contains a **class attribute** `x`\n\nClasses and objects contain a hidden `dict` to store their attributes, and are accessed following a method resolution order (MRO)\n\n::: {#5ce03f77 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:56.589556Z\",\"start_time\":\"2021-01-15T08:40:56.583455Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=301}\n``` {.python .cell-code}\na.__dict__, b.__dict__, c.__dict__\n```\n\n::: {.cell-output .cell-output-display execution_count=299}\n```\n({'y': 3, 'x': 3}, {'y': 2}, {'y': 2})\n```\n:::\n:::\n\n\n::: {#f86d4eac .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:57.372472Z\",\"start_time\":\"2021-01-15T08:40:57.365176Z\"}' execution_count=302}\n``` {.python .cell-code}\nA.__dict__, B.__dict__, C.__dict__\n```\n\n::: {.cell-output .cell-output-display execution_count=300}\n```\n(mappingproxy({'__module__': '__main__',\n               'x': 4,\n               '__init__': <function __main__.A.__init__(self)>,\n               '__dict__': <attribute '__dict__' of 'A' objects>,\n               '__weakref__': <attribute '__weakref__' of 'A' objects>,\n               '__doc__': None}),\n mappingproxy({'__module__': '__main__',\n               '__init__': <function __main__.B.__init__(self)>,\n               '__doc__': None}),\n mappingproxy({'__module__': '__main__',\n               '__init__': <function __main__.C.__init__(self)>,\n               '__doc__': None}))\n```\n:::\n:::\n\n\nThis can lead to **nasty** errors when using class attributes: learn more about this\n\n## Python scope rules\n\n::: {#ef572701 .cell execution_count=303}\n``` {.python .cell-code}\ntry:\n    ints += [4]\nexcept NameError:\n    print(\"NameError: name 'ints' is not defined\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNameError: name 'ints' is not defined\n```\n:::\n:::\n\n\n::: {#a8480841 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:58.254394Z\",\"start_time\":\"2021-01-15T08:40:58.250379Z\"}' execution_count=304}\n``` {.python .cell-code}\nints = [1]\n\ndef foo1():\n    ints.append(2)\n    return ints\n\ndef foo2():\n    ints += [2]\n    return ints\n```\n:::\n\n\n::: {#26efd5fc .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:58.471436Z\",\"start_time\":\"2021-01-15T08:40:58.464761Z\"}' execution_count=305}\n``` {.python .cell-code}\nfoo1()\n```\n\n::: {.cell-output .cell-output-display execution_count=303}\n```\n[1, 2]\n```\n:::\n:::\n\n\n::: {#5e0172b0 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:40:58.668154Z\",\"start_time\":\"2021-01-15T08:40:58.647332Z\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=306}\n``` {.python .cell-code}\ntry:    \n    foo2()\nexcept UnboundLocalError as inst:\n    print(inst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncannot access local variable 'ints' where it is not associated with a value\n```\n:::\n:::\n\n\n### What the hell ?\n\n- An assignment to a variable in a scope assumes that the variable is local to that scope \n- and shadows any similarly named variable in any outer scope\n\n```{.python}\nints += [2]\n```\nmeans\n```{.python}\nints = ints + [2]\n```\n\nwhich is an *assigment*: `ints` must be defined in the local scope, but it is not, while\n```{.python}\nints.append(2)\n```\n\nis not an *assignemnt*\n\n## Modify a `list` while iterating over it\n\n::: {#656b50b7 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:05.902243Z\",\"start_time\":\"2021-01-15T08:41:05.890704Z\"}' execution_count=307}\n``` {.python .cell-code}\nodd = lambda x: bool(x % 2)\nnumbers = list(range(10))\n\ntry:\n  for i in range(len(numbers)):\n      if odd(numbers[i]):\n          del numbers[i]\nexcept IndexError as inst:\n    print(inst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlist index out of range\n```\n:::\n:::\n\n\nTypically an example where one should use a list comprehension\n\n::: {#4b02aced .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:16.008696Z\",\"start_time\":\"2021-01-15T08:41:16.002196Z\"}' execution_count=308}\n``` {.python .cell-code}\n[number for number in numbers if not odd(number)]\n```\n\n::: {.cell-output .cell-output-display execution_count=306}\n```\n[0, 2, 4, 6, 8]\n```\n:::\n:::\n\n\n## No docstrings\n\nAccept to spend time to write clean docstrings (look at `numpydoc` style)\n\n::: {#3756a585 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:17.239948Z\",\"start_time\":\"2021-01-15T08:41:17.236031Z\"}' execution_count=309}\n``` {.python .cell-code}\ndef create_student(name, age, address, major='computer science'):\n    \"\"\"Add a student in the database\n    \n    Parameters\n    ----------\n    name: `str`\n        Name of the student\n    \n    age: `int`\n        Age of the student\n    \n    address: `str`\n        Address of the student\n    \n    major: `str`, default='computer science'\n        The major chosen by the student\n    \n    Returns\n    -------\n    output: `Student`\n        A fresh student\n    \"\"\"\n    pass\n```\n:::\n\n\n::: {#a12a8d4d .cell execution_count=310}\n``` {.python .cell-code}\ncreate_student('Duduche', 28, 'Chalons')\n```\n:::\n\n\n## Not using available methods and/or the simplest solution\n\n::: {#d69a98e6 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:19.794009Z\",\"start_time\":\"2021-01-15T08:41:19.785191Z\"}' execution_count=311}\n``` {.python .cell-code}\ndd = {'stephane': 1234, 'gael': 4567, 'gontran': 891011}\n\n# Bad\nfor key in dd.keys():\n    print(key, dd[key])\n\nprint('-' * 8)\n\n# Good\nfor key, value in dd.items():\n    print(key, value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstephane 1234\ngael 4567\ngontran 891011\n--------\nstephane 1234\ngael 4567\ngontran 891011\n```\n:::\n:::\n\n\n::: {#a4e54bef .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:20.116770Z\",\"start_time\":\"2021-01-15T08:41:20.104428Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=312}\n``` {.python .cell-code}\ncolors = ['black', 'yellow', 'brown', 'red', 'pink']\n\n# Bad\nfor i in range(len(colors)):\n    print(i, colors[i])\n\nprint('-' * 8)\n\n# Good\nfor i, color in enumerate(colors):\n    print(i, color)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 black\n1 yellow\n2 brown\n3 red\n4 pink\n--------\n0 black\n1 yellow\n2 brown\n3 red\n4 pink\n```\n:::\n:::\n\n\n## Not using the standard library \n\nWhile it's **always** better than a hand-made solution\n\n::: {#11bf3871 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:21.109134Z\",\"start_time\":\"2021-01-15T08:41:21.101392Z\"}' execution_count=313}\n``` {.python .cell-code}\nlist1 = [1, 2]\nlist2 = [3, 4]\nlist3 = [5, 6, 7]\n\nfor a in list1:\n    for b in list2:\n        for c in list3:\n            print(a, b, c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 3 5\n1 3 6\n1 3 7\n1 4 5\n1 4 6\n1 4 7\n2 3 5\n2 3 6\n2 3 7\n2 4 5\n2 4 6\n2 4 7\n```\n:::\n:::\n\n\n::: {#292a4e60 .cell ExecuteTime='{\"end_time\":\"2021-01-15T08:41:22.827474Z\",\"start_time\":\"2021-01-15T08:41:22.819519Z\"}' slideshow='{\"slide_type\":\"subslide\"}' execution_count=314}\n``` {.python .cell-code}\nfrom itertools import product\n\nfor a, b, c in product(list1, list2, list3):\n    print(a, b, c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 3 5\n1 3 6\n1 3 7\n1 4 5\n1 4 6\n1 4 7\n2 3 5\n2 3 6\n2 3 7\n2 4 5\n2 4 6\n2 4 7\n```\n:::\n:::\n\n\n# That's it for now !\n\n",
    "supporting": [
      "notebook01_python_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}