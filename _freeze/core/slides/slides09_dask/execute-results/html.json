{
  "hash": "d833d94704fa8baa6cbc98dddb0caad2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Dask\"\nengine: jupyter\ndate: \"2025-01-17\"\n\nexecute: \n  eval: true\n  echo: true\n---\n\n\n# Dask:  Big picture  {background-color=\"#1c191c\"}\n\n## Bird-eye Big Picture\n\n![Dask in picture](/images/dask_nutshell.png)\n\n\n## {{< fa map >}}  {.scrollable}\n\n-   Overview - dask's place in the universe.\n\n-   `Delayed` - the single-function way to parallelize general python code.\n\n-   `Dataframe` - parallelized operations on many `pandas` `dataframes` spread across your cluster\n\n\n## Flavours of (big) data\n\n| Type        |     Typical size      | Features                                     |   Tool |\n|:--------------|:-----------------------:|:-----------------|--------------:|\n| Small data  |     Few GigaBytes     | Fits in RAM                                  | Pandas |\n| Medium data | Less than 2 Terabytes | Does not fit in RAM, fits on hard drive |   Dask |\n| Large data  |       Petabytes       | Does not fit on hard drive                  |  Spark |\n\n---\n\n![](/images/dask_horizontal.svg)\n\n\nDask provides multi-core and distributed parallel execution on larger-than-memory datasets\n\n. . .\n\nDask provides high-level `Array`, `Bag`, and `DataFrame` *collections* that mimic `NumPy`, `lists`, and `Pandas` but can operate in parallel on datasets that do not fit into memory\n\n. . . \n\nDask provides dynamic *task schedulers* that execute *task graphs* in parallel.\n\nThese schedulers/execution engines power the high-level collections but can also power custom, user-defined workloads\n\nThese schedulers are low-latency and work hard to run computations in a small memory footprint\n\n\n## Sources \n\n[Dask Tutorial](https://tutorial.dask.org \"Dask Tutorial\")\n\n\n[Dask FAQ](https://docs.dask.org/en/latest/faq.html)\n\n. . .\n\n\n## Trends\n\n![Dask adoption metrics](/images/dask_adoption.png)\n\n\n\n# Delayed  {background-color=\"#1c191c\"}\n\n## Delayed  (in a nutshell)\n\n> The single-function way to parallelize general python code\n\n## Imports\n\n::: {#44c5c17a .cell execution_count=1}\n``` {.python .cell-code}\nimport dask\n\ndask.config.set(scheduler='threads')\ndask.config.set({'dataframe.query-planning': True})\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n<dask.config.set at 0x7756d013e900>\n```\n:::\n:::\n\n\n::: {#05fc339f .cell execution_count=2}\n``` {.python .cell-code}\nimport dask.dataframe as dd\nimport dask.bag as db\n```\n:::\n\n\n::: {#88507bea .cell execution_count=3}\n``` {.python .cell-code}\nfrom dask import delayed\nimport dask.threaded\n\nfrom dask.distributed import Client\nfrom dask.diagnostics import ProgressBar\nfrom dask.diagnostics import Profiler, ResourceProfiler, CacheProfiler\n```\n:::\n\n\n## `LocalCluster`\n\nDask can set itself up easily in your Python session if you create a `LocalCluster` object, which sets everything up for you.\n\n::: {#e3ebc8be .cell execution_count=4}\n``` {.python .cell-code}\n# from dask.distributed import LocalCluster\n\n# cluster = LocalCluster()\n# client = cluster.get_client()\n```\n:::\n\n\n## Normal Dask work ...\n\nAlternatively, you can skip this part, and Dask will operate within a thread pool contained entirely with your local process.\n\n## Delaying Pyhton tasks\n\n------------------------------------------------------------------------\n\n------------------------------------------------------------------------\n\n## A job (I)\n\n::: {#eef28377 .cell execution_count=5}\n``` {.python .cell-code}\ndef inc(x):\n  return x + 1\n\ndef double(x):\n  return x * 2\n\ndef add(x, y):\n  return x + y\n```\n:::\n\n\n## A job (II): piecing elements together\n\n::: {#7bc6a2a8 .cell execution_count=6}\n``` {.python .cell-code}\ndata = [1, 2, 3, 4, 5]\n\noutput = []\n\nfor x in data:\n  a = inc(x)    # <1>\n  b = double(x) # <2>\n  c = add(a, b) # <3>\n  output.append(c)\n  \ntotal = sum(output)\n  \ntotal \n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n50\n```\n:::\n:::\n\n\n1. Increment `x`\n2. Multiply `x` by 2\n3. `c == (x+1) + 2*x == 3*x+1`\n\n## Delaying existing functions\n\n::: {#a0a5c039 .cell execution_count=7}\n``` {.python .cell-code}\noutput = []\n\nfor x in data:\n  a = dask.delayed(inc)(x)    # <1>\n  b = dask.delayed(double)(x) \n  c = dask.delayed(add)(a, b) \n  output.append(c)\n  \ntotal = dask.delayed(sum)(output) # <2>\n  \ntotal\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nDelayed('sum-b042864a-ca75-4d5d-9921-92cf16c401d2')\n```\n:::\n:::\n\n\n1. Decorating `inc` using `dask.delayed()` \n2. Decorating `sum()`\n\n::: {#2faecb39 .cell execution_count=8}\n``` {.python .cell-code}\ntotal.compute() # <1>\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n50\n```\n:::\n:::\n\n\n1. Collecting the results\n\n## Another way of using decorators  {.smaller}\n\n::: {#b3aa9c4f .cell execution_count=9}\n``` {.python .cell-code}\n@dask.delayed   # <1> \ndef inc(x):\n  return x + 1\n\n@dask.delayed\ndef double(x):\n  return x * 2\n\n@dask.delayed\ndef add(x, y):\n  return x + y\n\ndata = [1, 2, 3, 4, 5]\n\noutput = []   # <2> \nfor x in data:\n  a = inc(x)\n  b = double(x)\n  c = add(a, b)\n  output.append(c)\n  \ntotal = dask.delayed(sum)(output)\ntotal\ntotal.compute() # <3> \n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n50\n```\n:::\n:::\n\n\n1. Decorating the definition\n2. Reusing the Python code\n3. Collecting results \n\n## Visualizing the task graph\n\n::: {#d5c9a12f .cell output-location='column-fragment' execution_count=10}\n``` {.python .cell-code}\ntotal.visualize()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](slides09_dask_files/figure-revealjs/cell-11-output-1.png){}\n:::\n:::\n\n\n# Tweaking the task graph  {background-color=\"#1c191c\"}\n\n## Another job  {.smaller}\n\n::: {#c9162c04 .cell execution_count=11}\n``` {.python .cell-code}\nDATA = []\n\n@dask.delayed\ndef inc(x):\n  return x + 1\n\n@dask.delayed\ndef add_data(x):\n  DATA.append(x)\n\n@dask.delayed\ndef sum_data(x):\n  return sum(DATA) + x\n\na = inc(1)\nb = add_data(a)\nc = inc(3)\nd = add_data(c)\ne = inc(5)\nf = sum_data(e)\nf.compute()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n6\n```\n:::\n:::\n\n\n## A flawed task graph\n\n::: {#355c5fa3 .cell output-location='column-fragment' execution_count=12}\n``` {.python .cell-code}\nf.visualize()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](slides09_dask_files/figure-revealjs/cell-13-output-1.png){}\n:::\n:::\n\n\n## Fixing  \n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {#0cbcd034 .cell execution_count=13}\n``` {.python .cell-code}\nfrom dask.graph_manipulation import bind\n\ng = bind(sum_data, [b, d])(e)\n\ng.compute()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n12\n```\n:::\n:::\n\n\n::: smaller\n\nThe result of the evaluation of `sum_data()` depends not only on its argument, hence on the `Delayed` `e`,  but also on the side effects of `add_data()`, that is on the `Delayed` `b` and `d`\n\nNote that not only the DAG was wrong but the result obtained above was not the intended result.\n\n:::\n\n:::\n\n::: {.column width=\"60%\"}\n::: smaller\n\n::: {#3c8bc1da .cell execution_count=14}\n``` {.python .cell-code}\ng.visualize()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](slides09_dask_files/figure-revealjs/cell-15-output-1.png){}\n:::\n:::\n\n\n:::\n:::\n\n:::\n\n##\n\n\n> By default, Dask `Delayed` uses the *threaded* scheduler in order to avoid data transfer costs\n\n> Consider using *multi-processing* scheduler or *dask.distributed* scheduler on a local machine or on a cluster if your code does not release the `GIL` well (computations that are dominated by pure Python code, or computations wrapping external code and holding onto it).\n\n\n\n\n\n# High level collections  {background-color=\"#1c191c\"}\n\n\n## Importing the usual suspects\n\n::: {#cef50f6d .cell execution_count=15}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd  # <1>\n\nimport dask.dataframe as dd  # <2>\nimport dask.array as da\nimport dask.bag as db\n```\n:::\n\n\n1. Standard dataframes in Python\n2. Parallelized and distributed dataframes in Python\n\n\n## Bird-eye view\n\n\n# Dataframes   {background-color=\"#1c191c\"}\n\n\n##\n\n> Dask Dataframes parallelize the popular [`pandas`]() library, providing:\n\n> - Larger-than-memory execution for single machines, allowing you to process data that is larger than your available RAM\n\n> - Parallel execution for faster processing\n\n> - Distributed computation for terabyte-sized datasets\n\n. . .\n\n> Dask Dataframes are similar  to [Apache Spark](), but use the familiar `pandas` API and memory model \n\n> One Dask dataframe is simply a coordinated collection of pandas dataframes on different computers\n\n\n##\n\n> Dask DataFrame helps you process large tabular data by parallelizing Pandas, either on your laptop for larger-than-memory computing, or on a distributed cluster of computers.\n\n![Column of four squares collectively labeled as a Dask DataFrame with a single constituent square labeled as a pandas DataFrame](/images/dask-dataframe.svg)\n\n> Just `pandas`: Dask DataFrames are a collection of many `pandas` DataFrames.\n\n> The API is the same^[The Dask Dataframe API is a subset of the Pandas API]. The execution is the same {{< fa champagne-glasses >}}\n\n> Large scale: Works on 100 GiB on a laptop, or 100 TiB on a cluster.\n\n> Easy to use: Pure Python, easy to set up and debug.\n\n> Dask DataFrames coordinate many pandas DataFrames/Series arranged along the index. A Dask DataFrame is partitioned row-wise, grouping rows by index value for efficiency. These pandas objects may live on disk or on other machines.\n\n\n## Creating a dask dataframe\n\n::: {#3290e0df .cell output-location='column-fragment' execution_count=16}\n``` {.python .cell-code}\nindex = pd.date_range(\"2021-09-01\", \n                      periods=2400, \n                      freq=\"1H\")\n\ndf = pd.DataFrame({\n  \"a\": np.arange(2400), \n  \"b\": list(\"abcaddbe\" * 300)}, \n  index=index)\n  \nddf = dd.from_pandas(df, npartitions=20) # <1>\n\nddf.head()                               # <2>\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2021-09-01 00:00:00</th>\n      <td>0</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>2021-09-01 01:00:00</th>\n      <td>1</td>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>2021-09-01 02:00:00</th>\n      <td>2</td>\n      <td>c</td>\n    </tr>\n    <tr>\n      <th>2021-09-01 03:00:00</th>\n      <td>3</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>2021-09-01 04:00:00</th>\n      <td>4</td>\n      <td>d</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n1.  In Dask, proper partitioning is a key performance issue\n2.  The dataframe API is (almost) the same as in Pandas!\n\n::: {.aside}\n\n> pandas programmers just need to learn the key differences when working with\ndistributed computing systems to make the Dask transition easily.\n\n:::\n\n## Inside the dataframe\n\n::: columns\n\n::: {.column width=\"50%\"}\n\n::: smaller\n\n### A sketch of the interplay between index and partitioning\n\n::: {#b67984a9 .cell output-location='column-fragment' execution_count=17}\n``` {.python .cell-code}\nddf.divisions\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n(Timestamp('2021-09-01 00:00:00'),\n Timestamp('2021-09-06 00:00:00'),\n Timestamp('2021-09-11 00:00:00'),\n Timestamp('2021-09-16 00:00:00'),\n Timestamp('2021-09-21 00:00:00'),\n Timestamp('2021-09-26 00:00:00'),\n Timestamp('2021-10-01 00:00:00'),\n Timestamp('2021-10-06 00:00:00'),\n Timestamp('2021-10-11 00:00:00'),\n Timestamp('2021-10-16 00:00:00'),\n Timestamp('2021-10-21 00:00:00'),\n Timestamp('2021-10-26 00:00:00'),\n Timestamp('2021-10-31 00:00:00'),\n Timestamp('2021-11-05 00:00:00'),\n Timestamp('2021-11-10 00:00:00'),\n Timestamp('2021-11-15 00:00:00'),\n Timestamp('2021-11-20 00:00:00'),\n Timestamp('2021-11-25 00:00:00'),\n Timestamp('2021-11-30 00:00:00'),\n Timestamp('2021-12-05 00:00:00'),\n Timestamp('2021-12-09 23:00:00'))\n```\n:::\n:::\n\n\n### A dataframe has a task graph\n\n::: {#ac63a946 .cell execution_count=18}\n``` {.python .cell-code}\nddf.visualize()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n![](slides09_dask_files/figure-revealjs/cell-19-output-1.svg){}\n:::\n:::\n\n\nTODO \n\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: smaller\n\n\n### What's in a partition?\n\n::: {#a9ed6e48 .cell execution_count=19}\n``` {.python .cell-code}\nddf.partitions[1] # <1>\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div><strong>Dask DataFrame Structure:</strong></div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n    </tr>\n    <tr>\n      <th>npartitions=1</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2021-09-06</th>\n      <td>int64</td>\n      <td>string</td>\n    </tr>\n    <tr>\n      <th>2021-09-11</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n  </tbody>\n</table>\n<div>Dask Name: partitions, 2 expressions</div>\n```\n:::\n:::\n\n\n1.  This is the second class of the partition\n\n### Slicing\n\n::: {#e129d7ae .cell execution_count=20}\n``` {.python .cell-code}\nddf[\"2021-10-01\":\"2021-10-09 5:00\"] # <1>\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div><strong>Dask DataFrame Structure:</strong></div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a</th>\n      <th>b</th>\n    </tr>\n    <tr>\n      <th>npartitions=2</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2021-10-01 00:00:00.000000000</th>\n      <td>int64</td>\n      <td>string</td>\n    </tr>\n    <tr>\n      <th>2021-10-06 00:00:00.000000000</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2021-10-09 05:00:59.999999999</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n  </tbody>\n</table>\n<div>Dask Name: loc, 2 expressions</div>\n```\n:::\n:::\n\n\n1.  Like slicing NumPy arrays or pandas DataFrame.\n\n:::\n:::\n\n\n:::\n\n\n##  Dask dataframes (cont'd)\n\n> Dask DataFrames coordinate many Pandas DataFrames/Series arranged along an index. \n\n> We define a Dask DataFrame object with the following components:\n\n> - A Dask graph with a special set of keys designating partitions, such as ('x', 0), ('x', 1), ...\n\n> - A name to identify which keys in the Dask graph refer to this DataFrame, such as 'x'\n\n> - An empty Pandas object containing appropriate *metadata* (e.g. column names, dtypes, etc.)\n\n> - A sequence of partition boundaries along the index called *divisions*\n\n\n\n\n## Methods\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {#164d2334 .cell execution_count=21}\n``` {.python .cell-code}\n( \n  ddf.a\n    .mean()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n<dask_expr.expr.Scalar: expr=df['a'].mean(), dtype=float64>\n```\n:::\n:::\n\n\n::: {#dab3aada .cell execution_count=22}\n``` {.python .cell-code}\n( \n  ddf.a\n    .mean()\n    .compute()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nnp.float64(1199.5)\n```\n:::\n:::\n\n\n::: {#031b4d6e .cell execution_count=23}\n``` {.python .cell-code}\n(\n  ddf\n    .b\n    .unique()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nDask Series Structure:\nnpartitions=20\n    string\n       ...\n     ...  \n       ...\n       ...\nDask Name: unique, 3 expressions\nExpr=Unique(frame=df['b'])\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n::: smaller\n\n\n:::\n:::\n\n:::\n\n\n## Reading and writing from `parquet`\n\n```{.python}\nfname = 'fhvhv_tripdata_2022-11.parquet'\ndpath = '../../../../Downloads/'\n\nglobpath = 'fhvhv_tripdata_20*-*.parquet'\n\n!ls -l ../../../../Downloads/fhvhv_tripdata_20*-*.parquet\n```\n\n::: {#a06f8496 .cell execution_count=24}\n``` {.python .cell-code}\nimport os\n\nos.path.expanduser('~' + '/Documents')\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n'/home/boucheron/Documents'\n```\n:::\n:::\n\n\n```{.python}\n%%time \n\ndata = dd.read_parquet(\n  os.path.join(dpath, globpath),\n  categories= ['PULocationID',\n               'DOLocationID'], \n  engine='auto'\n)\n```\n\n\n```{.python}\ntype(data)\n```\n\n\n\n```{.python}\n#| eval: false\ndf = data.to_dask_dataframe()\n```\n\n::: {#f8e4627e .cell execution_count=25}\n``` {.python .cell-code}\ndf.info()\ndf._meta.dtypes\n\ndf.npartitions\n```\n:::\n\n\n::: {#59b85f64 .cell execution_count=26}\n``` {.python .cell-code}\ndf.head()\n```\n:::\n\n\n::: {#e0a27b22 .cell execution_count=27}\n``` {.python .cell-code}\ntype(df)\n```\n:::\n\n\n::: {#cf3fa469 .cell execution_count=28}\n``` {.python .cell-code}\ndf._meta.dtypes\n```\n:::\n\n\n::: {#18cfedb0 .cell execution_count=29}\n``` {.python .cell-code}\ndf._meta_nonempty\n```\n:::\n\n\n::: {#b3115973 .cell execution_count=30}\n``` {.python .cell-code}\ndf.info()\n```\n:::\n\n\n::: {#5138f0e6 .cell execution_count=31}\n``` {.python .cell-code}\ndf.divisions\n```\n:::\n\n\n::: {#4146d6ef .cell execution_count=32}\n``` {.python .cell-code}\ndf.describe(include=\"all\")\n```\n:::\n\n\n## Partitioning and saving to parquet\n\n::: {#422cb7c2 .cell execution_count=33}\n``` {.python .cell-code}\nimport pyarrow as pa\n\nschm = pa.Schema.from_pandas(df._meta)\n\nschm\n```\n:::\n\n\n::: {#d47435d6 .cell execution_count=34}\n``` {.python .cell-code}\ndf.PULocationID.unique().compute()\n```\n:::\n\n\n::: {#e7a279f0 .cell execution_count=35}\n``` {.python .cell-code}\ndf.to_parquet( \n  'fhvhv_tripdata_2022-11',\n  partition_on= ['PULocationID'],\n  engine='pyarrow', \n  schema = schm\n  )\n```\n:::\n\n\n::: {#bdd83b5e .cell execution_count=36}\n``` {.python .cell-code}\ndf.info(memory_usage=True)\n```\n:::\n\n\n# Schedulers   {background-color=\"#1c191c\"}\n\n## \n\n> After you have generated a task graph, it is the scheduler's job to execute it (see Scheduling).\n\n> By default, for the majority of Dask APIs, when you call `compute()` on a Dask object, Dask uses the *thread pool* on your computer (a.k.a threaded scheduler) to run computations in parallel. This is true for `Dask Array`, `Dask DataFrame`, and `Dask Delayed`. The exception being `Dask Bag` which uses the multiprocessing scheduler by default.\n\n> If you want more control, use the `distributed scheduler` instead. Despite having \"distributed\" in it's name, the distributed scheduler works well on both single and multiple machines. Think of it as the \"advanced scheduler\".\n\n\n\n# Performance  {background-color=\"#1c191c\"}\n\n##\n\n> Dask schedulers come with diagnostics to help you understand the performance characteristics of your computations\n\n> By using these diagnostics and with some thought, we can often identify the slow parts of troublesome computations\n\n> The single-machine and distributed schedulers come with different diagnostic tools\n\n> These tools are deeply integrated into each scheduler, so a tool designed for one will not transfer over to the other\n\n## Dask query optimization\n\n[Demo](https://www.youtube.com/watch?v=HTKzEDa2GA8)\n\n\n\n## Visualize task graphs\n\n\n## Single threaded scheduler and a normal Python profiler\n\n\n## Diagnostics for the single-machine scheduler\n\n\n## Diagnostics for the distributed scheduler and dashboard\n\n\n# Scale up/Scale out  {background-color=\"#1c191c\"}\n\n# References   {background-color=\"#1c191c\"}\n\n## {{< fa globe >}} Reference\n\n*  [Docs](https://dask.org/)\n*  [Examples](https://examples.dask.org/)\n*  [Code](https://github.com/dask/dask/)\n*  [Blog](https://blog.dask.org/)\n*  [Tutorial](https://tutorial.dask.org)\n\n##  {{< fa life-ring >}} Ask for help\n\n*   [`dask`](http://stackoverflow.com/questions/tagged/dask) tag on Stack Overflow, for usage questions\n*   [github issues](https://github.com/dask/dask/issues/new) for bug reports and feature requests\n*   [gitter chat](https://gitter.im/dask/dask) for general, non-bug, discussion\n\n##  {{< fa book >}} Books \n\n+ [Scaling Python with Dask](https://www.oreilly.com/library/view/scaling-python-with/9781098119867/)\n+ [Data Science with Python and Dask](https://www.oreilly.com/library/view/data-science-with/9781617295607/)\n+ [Dask Definitive Guide (to appear 2025)]\n\n## Blogs \n\n- [](https://vex.io)\n- []()\n\n\n## Loading a Parquet file \n\n::: {#043e9bcd .cell execution_count=37}\n``` {.python .cell-code}\ndpath = '/home/boucheron/Dropbox/MMD-2021/DATA/ny_corpus_prq/'\n\nglobpath = '*/*.parquet'\n\ndata = dd.read_parquet(\n  os.path.join(dpath, globpath),\n  engine='auto'\n)\n```\n:::\n\n\n::: {#dbcbaccb .cell output-location='column' execution_count=38}\n``` {.python .cell-code}\ndata.info\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n<bound method DataFrame.info of Dask DataFrame Structure:\n                 title   topic    text             date\nnpartitions=77                                         \n                string  string  string  category[known]\n                   ...     ...     ...              ...\n...                ...     ...     ...              ...\n                   ...     ...     ...              ...\n                   ...     ...     ...              ...\nDask Name: read_parquet, 1 expression\nExpr=ReadParquetFSSpec(92994fd)>\n```\n:::\n:::\n\n\n##\n\n::: {#b2a54763 .cell execution_count=39}\n``` {.python .cell-code}\n( \n  data\n    .groupby(\"topic\")\n    .count()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div><strong>Dask DataFrame Structure:</strong></div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>text</th>\n      <th>date</th>\n    </tr>\n    <tr>\n      <th>npartitions=1</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th></th>\n      <td>int64</td>\n      <td>int64</td>\n      <td>int64</td>\n    </tr>\n    <tr>\n      <th></th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n  </tbody>\n</table>\n<div>Dask Name: count, 2 expressions</div>\n```\n:::\n:::\n\n\n## \n\n::: {#82f2fa4b .cell execution_count=40}\n``` {.python .cell-code}\nddf = dd.read_parquet(\n    \"s3://dask-data/nyc-taxi/nyc-2015.parquet/part.*.parquet\",\n    columns=[\n      \"passenger_count\", \n      \"tip_amount\"],\n    storage_options={\"anon\": True},\n)\n```\n:::\n\n\n::: {#a21dae93 .cell execution_count=41}\n``` {.python .cell-code}\nresult = (\n  ddf\n    .groupby(\"passenger_count\")\n    .tip_amount\n    .mean()\n#    .compute()\n)\n\nresult\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nDask Series Structure:\nnpartitions=1\n    float64\n        ...\nDask Name: getitem, 4 expressions\nExpr=((ReadParquetFSSpec(117185e)[['passenger_count', 'tip_amount']]).mean(observed=False, chunk_kwargs={'numeric_only': False}, aggregate_kwargs={'numeric_only': False}, _slice='tip_amount'))['tip_amount']\n```\n:::\n:::\n\n\n::: {#733a4697 .cell execution_count=42}\n``` {.python .cell-code}\nimport dask.dataframe as dd\nfrom dask.distributed import Client\n```\n:::\n\n\n::: {#04ad8386 .cell execution_count=43}\n``` {.python .cell-code}\nclient = Client()\nclient\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n    <div style=\"width: 24px; height: 24px; background-color: #e1e1e1; border: 3px solid #9D9D9D; border-radius: 5px; position: absolute;\"> </div>\n    <div style=\"margin-left: 48px;\">\n        <h3 style=\"margin-bottom: 0px;\">Client</h3>\n        <p style=\"color: #9D9D9D; margin-bottom: 0px;\">Client-23ac4916-e27e-11ef-a64c-300505fc3398</p>\n        <table style=\"width: 100%; text-align: left;\">\n\n        <tr>\n        \n            <td style=\"text-align: left;\"><strong>Connection method:</strong> Cluster object</td>\n            <td style=\"text-align: left;\"><strong>Cluster type:</strong> distributed.LocalCluster</td>\n        \n        </tr>\n\n        \n            <tr>\n                <td style=\"text-align: left;\">\n                    <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:8787/status\" target=\"_blank\">http://127.0.0.1:8787/status</a>\n                </td>\n                <td style=\"text-align: left;\"></td>\n            </tr>\n        \n\n        </table>\n\n        \n\n        \n            <details>\n            <summary style=\"margin-bottom: 20px;\"><h3 style=\"display: inline;\">Cluster Info</h3></summary>\n            <div class=\"jp-RenderedHTMLCommon jp-RenderedHTML jp-mod-trusted jp-OutputArea-output\">\n    <div style=\"width: 24px; height: 24px; background-color: #e1e1e1; border: 3px solid #9D9D9D; border-radius: 5px; position: absolute;\">\n    </div>\n    <div style=\"margin-left: 48px;\">\n        <h3 style=\"margin-bottom: 0px; margin-top: 0px;\">LocalCluster</h3>\n        <p style=\"color: #9D9D9D; margin-bottom: 0px;\">62d0ccd4</p>\n        <table style=\"width: 100%; text-align: left;\">\n            <tr>\n                <td style=\"text-align: left;\">\n                    <strong>Dashboard:</strong> <a href=\"http://127.0.0.1:8787/status\" target=\"_blank\">http://127.0.0.1:8787/status</a>\n                </td>\n                <td style=\"text-align: left;\">\n                    <strong>Workers:</strong> 5\n                </td>\n            </tr>\n            <tr>\n                <td style=\"text-align: left;\">\n                    <strong>Total threads:</strong> 20\n                </td>\n                <td style=\"text-align: left;\">\n                    <strong>Total memory:</strong> 30.96 GiB\n                </td>\n            </tr>\n            \n            <tr>\n    <td style=\"text-align: left;\"><strong>Status:</strong> running</td>\n    <td style=\"text-align: left;\"><strong>Using processes:</strong> True</td>\n</tr>\n\n            \n        </table>\n\n        <details>\n            <summary style=\"margin-bottom: 20px;\">\n                <h3 style=\"display: inline;\">Scheduler Info</h3>\n            </summary>\n\n            <div style=\"\">\n    <div>\n        <div style=\"width: 24px; height: 24px; background-color: #FFF7E5; border: 3px solid #FF6132; border-radius: 5px; position: absolute;\"> </div>\n        <div style=\"margin-left: 48px;\">\n            <h3 style=\"margin-bottom: 0px;\">Scheduler</h3>\n            <p style=\"color: #9D9D9D; margin-bottom: 0px;\">Scheduler-4a341215-7814-4fde-a35c-f90f4492536c</p>\n            <table style=\"width: 100%; text-align: left;\">\n                <tr>\n                    <td style=\"text-align: left;\">\n                        <strong>Comm:</strong> tcp://127.0.0.1:45181\n                    </td>\n                    <td style=\"text-align: left;\">\n                        <strong>Workers:</strong> 5\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"text-align: left;\">\n                        <strong>Dashboard:</strong> <a href=\"http://127.0.0.1:8787/status\" target=\"_blank\">http://127.0.0.1:8787/status</a>\n                    </td>\n                    <td style=\"text-align: left;\">\n                        <strong>Total threads:</strong> 20\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"text-align: left;\">\n                        <strong>Started:</strong> Just now\n                    </td>\n                    <td style=\"text-align: left;\">\n                        <strong>Total memory:</strong> 30.96 GiB\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n\n    <details style=\"margin-left: 48px;\">\n        <summary style=\"margin-bottom: 20px;\">\n            <h3 style=\"display: inline;\">Workers</h3>\n        </summary>\n\n        \n        <div style=\"margin-bottom: 20px;\">\n            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n            <div style=\"margin-left: 48px;\">\n            <details>\n                <summary>\n                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 0</h4>\n                </summary>\n                <table style=\"width: 100%; text-align: left;\">\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Comm: </strong> tcp://127.0.0.1:34133\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Total threads: </strong> 4\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:39875/status\" target=\"_blank\">http://127.0.0.1:39875/status</a>\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Memory: </strong> 6.19 GiB\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Nanny: </strong> tcp://127.0.0.1:46805\n                        </td>\n                        <td style=\"text-align: left;\"></td>\n                    </tr>\n                    <tr>\n                        <td colspan=\"2\" style=\"text-align: left;\">\n                            <strong>Local directory: </strong> /tmp/dask-scratch-space/worker-31p6doxl\n                        </td>\n                    </tr>\n\n                    \n\n                    \n\n                </table>\n            </details>\n            </div>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n            <div style=\"margin-left: 48px;\">\n            <details>\n                <summary>\n                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 1</h4>\n                </summary>\n                <table style=\"width: 100%; text-align: left;\">\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Comm: </strong> tcp://127.0.0.1:41389\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Total threads: </strong> 4\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:37229/status\" target=\"_blank\">http://127.0.0.1:37229/status</a>\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Memory: </strong> 6.19 GiB\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Nanny: </strong> tcp://127.0.0.1:43601\n                        </td>\n                        <td style=\"text-align: left;\"></td>\n                    </tr>\n                    <tr>\n                        <td colspan=\"2\" style=\"text-align: left;\">\n                            <strong>Local directory: </strong> /tmp/dask-scratch-space/worker-m9q13h76\n                        </td>\n                    </tr>\n\n                    \n\n                    \n\n                </table>\n            </details>\n            </div>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n            <div style=\"margin-left: 48px;\">\n            <details>\n                <summary>\n                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 2</h4>\n                </summary>\n                <table style=\"width: 100%; text-align: left;\">\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Comm: </strong> tcp://127.0.0.1:34985\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Total threads: </strong> 4\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:41965/status\" target=\"_blank\">http://127.0.0.1:41965/status</a>\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Memory: </strong> 6.19 GiB\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Nanny: </strong> tcp://127.0.0.1:34219\n                        </td>\n                        <td style=\"text-align: left;\"></td>\n                    </tr>\n                    <tr>\n                        <td colspan=\"2\" style=\"text-align: left;\">\n                            <strong>Local directory: </strong> /tmp/dask-scratch-space/worker-1yjf2_ei\n                        </td>\n                    </tr>\n\n                    \n\n                    \n\n                </table>\n            </details>\n            </div>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n            <div style=\"margin-left: 48px;\">\n            <details>\n                <summary>\n                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 3</h4>\n                </summary>\n                <table style=\"width: 100%; text-align: left;\">\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Comm: </strong> tcp://127.0.0.1:35209\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Total threads: </strong> 4\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:33913/status\" target=\"_blank\">http://127.0.0.1:33913/status</a>\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Memory: </strong> 6.19 GiB\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Nanny: </strong> tcp://127.0.0.1:42609\n                        </td>\n                        <td style=\"text-align: left;\"></td>\n                    </tr>\n                    <tr>\n                        <td colspan=\"2\" style=\"text-align: left;\">\n                            <strong>Local directory: </strong> /tmp/dask-scratch-space/worker-_sj1rvoz\n                        </td>\n                    </tr>\n\n                    \n\n                    \n\n                </table>\n            </details>\n            </div>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n            <div style=\"margin-left: 48px;\">\n            <details>\n                <summary>\n                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 4</h4>\n                </summary>\n                <table style=\"width: 100%; text-align: left;\">\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Comm: </strong> tcp://127.0.0.1:42041\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Total threads: </strong> 4\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:45571/status\" target=\"_blank\">http://127.0.0.1:45571/status</a>\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Memory: </strong> 6.19 GiB\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Nanny: </strong> tcp://127.0.0.1:35539\n                        </td>\n                        <td style=\"text-align: left;\"></td>\n                    </tr>\n                    <tr>\n                        <td colspan=\"2\" style=\"text-align: left;\">\n                            <strong>Local directory: </strong> /tmp/dask-scratch-space/worker-tgi7deul\n                        </td>\n                    </tr>\n\n                    \n\n                    \n\n                </table>\n            </details>\n            </div>\n        </div>\n        \n\n    </details>\n</div>\n\n        </details>\n    </div>\n</div>\n            </details>\n        \n\n    </div>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "slides09_dask_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}