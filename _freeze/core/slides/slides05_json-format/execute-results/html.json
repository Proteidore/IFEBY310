{
  "hash": "5f85f9b6af8b883ccbb205a7bcc31b30",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: \"2024-02-19\"\ntitle: \"SPARK & JSON\"\nengine: knitr\n---\n\n\n\n#  JSON data format\n\n\n\n## What is `JSON` ?\n\n- JavaScript Object Notation (JSON) is a *lightweight data-interchange format* based on the syntax of JavaScript objects\n\n- It is a text-based, human-readable, language-independent format for **representing structured object data** for **easy transmission** or **saving**\n\n- `JSON` objects can also be **stored in files** â€” typically a text file with a `.json` extension\n\n- `JSON` is used for **two-way data transmission** between a web-server and a client, but it is also often used as a *semi-structured data format*\n\n- Its syntax **closely resembles JavaScript** objects, but `JSON` can be used independently of `JavaScript`\n\n::: {.notes}\n\nhttps://career.guru99.com/top-19-json-interview-questions/\n\n> JSON is a  data exchange format.  JSON means JavaScript Object Notation; it is language and platform independent.\n\n:::\n\n---\n\n## Handling `JSON`?\n\n- Most languages have libraries to manipulate `JSON`\n\n- In {{< fa brands python >}}  we shall use `JSON` data in `python` using the `json` module from the standard library\n\n- {{< fa brands r-project >}} has several `JSON` packages to handle `JSON`. For example `jsonlite`\n\n\n\n## Lexikon\n\n- `JSON` objects should be thought of as *strings* or a *sequences* (or series) of *bytes* complying with the JSON syntax\n\n. . .\n\n- *Serialization*: convert an object (for example a  `dict`) to a `JSON` representation. The object is *encoded* for easy storage and/or transmission\n\n. . .\n\n- *Deserialization*: the reverse transformation of serialization. Involves *decoding* data in `JSON` format to *native data types* that can be manipulated\n\n\n::: {.notes}\n\nStrings and Bytes \n\n:::\n\n\n---\n\n\n## Why `JSON` ?\n\n- .stress[Much smaller representation than `XML`] (its predecessor) in client-server  communication: *faster data transfers*\n\n- `JSON` exists as a *sequence of bytes*: very useful to transmit (stream) data over a network\n\n- `JSON` is *reader-friendly* since it is ultimately *text* and simultaneously *machine-friendly*\n\n- `JSON` has an *expressive syntax* for representing arrays, objects, numbers and booleans/logicals\n\n\n\n# Using JSON with Python  {background-color=\"#1c191c\"}\n\n\n## Working with built-in datatypes\n\nThe `json` module  ({{< fa brands python >}})\n\n- encodes `Python` objects as `JSON` strings using instances of class `json.JSONEncoder` \n\n- decodes `JSON` strings into `Python` objects using instances of class `json.JSONDecoder`\n\n::: {.callout-warning}\n\nThe `JSON` encoder only handles native `Python` data types (`str`, `int`, `float`, `bool`, `list`, `tuple` and `dict`)\n\n:::\n\n## Dumps() and Dump()\n\nThe `json` module provides two very handy methods for *serialization* :\n\n| Function      | Description |\n| :---------| :----- |\n| `dumps()` | serializes an object to a `JSON` *formatted string* |\n| `dump()`  | serializes an object to a `JSON` *formatted stream* (which supports writing to a file).  |\n\n\n## Serialization of built-in datatypes\n\n`json.dumps()` and `json.dump()` use the following mapping conventions for built-in datatypes :\n\n::: {.columns}\n::: {.column}\n\n| Python      | `JSON` |\n| :---------- | -----: |\n| dict        | object |\n| list, tuple | array  |\n| str         | string |\n| int, float  | number |\n| True        | true   |\n| False       | false  |\n| None        | null   |\n\n\n:::\n\n. . .\n\n::: {.column}\n\n::: {.callout-warning}\n\n`list` and `tuple`  are mapped to the same `json` type.\n\n`int` and `float` are mapped  to the same `json` type\n\n:::\n\n:::\n\n:::\n\n---\n\n## Serialization example\n\n::: {.columns}\n\n::: {.column}\n\nSerialize a `Python` object into a `JSON` formatted string using `json.dumps()`\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport json\n\nspam = json.dumps({\n  \"name\": \"Foo Bar\",\n  \"age\": 78,\n  \"friends\": [\"Jane\",\"John\"],\n  \"balance\": 345.80,\n  \"other_names\":(\"Doe\",\"Joe\"),\n  \"active\": True,\n  \"spouse\": None\n  }, \n  sort_keys=True, \n  indent=4\n)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntype(spam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'str'>\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-note title=\"Remember:\"}\n\n`JSON.dumps()` converts a Python object into a JSON formatted text.\n\n:::\n\n:::\n\n\n::: {.column}\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(spam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{\n    \"active\": true,\n    \"age\": 78,\n    \"balance\": 345.8,\n    \"friends\": [\n        \"Jane\",\n        \"John\"\n    ],\n    \"name\": \"Foo Bar\",\n    \"other_names\": [\n        \"Doe\",\n        \"Joe\"\n    ],\n    \"spouse\": null\n}\n```\n\n\n:::\n:::\n\n\n\nPretty printing options\n\n- `sort_keys=True`:  sort the keys of the JSON object\n- `indent=4`: indent using 4 spaces\n \n\n:::\n\n:::\n\n\n\n\n\n## Dumping a date\n\nA Python `date` object is not serializable.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom datetime import date\ntd = date.today()\n```\n:::\n\n\n\n\n```{.python}\n>>> js.dumps(td)\n...\nTypeError: Object of type date is not JSON serializable\n\n```\n\n\nBut it can be converted into serializable types.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\njson.dumps(td.isoformat())\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\njson.dumps(td.isocalendar())\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\njson.dumps(td.timetuple())\n```\n:::\n\n\n\n## Serialization example\n\n`json.dump()` allows to write the output stream to a file\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nwith open('user.json','w') as file:\n        json.dump({\n            \"name\": \"Foo Bar\",\n            \"age\": 78,\n            \"friends\": [\"Jane\",\"John\"],\n            \"balance\": 345.80,\n            \"other_names\": (\"Doe\",\"Joe\"),\n            \"active\": True,\n            \"spouse\": None\n          }, \n          file, \n          sort_keys=True, indent=4\n        )\n```\n:::\n\n\n\n. . . \n\nThis writes a `user.json` file to disk with similar content as in the previous example\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n!ls -l *.json\n```\n:::\n\n\n\n---\n\n## Deserializing built-in datatypes\n\nSimilarly to serialization, the `json` module exposes two methods for deserialization:\n\n| Function                     | Description |\n|:---------|:-----|\n| `loads()` | deserializes a `JSON` document to a Python object |\n| `load()`  | deserializes a `JSON` formatted stream (which supports reading from a file) to a Python object |\n\n\n---\n\n## Deserializing built-in datatypes\n\nThe decoder converts `JSON` encoded data into native Python data types as in the table below:\n\n\n| `JSON`                              |  Python |\n| :--------------------------------- | ---------------: |\n| object                 |           dict |\n| array | list  |\n| string    |         str |\n| number (int)  |       int |\n| number (real)   |      float |\n| true        |     True |\n| false |     False \n| null | None |\n\n\n\n## Deserialization example\n\nPass a `JSON` string to the `json.loads()` method :\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nspam = json.loads('{\"active\": true, \"age\": 78, \"balance\": 345.8, \"friends\": [\"Jane\",\"John\"], \"name\": \"Foo Bar\", \"other_names\": [\"Doe\",\"Joe\"],\"spouse\":null}')\n```\n:::\n\n\n\n. . .\n\nwe obtain a dictionary as  output:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nspam\n```\n:::\n\n\n\n---\n\n## Deserialization example\n\nWe can also read from the `user.json` file  we created before:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nwith open('user.json', 'r') as file:\n  user_data = json.load(file)\n\nuser_data\n```\n:::\n\n\n\n. . .\n\nWe obtain the same `dict`. This is *simple* and  fast.\n\n\n---\n\n## Serialize and deserialize custom objects\n\n- Using `JSON`, we serialized and deserialized objects containing only *encapsulated built-in types*\n\n- We can also work a little bit to serialize *custom objects*\n\n- Let's go to [notebook07_json-format.ipynb](/labs/grosses-data/_ipynbs/notebook07_json-format.ipynb)\n\n\n\n# Using JSON data with Spark {background-color=\"#1c191c\"}\n\n\n\n## Using `JSON` data with `Spark`\n\nTypically achieved using\n\n```{.python}\nspark.read.json(filepath, multiLine=True)\n```\n\n. . .\n\n- Pretty simple\n\n- but usually requires *extra cleaning* or *schema flattening*\n\n(Almost) Everything is explained in the notebook : \n\n::: {.center}\n  \n[notebook07_json-format.ipynb](/labs/grosses-data/_ipynbs/notebook07_json-format.ipynb)\n\n:::\n\n. . .\n\n`JSON`  reader and writer allows us save and read Spark dataframes with composite types. \n\n\n## Obtaininig JSON objects from an API\n\n> A common use of JSON is to collect JSON data from a web server as a file or HTTP request, and convert the JSON data to a Python/R/Spark object.\n\n# Recap  JSON objects {background-color=\"#1c191c\"}\n\n## {{< fa syringe >}} What is a JSON object?\n\n> An object can be defined as an unordered set of name/value pairs.  An object in JSON starts with **{**left brace} and finish or ends with {right brace**}**.  Every name is followed by**:** (colon) and the name/value pairs are parted by**,** (comma).\n\n## {{< fa syringe >}} JSON syntax\n\nJSON syntax is a subset of the JavaScript object notation syntax.\n\n- Data is in *name/value pairs*\n- Data is separated by comma **,**\n- Curly brackets **{}** hold `objects`\n- Square bracket **[]** holds `arrays`\n\n## {{< fa syringe >}} JSON and types \n\nJSON types: \n\n- Number, \n- Array, \n- Boolean, \n- String\n- Object\n- Null\n\n## `json`  versus `pickle`\n\nTwo competing serialization modules?\n\n. . .\n\n- `Pickle` is Python bound \n- `Pickle` handles (almost) everything that can be defined in `Python`\n- Other computing environments have to develop bypasses to handle `pickle` dumps.\n\n. . .\n\n- `json` is used by widely different languages and systems\n- `json` is readable\n- `json` is less prone to malicious code injection\n\n## Json dialects : spatial data {.smaller}\n\nJSON objects are used extensively to handle spatial or textual data.\n\nJSON objects are used by spatial extensions of Pandas and Spark.\n\n. . .\n\n[GeoJSON](https://geojson.org) is a format for encoding a variety of geographic data structures. GeoJSON supports the following geometry types: `Point`, `LineString`, `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`. Geometric objects with additional properties are `Feature` objects. Sets of features are contained by `FeatureCollection` objects.\n\n. . .\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"coordinates\": [\n          2.381584638521815,\n          48.82906361931293\n        ],\n        \"type\": \"Point\"\n      }\n    }\n  ]\n}\n```\n:::\n\n\n\nSee [Loading GeoJSON using Spark](https://sedona.apache.org/1.5.1/tutorial/sql/?h=json#load-geojson-using-spark-json-data-source)\n\n## Semi-structured data and  NLP  {.smaller}\n\nNatural Language Processing (NLP) handles corpora of texts (called documents), annotates the documents, parses the   documents into sentences and tokens, performs syntactic analysis (POS tagging), and eventually enables *topic modeling*, *sentiment analysis*, automatic translation, and other machine learning tasks.\n\nCorpus annotation can be performed using [`spark-nlp`](https://www.johnsnowlabs.com/spark-nlp/) a package developped by the [John Snow Labs](https://www.johnsnowlabs.com) to offer NLP above `Spark SQL`  and `Spark MLLib`.\n\n\nAnnotation starts by applying a `DocumentAssembler()` transformation to a corpus. This introduces columns with composite types\n\n\n## Document Assembling {.smaller}\n\n```{.python}\n\n>>> result = documentAssembler.transform(data)\n>>> result.select(\"document\").show(truncate=False)\n+----------------------------------------------------------------------------------------------+\n|document                                                                                      |\n+----------------------------------------------------------------------------------------------+\n|[[document, 0, 51, Spark NLP is an open-source text processing library., [sentence -> 0], []]]|\n+----------------------------------------------------------------------------------------------+\n>>> result.select(\"document\").printSchema()\nroot\n|-- document: array (nullable = True)\n|    |-- element: struct (containsNull = True)\n|    |    |-- annotatorType: string (nullable = True)\n|    |    |-- begin: integer (nullable = False)\n|    |    |-- end: integer (nullable = False)\n|    |    |-- result: string (nullable = True)\n|    |    |-- metadata: map (nullable = True)\n|    |    |    |-- key: string\n|    |    |    |-- value: string (valueContainsNull = True)\n|    |    |-- embeddings: array (nullable = True)\n|    |    |    |-- element: float (containsNull = False)\n```\n\n\nColumn `document` is of type `ArrayType()`. The basetype of `document` column is of `StructType()` (`element`), the `element` contains subfields of primitive type, but alo a field of type `map` (`MapType()`) and a field of type `StructType()`.  \n\n\n# Querying JSON strings {background-color=\"#1c191c\"}\n\n## JSON path\n\nThe SQL/JSON path language: specify the items to be retrieved from JSON data\n\n- Path expressions\n- Evaluation\n- Result\n\nDifferent dialects\n\n- `jsonpath`  see [PostgreSQL]()\n- `jmespath` see [JMES Path](https://jmespath.org)\n- `...`\n\n## Examples\n\n- ...\n- ...\n- ...\n\n\n\n# References {background-color=\"#1c191c\"}\n\n\n- [Documentation Python json](https://docs.python.org/3/library/json.html)\n\n- [PostgreSQL json types](https://www.postgresql.org/docs/current/datatype-json.html)\n\n- [Spark Composite types]()\n\n- [GeoJSON](https://geojson.io)\n\n- [GeoPandas](https://geopandas.org/en/stable/)\n\n- [Spark NLP](https://sparknlp.org/api/python/index.html)\n  \n- [SQL JSON Path language](https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-SQLJSON-PATH)\n\n# Thank you !  {background-color=\"#1c191c\"}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}